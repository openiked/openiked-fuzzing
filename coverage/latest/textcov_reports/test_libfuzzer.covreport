freezero:
   25|      1|{
   26|       |	/* This is legal. */
   27|      1|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 0, False: 1]
  ------------------
   28|      0|		return;
   29|       |
   30|      1|	explicit_bzero(ptr, sz);
   31|      1|	free(ptr);
   32|      1|}

ibuf_open:
   39|  1.52k|{
   40|  1.52k|	struct ibuf	*buf;
   41|       |
   42|  1.52k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (42:6): [True: 0, False: 1.52k]
  ------------------
   43|      0|		return (NULL);
   44|  1.52k|	if ((buf->buf = malloc(len)) == NULL) {
  ------------------
  |  Branch (44:6): [True: 0, False: 1.52k]
  ------------------
   45|      0|		free(buf);
   46|      0|		return (NULL);
   47|      0|	}
   48|  1.52k|	buf->size = buf->max = len;
   49|  1.52k|	buf->fd = -1;
   50|       |
   51|  1.52k|	return (buf);
   52|  1.52k|}
ibuf_dynamic:
   56|  1.52k|{
   57|  1.52k|	struct ibuf	*buf;
   58|       |
   59|  1.52k|	if (max < len)
  ------------------
  |  Branch (59:6): [True: 0, False: 1.52k]
  ------------------
   60|      0|		return (NULL);
   61|       |
   62|  1.52k|	if ((buf = ibuf_open(len)) == NULL)
  ------------------
  |  Branch (62:6): [True: 0, False: 1.52k]
  ------------------
   63|      0|		return (NULL);
   64|       |
   65|  1.52k|	if (max > 0)
  ------------------
  |  Branch (65:6): [True: 1.52k, False: 0]
  ------------------
   66|  1.52k|		buf->max = max;
   67|       |
   68|  1.52k|	return (buf);
   69|  1.52k|}
ibuf_add:
   93|  1.52k|{
   94|  1.52k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (94:6): [True: 0, False: 1.52k]
  ------------------
   95|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (95:7): [True: 0, False: 0]
  ------------------
   96|      0|			return (-1);
   97|       |
   98|  1.52k|	memcpy(buf->buf + buf->wpos, data, len);
   99|  1.52k|	buf->wpos += len;
  100|  1.52k|	return (0);
  101|  1.52k|}
ibuf_seek:
  119|   141k|{
  120|       |	/* only allowed to seek in already written parts */
  121|   141k|	if (pos + len > buf->wpos)
  ------------------
  |  Branch (121:6): [True: 893, False: 140k]
  ------------------
  122|    893|		return (NULL);
  123|       |
  124|   140k|	return (buf->buf + pos);
  125|   141k|}
ibuf_size:
  129|    894|{
  130|    894|	return (buf->wpos);
  131|    894|}
ibuf_free:
  218|      1|{
  219|      1|	if (buf == NULL)
  ------------------
  |  Branch (219:6): [True: 0, False: 1]
  ------------------
  220|      0|		return;
  221|      1|	freezero(buf->buf, buf->size);
  222|      1|	free(buf);
  223|      1|}

strlcpy:
   29|  64.1k|{
   30|  64.1k|	const char *osrc = src;
   31|  64.1k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|  64.1k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 64.1k, False: 0]
  ------------------
   35|   365k|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 364k, False: 450]
  ------------------
   36|   364k|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 63.6k, False: 301k]
  ------------------
   37|  63.6k|				break;
   38|   364k|		}
   39|  64.1k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|  64.1k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 450, False: 63.6k]
  ------------------
   43|    450|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 450, False: 0]
  ------------------
   44|    450|			*dst = '\0';		/* NUL-terminate dst */
   45|    450|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 450]
  ------------------
   46|      0|			;
   47|    450|	}
   48|       |
   49|  64.1k|	return(src - osrc - 1);	/* count does not include NUL */
   50|  64.1k|}

ikev2_pld_parse:
  118|    894|{
  119|    894|	log_debug("%s: header ispi %s rspi %s"
  120|    894|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  121|    894|	    " msgid %d length %u response %d", __func__,
  122|    894|	    print_spi(betoh64(hdr->ike_ispi), 8),
  123|    894|	    print_spi(betoh64(hdr->ike_rspi), 8),
  124|    894|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  125|    894|	    hdr->ike_version,
  126|    894|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  127|    894|	    hdr->ike_flags,
  128|    894|	    betoh32(hdr->ike_msgid),
  129|    894|	    betoh32(hdr->ike_length),
  130|    894|	    msg->msg_response);
  131|       |
  132|    894|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  Branch (132:6): [True: 4, False: 890]
  ------------------
  133|      4|		log_debug("%s: short message", __func__);
  134|      4|		return (-1);
  135|      4|	}
  136|       |
  137|    890|	offset += sizeof(*hdr);
  138|       |
  139|    890|	return (ikev2_pld_payloads(env, msg, offset,
  140|    890|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  141|    894|}
ikev2_validate_pld:
  146|  31.2k|{
  147|  31.2k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  148|  31.2k|	size_t		 pld_length;
  149|       |
  150|       |	/* We need at least the generic header. */
  151|  31.2k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (151:6): [True: 114, False: 31.1k]
  ------------------
  152|    114|		log_debug("%s: malformed payload: too short for generic "
  153|    114|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  154|    114|		return (-1);
  155|    114|	}
  156|  31.1k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  157|       |
  158|       |	/*
  159|       |	 * We need at least the specified number of bytes.
  160|       |	 * pld_length is the full size of the payload including
  161|       |	 * the generic payload header.
  162|       |	 */
  163|  31.1k|	pld_length = betoh16(pld->pld_length);
  164|  31.1k|	if (left < pld_length) {
  ------------------
  |  Branch (164:6): [True: 184, False: 30.9k]
  ------------------
  165|    184|		log_debug("%s: malformed payload: shorter than specified "
  166|    184|		    "(%zu < %zu)", __func__, left, pld_length);
  167|    184|		return (-1);
  168|    184|	}
  169|       |	/*
  170|       |	 * Sanity check the specified payload size, it must
  171|       |	 * be at least the size of the generic payload header.
  172|       |	 */
  173|  30.9k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (173:6): [True: 72, False: 30.8k]
  ------------------
  174|     72|		log_debug("%s: malformed payload: shorter than minimum "
  175|     72|		    "header size (%zu < %zu)", __func__, pld_length,
  176|     72|		    sizeof(*pld));
  177|     72|		return (-1);
  178|     72|	}
  179|       |
  180|  30.8k|	return (0);
  181|  30.9k|}
ikev2_pld_payloads:
  186|    890|{
  187|    890|	struct ikev2_payload	 pld;
  188|    890|	unsigned int		 e;
  189|    890|	int			 ret;
  190|    890|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  191|    890|	size_t			 total, left;
  192|       |
  193|       |	/* Check if message was decrypted in an E payload */
  194|    890|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|    890|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (194:6): [True: 890, False: 0]
  ------------------
  195|       |
  196|       |	/* Bytes left in datagram. */
  197|    890|	total = length - offset;
  198|       |
  199|  31.7k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (199:9): [True: 31.6k, False: 143]
  |  Branch (199:25): [True: 31.2k, False: 374]
  ------------------
  200|  31.2k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (200:7): [True: 370, False: 30.8k]
  ------------------
  201|    370|			return (-1);
  202|       |
  203|  30.8k|		log_debug("%s: %spayload %s"
  204|  30.8k|		    " nextpayload %s critical 0x%02x length %d",
  205|  30.8k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (205:17): [True: 30.8k, False: 0]
  ------------------
  206|  30.8k|		    print_map(payload, ikev2_payload_map),
  207|  30.8k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  208|  30.8k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|  30.8k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  209|  30.8k|		    betoh16(pld.pld_length));
  210|       |
  211|       |		/* Skip over generic payload header. */
  212|  30.8k|		offset += sizeof(pld);
  213|  30.8k|		total -= sizeof(pld);
  214|  30.8k|		left = betoh16(pld.pld_length) - sizeof(pld);
  215|  30.8k|		ret = 0;
  216|       |
  217|  30.8k|		switch (payload | e) {
  218|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (218:3): [True: 0, False: 30.8k]
  ------------------
  219|  6.12k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  6.12k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  6.12k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (219:3): [True: 6.12k, False: 24.7k]
  ------------------
  220|  6.12k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  221|  6.12k|			break;
  222|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (222:3): [True: 0, False: 30.8k]
  ------------------
  223|    913|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|    913|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|    913|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (223:3): [True: 913, False: 29.9k]
  ------------------
  224|    913|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  225|    913|			break;
  226|  1.20k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|  1.20k|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|  1.20k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 1.20k, False: 29.6k]
  ------------------
  227|  1.76k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  1.76k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  1.76k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (227:3): [True: 560, False: 30.3k]
  ------------------
  228|  1.76k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  229|  1.76k|			    payload);
  230|  1.76k|			break;
  231|    308|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|    308|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|    308|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (231:3): [True: 308, False: 30.5k]
  ------------------
  232|    308|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  233|    308|			break;
  234|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (234:3): [True: 0, False: 30.8k]
  ------------------
  235|  3.15k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  3.15k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  3.15k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (235:3): [True: 3.15k, False: 27.7k]
  ------------------
  236|  3.15k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  237|  3.15k|			break;
  238|  1.67k|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|  1.67k|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|  1.67k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (238:3): [True: 1.67k, False: 29.2k]
  ------------------
  239|  1.67k|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  240|  1.67k|			break;
  241|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (241:3): [True: 0, False: 30.8k]
  ------------------
  242|    110|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|    110|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|    110|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (242:3): [True: 110, False: 30.7k]
  ------------------
  243|    110|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  244|    110|			break;
  245|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (245:3): [True: 0, False: 30.8k]
  ------------------
  246|  1.83k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  1.83k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  1.83k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (246:3): [True: 1.83k, False: 29.0k]
  ------------------
  247|  1.83k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  248|  1.83k|			break;
  249|  1.03k|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|  1.03k|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|  1.03k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (249:3): [True: 1.03k, False: 29.8k]
  ------------------
  250|  1.03k|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  251|  1.03k|			break;
  252|    353|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|    353|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|    353|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 353, False: 30.5k]
  ------------------
  253|  1.13k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  1.13k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  1.13k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (253:3): [True: 786, False: 30.1k]
  ------------------
  254|  1.13k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  255|  1.13k|			break;
  256|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (256:3): [True: 0, False: 30.8k]
  ------------------
  257|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  258|      0|			break;
  259|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (259:3): [True: 0, False: 30.8k]
  ------------------
  260|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  261|      0|			break;
  262|  2.02k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  2.02k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  2.02k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (262:3): [True: 2.02k, False: 28.8k]
  ------------------
  263|  2.02k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  264|  2.02k|			break;
  265|  4.62k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  4.62k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  4.62k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (265:3): [True: 4.62k, False: 26.2k]
  ------------------
  266|  4.62k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  267|  4.62k|			break;
  268|  6.21k|		default:
  ------------------
  |  Branch (268:3): [True: 6.21k, False: 24.6k]
  ------------------
  269|  6.21k|			print_hex(msgbuf, offset,
  270|  6.21k|			    betoh16(pld.pld_length) - sizeof(pld));
  271|  6.21k|			break;
  272|  30.8k|		}
  273|       |
  274|  30.8k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (274:7): [True: 16.0k, False: 14.8k]
  |  Branch (274:19): [True: 0, False: 16.0k]
  ------------------
  275|      0|			(void)ikev2_send_informational(env, msg);
  276|      0|			return (-1);
  277|      0|		}
  278|       |
  279|       |		/* Encrypted payloads must appear last */
  280|  30.8k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|  30.8k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (280:7): [True: 1, False: 30.8k]
  ------------------
  281|  30.8k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|  30.8k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (281:7): [True: 2, False: 30.8k]
  ------------------
  282|      3|			return (0);
  283|       |
  284|  30.8k|		payload = pld.pld_nextpayload;
  285|  30.8k|		offset += left;
  286|  30.8k|		total -= left;
  287|  30.8k|	}
  288|       |
  289|    517|	return (0);
  290|    890|}
ikev2_validate_sa:
  295|  7.67k|{
  296|  7.67k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  297|  7.67k|	size_t		 sap_length;
  298|       |
  299|  7.67k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (299:6): [True: 2.53k, False: 5.13k]
  ------------------
  300|  2.53k|		log_debug("%s: malformed payload: too short for header "
  301|  2.53k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  302|  2.53k|		return (-1);
  303|  2.53k|	}
  304|  5.13k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  305|       |
  306|  5.13k|	sap_length = betoh16(sap->sap_length);
  307|  5.13k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (307:6): [True: 1.03k, False: 4.10k]
  ------------------
  308|  1.03k|		log_debug("%s: malformed payload: shorter than minimum header "
  309|  1.03k|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  310|  1.03k|		return (-1);
  311|  1.03k|	}
  312|  4.10k|	if (left < sap_length) {
  ------------------
  |  Branch (312:6): [True: 452, False: 3.64k]
  ------------------
  313|    452|		log_debug("%s: malformed payload: too long for actual payload "
  314|    452|		    "size (%zu < %zu)", __func__, left, sap_length);
  315|    452|		return (-1);
  316|    452|	}
  317|       |	/*
  318|       |	 * If there is only one proposal, sap_length must be the
  319|       |	 * total payload size.
  320|       |	 */
  321|  3.64k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (321:6): [True: 436, False: 3.21k]
  |  Branch (321:24): [True: 12, False: 424]
  ------------------
  322|     12|		log_debug("%s: malformed payload: SA payload length mismatches "
  323|     12|		    "single proposal substructure length (%lu != %zu)",
  324|     12|		    __func__, left, sap_length);
  325|     12|		return (-1);
  326|     12|	}
  327|       |	/*
  328|       |	 * If there are more than one proposal, there must be bytes
  329|       |	 * left in the payload.
  330|       |	 */
  331|  3.63k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (331:6): [True: 3.21k, False: 424]
  |  Branch (331:23): [True: 68, False: 3.14k]
  ------------------
  332|     68|		log_debug("%s: malformed payload: SA payload too small for "
  333|     68|		    "further proposals (%zu <= %zu)", __func__,
  334|     68|		    left, sap_length);
  335|     68|		return (-1);
  336|     68|	}
  337|  3.56k|	return (0);
  338|  3.63k|}
ikev2_pld_sa:
  343|  6.12k|{
  344|  6.12k|	struct ikev2_sa_proposal	 sap;
  345|  6.12k|	struct iked_proposal		*prop = NULL;
  346|  6.12k|	uint32_t			 spi32;
  347|  6.12k|	uint64_t			 spi = 0, spi64;
  348|  6.12k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  349|  6.12k|	int				 r;
  350|  6.12k|	struct iked_proposals		*props;
  351|  6.12k|	size_t				 total;
  352|       |
  353|  7.67k|	do {
  354|  7.67k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (354:7): [True: 4.10k, False: 3.56k]
  ------------------
  355|  4.10k|			return (-1);
  356|       |
  357|       |		/* Assumed size of the first proposals, including SPI if present. */
  358|  3.56k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  359|       |
  360|  3.56k|		props = &msg->msg_parent->msg_proposals;
  361|       |
  362|  3.56k|		offset += sizeof(sap);
  363|  3.56k|		left -= sizeof(sap);
  364|       |
  365|  3.56k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (365:7): [True: 471, False: 3.09k]
  ------------------
  366|    471|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (366:8): [True: 71, False: 400]
  ------------------
  367|     71|				log_debug("%s: malformed payload: SPI larger than "
  368|     71|				    "actual payload (%zu < %d)", __func__, left,
  369|     71|				    sap.sap_spisize);
  370|     71|				return (-1);
  371|     71|			}
  372|    400|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (372:8): [True: 66, False: 334]
  ------------------
  373|     66|				log_debug("%s: malformed payload: SPI larger than "
  374|     66|				    "proposal (%zu < %d)", __func__, total,
  375|     66|				    sap.sap_spisize);
  376|     66|				return (-1);
  377|     66|			}
  378|    334|			switch (sap.sap_spisize) {
  379|     87|			case 4:
  ------------------
  |  Branch (379:4): [True: 87, False: 247]
  ------------------
  380|     87|				memcpy(&spi32, msgbuf + offset, 4);
  381|     87|				spi = betoh32(spi32);
  382|     87|				break;
  383|    130|			case 8:
  ------------------
  |  Branch (383:4): [True: 130, False: 204]
  ------------------
  384|    130|				memcpy(&spi64, msgbuf + offset, 8);
  385|    130|				spi = betoh64(spi64);
  386|    130|				break;
  387|    117|			default:
  ------------------
  |  Branch (387:4): [True: 117, False: 217]
  ------------------
  388|    117|				log_debug("%s: unsupported SPI size %d",
  389|    117|				    __func__, sap.sap_spisize);
  390|    117|				return (-1);
  391|    334|			}
  392|       |
  393|    217|			offset += sap.sap_spisize;
  394|    217|			left -= sap.sap_spisize;
  395|       |
  396|       |			/* Assumed size of the proposal, now without SPI. */
  397|    217|			total -= sap.sap_spisize;
  398|    217|		}
  399|       |
  400|       |		/*
  401|       |		 * As we verified sanity of packet headers, this check will
  402|       |		 * be always false, but just to be sure we keep it.
  403|       |		 */
  404|  3.31k|		if (left < total) {
  ------------------
  |  Branch (404:7): [True: 0, False: 3.31k]
  ------------------
  405|      0|			log_debug("%s: malformed payload: too long for payload "
  406|      0|			    "(%zu < %zu)", __func__, left, total);
  407|      0|			return (-1);
  408|      0|		}
  409|       |
  410|  3.31k|		log_debug("%s: more %d reserved %d length %d"
  411|  3.31k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  412|  3.31k|		    __func__, sap.sap_more, sap.sap_reserved,
  413|  3.31k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  414|  3.31k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  415|  3.31k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  416|       |
  417|  3.31k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (417:7): [True: 0, False: 3.31k]
  ------------------
  418|      0|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (418:8): [True: 0, False: 0]
  ------------------
  419|      0|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  420|      0|				log_debug("%s: invalid proposal", __func__);
  421|      0|				return (-1);
  422|      0|			}
  423|      0|			prop = msg->msg_parent->msg_prop;
  424|      0|			prop->prop_peerspi.spi = spi;
  425|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  426|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  427|       |
  428|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  429|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  430|      0|		}
  431|       |
  432|       |		/*
  433|       |		 * Parse the attached transforms
  434|       |		 */
  435|  3.31k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (435:7): [True: 1.97k, False: 1.34k]
  ------------------
  436|  1.97k|			r = ikev2_pld_xform(env, msg, offset, total);
  437|  1.97k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (437:8): [True: 0, False: 1.97k]
  |  Branch (437:21): [True: 0, False: 0]
  ------------------
  438|      0|				log_debug("%s: invalid proposal transform",
  439|      0|				    __func__);
  440|       |
  441|       |				/* cleanup and ignore proposal */
  442|      0|				config_free_proposal(props, prop);
  443|      0|				prop = msg->msg_parent->msg_prop = NULL;
  444|  1.97k|			} else if (r != 0) {
  ------------------
  |  Branch (444:15): [True: 1.52k, False: 454]
  ------------------
  445|  1.52k|				log_debug("%s: invalid proposal transforms",
  446|  1.52k|				    __func__);
  447|  1.52k|				return (-1);
  448|  1.52k|			}
  449|  1.97k|		}
  450|       |
  451|  1.79k|		offset += total;
  452|  1.79k|		left -= total;
  453|  1.79k|	} while (sap.sap_more);
  ------------------
  |  Branch (453:11): [True: 1.55k, False: 243]
  ------------------
  454|       |
  455|    243|	return (0);
  456|  6.12k|}
ikev2_validate_xform:
  461|  2.45k|{
  462|  2.45k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  463|  2.45k|	size_t		 xfrm_length;
  464|       |
  465|  2.45k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (465:6): [True: 250, False: 2.20k]
  ------------------
  466|    250|		log_debug("%s: malformed payload: too short for header "
  467|    250|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  468|    250|		return (-1);
  469|    250|	}
  470|  2.20k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  471|       |
  472|  2.20k|	xfrm_length = betoh16(xfrm->xfrm_length);
  473|  2.20k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (473:6): [True: 183, False: 2.02k]
  ------------------
  474|    183|		log_debug("%s: malformed payload: shorter than minimum header "
  475|    183|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  476|    183|		return (-1);
  477|    183|	}
  478|  2.02k|	if (total < xfrm_length) {
  ------------------
  |  Branch (478:6): [True: 255, False: 1.76k]
  ------------------
  479|    255|		log_debug("%s: malformed payload: too long for payload size "
  480|    255|		    "(%zu < %zu)", __func__, total, xfrm_length);
  481|    255|		return (-1);
  482|    255|	}
  483|       |
  484|  1.76k|	return (0);
  485|  2.02k|}
ikev2_pld_xform:
  490|  2.45k|{
  491|  2.45k|	struct ikev2_transform		 xfrm;
  492|  2.45k|	char				 id[BUFSIZ];
  493|  2.45k|	int				 ret = 0;
  494|  2.45k|	int				 r;
  495|  2.45k|	size_t				 xfrm_length;
  496|       |
  497|  2.45k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (497:6): [True: 688, False: 1.76k]
  ------------------
  498|    688|		return (-1);
  499|       |
  500|  1.76k|	xfrm_length = betoh16(xfrm.xfrm_length);
  501|       |
  502|  1.76k|	switch (xfrm.xfrm_type) {
  503|    467|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|    467|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (503:2): [True: 467, False: 1.30k]
  ------------------
  504|    467|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  505|    467|		    ikev2_xformencr_map), sizeof(id));
  506|    467|		break;
  507|    507|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|    507|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (507:2): [True: 507, False: 1.26k]
  ------------------
  508|    507|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  509|    507|		    ikev2_xformprf_map), sizeof(id));
  510|    507|		break;
  511|     69|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|     69|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (511:2): [True: 69, False: 1.69k]
  ------------------
  512|     69|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  513|     69|		    ikev2_xformauth_map), sizeof(id));
  514|     69|		break;
  515|     71|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|     71|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (515:2): [True: 71, False: 1.69k]
  ------------------
  516|     71|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  517|     71|		    ikev2_xformdh_map), sizeof(id));
  518|     71|		break;
  519|     67|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|     67|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (519:2): [True: 67, False: 1.70k]
  ------------------
  520|     67|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  521|     67|		    ikev2_xformesn_map), sizeof(id));
  522|     67|		break;
  523|    586|	default:
  ------------------
  |  Branch (523:2): [True: 586, False: 1.18k]
  ------------------
  524|    586|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  525|    586|		break;
  526|  1.76k|	}
  527|       |
  528|  1.76k|	log_debug("%s: more %d reserved %d length %zu"
  529|  1.76k|	    " type %s id %s",
  530|  1.76k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  531|  1.76k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  532|       |
  533|       |	/*
  534|       |	 * Parse transform attributes, if available
  535|       |	 */
  536|  1.76k|	msg->msg_attrlength = 0;
  537|  1.76k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (537:6): [True: 1.04k, False: 720]
  ------------------
  538|  1.04k|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (538:7): [True: 715, False: 332]
  ------------------
  539|  1.04k|		    xfrm_length - sizeof(xfrm)) != 0) {
  540|    715|			return (-1);
  541|    715|		}
  542|  1.04k|	}
  543|       |
  544|  1.05k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (544:6): [True: 0, False: 1.05k]
  ------------------
  545|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  546|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  547|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  548|      0|		if (r == -1) {
  ------------------
  |  Branch (548:7): [True: 0, False: 0]
  ------------------
  549|      0|			log_debug("%s: failed to add transform: alloc error",
  550|      0|			    __func__);
  551|      0|			return (r);
  552|      0|		} else if (r == -2) {
  ------------------
  |  Branch (552:14): [True: 0, False: 0]
  ------------------
  553|      0|			log_debug("%s: failed to add transform: unknown type",
  554|      0|			    __func__);
  555|      0|			return (r);
  556|      0|		}
  557|      0|	}
  558|       |
  559|       |	/* Next transform */
  560|  1.05k|	offset += xfrm_length;
  561|  1.05k|	total -= xfrm_length;
  562|  1.05k|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|  1.05k|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (562:6): [True: 481, False: 571]
  ------------------
  563|    481|		ret = ikev2_pld_xform(env, msg, offset, total);
  564|    571|	else if (total != 0) {
  ------------------
  |  Branch (564:11): [True: 117, False: 454]
  ------------------
  565|       |		/* No more transforms but still some data left. */
  566|    117|		log_debug("%s: less data than specified, %zu bytes left",
  567|    117|		    __func__, total);
  568|    117|		ret = -1;
  569|    117|	}
  570|       |
  571|  1.05k|	return (ret);
  572|  1.05k|}
ikev2_validate_attr:
  577|  27.2k|{
  578|  27.2k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  579|       |
  580|  27.2k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (580:6): [True: 122, False: 27.1k]
  ------------------
  581|    122|		log_debug("%s: malformed payload: too short for header "
  582|    122|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  583|    122|		return (-1);
  584|    122|	}
  585|  27.1k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  586|       |
  587|  27.1k|	return (0);
  588|  27.2k|}
ikev2_pld_attr:
  593|  27.2k|{
  594|  27.2k|	struct ikev2_attribute		 attr;
  595|  27.2k|	unsigned int			 type;
  596|  27.2k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  597|  27.2k|	int				 ret = 0;
  598|  27.2k|	size_t				 attr_length;
  599|       |
  600|  27.2k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (600:6): [True: 122, False: 27.1k]
  ------------------
  601|    122|		return (-1);
  602|       |
  603|  27.1k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  27.1k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  604|       |
  605|  27.1k|	log_debug("%s: attribute type %s length %d total %zu",
  606|  27.1k|	    __func__, print_map(type, ikev2_attrtype_map),
  607|  27.1k|	    betoh16(attr.attr_length), total);
  608|       |
  609|  27.1k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  27.1k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (609:6): [True: 21.5k, False: 5.51k]
  ------------------
  610|       |		/* Type-Value attribute */
  611|  21.5k|		offset += sizeof(attr);
  612|  21.5k|		total -= sizeof(attr);
  613|       |
  614|  21.5k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  21.5k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (614:7): [True: 38, False: 21.5k]
  ------------------
  615|     38|			msg->msg_attrlength = betoh16(attr.attr_length);
  616|  21.5k|	} else {
  617|       |		/* Type-Length-Value attribute */
  618|  5.51k|		attr_length = betoh16(attr.attr_length);
  619|  5.51k|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (619:7): [True: 294, False: 5.22k]
  ------------------
  620|    294|			log_debug("%s: malformed payload: shorter than "
  621|    294|			    "minimum header size (%zu < %zu)", __func__,
  622|    294|			    attr_length, sizeof(attr));
  623|    294|			return (-1);
  624|    294|		}
  625|  5.22k|		if (total < attr_length) {
  ------------------
  |  Branch (625:7): [True: 299, False: 4.92k]
  ------------------
  626|    299|			log_debug("%s: malformed payload: attribute larger "
  627|    299|			    "than actual payload (%zu < %zu)", __func__,
  628|    299|			    total, attr_length);
  629|    299|			return (-1);
  630|    299|		}
  631|  4.92k|		print_hex(msgbuf, offset + sizeof(attr),
  632|  4.92k|		    attr_length - sizeof(attr));
  633|  4.92k|		offset += attr_length;
  634|  4.92k|		total -= attr_length;
  635|  4.92k|	}
  636|       |
  637|  26.5k|	if (total > 0) {
  ------------------
  |  Branch (637:6): [True: 26.1k, False: 332]
  ------------------
  638|       |		/* Next attribute */
  639|  26.1k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  640|  26.1k|	}
  641|       |
  642|  26.5k|	return (ret);
  643|  27.1k|}
ikev2_validate_ke:
  648|    913|{
  649|    913|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  650|       |
  651|    913|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (651:6): [True: 542, False: 371]
  ------------------
  652|    542|		log_debug("%s: malformed payload: too short for header "
  653|    542|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  654|    542|		return (-1);
  655|    542|	}
  656|    371|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  657|       |
  658|    371|	return (0);
  659|    913|}
ikev2_pld_ke:
  664|    913|{
  665|    913|	struct ikev2_keyexchange	 kex;
  666|    913|	uint8_t				*buf;
  667|    913|	size_t				 len;
  668|    913|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  669|       |
  670|    913|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (670:6): [True: 542, False: 371]
  ------------------
  671|    542|		return (-1);
  672|       |
  673|    371|	log_debug("%s: dh group %s reserved %d", __func__,
  674|    371|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  675|    371|	    betoh16(kex.kex_reserved));
  676|       |
  677|    371|	buf = msgbuf + offset + sizeof(kex);
  678|    371|	len = left - sizeof(kex);
  679|       |
  680|    371|	if (len == 0) {
  ------------------
  |  Branch (680:6): [True: 86, False: 285]
  ------------------
  681|     86|		log_debug("%s: malformed payload: no KE data given", __func__);
  682|     86|		return (-1);
  683|     86|	}
  684|       |
  685|    285|	print_hex(buf, 0, len);
  686|       |
  687|    285|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (687:6): [True: 0, False: 285]
  ------------------
  688|      0|		if (ibuf_length(msg->msg_parent->msg_ke)) {
  ------------------
  |  Branch (688:7): [True: 0, False: 0]
  ------------------
  689|      0|			log_info("%s: duplicate KE payload", __func__);
  690|      0|			return (-1);
  691|      0|		}
  692|      0|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (692:7): [True: 0, False: 0]
  ------------------
  693|      0|			log_debug("%s: failed to get exchange", __func__);
  694|      0|			return (-1);
  695|      0|		}
  696|      0|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  697|      0|	}
  698|       |
  699|    285|	return (0);
  700|    285|}
ikev2_validate_id:
  705|  1.76k|{
  706|  1.76k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  707|       |
  708|  1.76k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (708:6): [True: 880, False: 880]
  ------------------
  709|    880|		log_debug("%s: malformed payload: too short for header "
  710|    880|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  711|    880|		return (-1);
  712|    880|	}
  713|    880|	memcpy(id, msgbuf + offset, sizeof(*id));
  714|       |
  715|    880|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|    880|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (715:6): [True: 256, False: 624]
  ------------------
  716|    256|		log_debug("%s: malformed payload: invalid ID type.",
  717|    256|		    __func__);
  718|    256|		return (-1);
  719|    256|	}
  720|       |
  721|    624|	return (0);
  722|    880|}
ikev2_pld_id:
  727|  1.76k|{
  728|  1.76k|	uint8_t				*ptr;
  729|  1.76k|	struct ikev2_id			 id;
  730|  1.76k|	size_t				 len;
  731|  1.76k|	struct iked_id			*idp, idb;
  732|  1.76k|	const struct iked_sa		*sa = msg->msg_sa;
  733|  1.76k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  734|  1.76k|	char				 idstr[IKED_ID_SIZE];
  735|       |
  736|  1.76k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (736:6): [True: 1.13k, False: 624]
  ------------------
  737|  1.13k|		return (-1);
  738|       |
  739|    624|	bzero(&idb, sizeof(idb));
  740|       |
  741|       |	/* Don't strip the Id payload header */
  742|    624|	ptr = msgbuf + offset;
  743|    624|	len = left;
  744|       |
  745|    624|	idb.id_type = id.id_type;
  746|    624|	idb.id_offset = sizeof(id);
  747|    624|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (747:6): [True: 0, False: 624]
  ------------------
  748|      0|		return (-1);
  749|       |
  750|    624|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (750:6): [True: 0, False: 624]
  ------------------
  751|      0|		ibuf_release(idb.id_buf);
  752|      0|		log_debug("%s: malformed id", __func__);
  753|      0|		return (-1);
  754|      0|	}
  755|       |
  756|    624|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  757|       |
  758|    624|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (758:6): [True: 624, False: 0]
  ------------------
  759|    624|		ibuf_release(idb.id_buf);
  760|    624|		return (0);
  761|    624|	}
  762|       |
  763|      0|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (763:8): [True: 0, False: 0]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|      0|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|      0|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (764:7): [True: 0, False: 0]
  |  Branch (764:35): [True: 0, False: 0]
  ------------------
  765|      0|		idp = &msg->msg_parent->msg_peerid;
  766|      0|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (766:11): [True: 0, False: 0]
  |  Branch (766:39): [True: 0, False: 0]
  ------------------
  767|      0|		idp = &msg->msg_parent->msg_localid;
  768|      0|	else {
  769|      0|		ibuf_release(idb.id_buf);
  770|      0|		log_debug("%s: unexpected id payload", __func__);
  771|      0|		return (0);
  772|      0|	}
  773|       |
  774|      0|	if (idp->id_type) {
  ------------------
  |  Branch (774:6): [True: 0, False: 0]
  ------------------
  775|      0|		ibuf_release(idb.id_buf);
  776|      0|		log_debug("%s: duplicate id payload", __func__);
  777|      0|		return (-1);
  778|      0|	}
  779|       |
  780|      0|	idp->id_buf = idb.id_buf;
  781|      0|	idp->id_offset = idb.id_offset;
  782|      0|	idp->id_type = idb.id_type;
  783|       |
  784|      0|	return (0);
  785|      0|}
ikev2_validate_cert:
  790|    308|{
  791|    308|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  792|       |
  793|    308|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (793:6): [True: 77, False: 231]
  ------------------
  794|     77|		log_debug("%s: malformed payload: too short for header "
  795|     77|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  796|     77|		return (-1);
  797|     77|	}
  798|    231|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  799|       |
  800|    231|	return (0);
  801|    308|}
ikev2_pld_cert:
  806|    308|{
  807|    308|	struct ikev2_cert		 cert;
  808|    308|	uint8_t				*buf;
  809|    308|	size_t				 len;
  810|    308|	struct iked_id			*certid;
  811|    308|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  812|    308|	const struct iked_sa		*sa = msg->msg_sa;
  813|       |
  814|    308|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (814:6): [True: 77, False: 231]
  ------------------
  815|     77|		return (-1);
  816|    231|	offset += sizeof(cert);
  817|       |
  818|    231|	buf = msgbuf + offset;
  819|    231|	len = left - sizeof(cert);
  820|       |
  821|    231|	log_debug("%s: type %s length %zu",
  822|    231|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  823|       |
  824|    231|	print_hex(buf, 0, len);
  825|       |
  826|    231|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (826:6): [True: 231, False: 0]
  ------------------
  827|    231|		return (0);
  828|       |
  829|      0|	certid = &msg->msg_parent->msg_cert;
  830|      0|	if (certid->id_type) {
  ------------------
  |  Branch (830:6): [True: 0, False: 0]
  ------------------
  831|      0|		log_debug("%s: multiple cert payloads, ignoring",
  832|      0|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1091|      0|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1090|      0|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  833|      0|		return (0);
  834|      0|	}
  835|       |
  836|      0|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (836:6): [True: 0, False: 0]
  ------------------
  837|      0|		log_debug("%s: failed to save cert", __func__);
  838|      0|		return (-1);
  839|      0|	}
  840|      0|	certid->id_type = cert.cert_type;
  841|      0|	certid->id_offset = 0;
  842|       |
  843|      0|	return (0);
  844|      0|}
ikev2_validate_certreq:
  849|  3.15k|{
  850|  3.15k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  851|       |
  852|  3.15k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (852:6): [True: 915, False: 2.23k]
  ------------------
  853|    915|		log_debug("%s: malformed payload: too short for header "
  854|    915|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  855|    915|		return (-1);
  856|    915|	}
  857|  2.23k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  858|       |
  859|  2.23k|	return (0);
  860|  3.15k|}
ikev2_pld_certreq:
  865|  3.15k|{
  866|  3.15k|	struct ikev2_cert		 cert;
  867|  3.15k|	struct iked_certreq		*cr;
  868|  3.15k|	uint8_t				*buf;
  869|  3.15k|	ssize_t				 len;
  870|  3.15k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  871|       |
  872|  3.15k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (872:6): [True: 915, False: 2.23k]
  ------------------
  873|    915|		return (-1);
  874|  2.23k|	offset += sizeof(cert);
  875|       |
  876|  2.23k|	buf = msgbuf + offset;
  877|  2.23k|	len = left - sizeof(cert);
  878|       |
  879|  2.23k|	log_debug("%s: type %s length %zd",
  880|  2.23k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  881|       |
  882|  2.23k|	print_hex(buf, 0, len);
  883|       |
  884|  2.23k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (884:6): [True: 2.23k, False: 0]
  ------------------
  885|  2.23k|		return (0);
  886|       |
  887|      0|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|      0|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (887:6): [True: 0, False: 0]
  ------------------
  888|      0|		if (len == 0) {
  ------------------
  |  Branch (888:7): [True: 0, False: 0]
  ------------------
  889|      0|			log_info("%s: invalid length 0", __func__);
  890|      0|			return (0);
  891|      0|		}
  892|      0|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (892:7): [True: 0, False: 0]
  ------------------
  893|      0|			log_info("%s: invalid certificate request",
  894|      0|			    __func__);
  895|      0|			return (-1);
  896|      0|		}
  897|      0|	}
  898|       |
  899|      0|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (899:6): [True: 0, False: 0]
  ------------------
  900|      0|		log_info("%s: failed to allocate certreq.", __func__);
  901|      0|		return (-1);
  902|      0|	}
  903|      0|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (903:6): [True: 0, False: 0]
  ------------------
  904|      0|		log_info("%s: failed to allocate buffer.", __func__);
  905|      0|		free(cr);
  906|      0|		return (-1);
  907|      0|	}
  908|      0|	cr->cr_type = cert.cert_type;
  909|      0|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|      0|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|      0|	(elm)->field.sqe_next = NULL;					\
  |  |  298|      0|	*(head)->sqh_last = (elm);					\
  |  |  299|      0|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  910|       |
  911|      0|	return (0);
  912|      0|}
ikev2_validate_auth:
  917|  1.67k|{
  918|  1.67k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  919|       |
  920|  1.67k|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (920:6): [True: 466, False: 1.21k]
  ------------------
  921|    466|		log_debug("%s: malformed payload: too short for header "
  922|    466|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  923|    466|		return (-1);
  924|    466|	}
  925|  1.21k|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  926|       |
  927|  1.21k|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (927:6): [True: 672, False: 541]
  ------------------
  928|    672|		log_info("%s: malformed payload: invalid auth method",
  929|    672|		    __func__);
  930|    672|		return (-1);
  931|    672|	}
  932|       |
  933|    541|	return (0);
  934|  1.21k|}
ikev2_pld_auth:
  939|  1.67k|{
  940|  1.67k|	struct ikev2_auth		 auth;
  941|  1.67k|	struct iked_id			*idp;
  942|  1.67k|	uint8_t				*buf;
  943|  1.67k|	size_t				 len;
  944|  1.67k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  945|       |
  946|  1.67k|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (946:6): [True: 1.13k, False: 541]
  ------------------
  947|  1.13k|		return (-1);
  948|    541|	offset += sizeof(auth);
  949|       |
  950|    541|	buf = msgbuf + offset;
  951|    541|	len = left - sizeof(auth);
  952|       |
  953|    541|	log_debug("%s: method %s length %zu",
  954|    541|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  955|       |
  956|    541|	print_hex(buf, 0, len);
  957|       |
  958|    541|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (958:6): [True: 541, False: 0]
  ------------------
  959|    541|		return (0);
  960|       |
  961|      0|	idp = &msg->msg_parent->msg_auth;
  962|      0|	if (idp->id_type) {
  ------------------
  |  Branch (962:6): [True: 0, False: 0]
  ------------------
  963|      0|		log_debug("%s: duplicate auth payload", __func__);
  964|      0|		return (-1);
  965|      0|	}
  966|       |
  967|      0|	ibuf_release(idp->id_buf);
  968|      0|	idp->id_type = auth.auth_method;
  969|      0|	idp->id_offset = 0;
  970|      0|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (970:6): [True: 0, False: 0]
  ------------------
  971|      0|		return (-1);
  972|       |
  973|      0|	return (0);
  974|      0|}
ikev2_pld_nonce:
  979|    110|{
  980|    110|	size_t		 len;
  981|    110|	uint8_t		*buf;
  982|    110|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  983|       |
  984|    110|	buf = msgbuf + offset;
  985|    110|	len = left;
  986|       |
  987|    110|	if (len == 0) {
  ------------------
  |  Branch (987:6): [True: 66, False: 44]
  ------------------
  988|     66|		log_debug("%s: malformed payload: no NONCE given", __func__);
  989|     66|		return (-1);
  990|     66|	}
  991|       |
  992|     44|	print_hex(buf, 0, len);
  993|       |
  994|     44|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (994:6): [True: 0, False: 44]
  ------------------
  995|      0|		if (ibuf_length(msg->msg_parent->msg_nonce)) {
  ------------------
  |  Branch (995:7): [True: 0, False: 0]
  ------------------
  996|      0|			log_info("%s: duplicate NONCE payload", __func__);
  997|      0|			return (-1);
  998|      0|		}
  999|      0|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (999:7): [True: 0, False: 0]
  ------------------
 1000|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1001|      0|			return (-1);
 1002|      0|		}
 1003|      0|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1004|      0|	}
 1005|       |
 1006|     44|	return (0);
 1007|     44|}
ikev2_validate_notify:
 1012|  1.83k|{
 1013|  1.83k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1014|       |
 1015|  1.83k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1015:6): [True: 1.08k, False: 751]
  ------------------
 1016|  1.08k|		log_debug("%s: malformed payload: too short for header "
 1017|  1.08k|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1018|  1.08k|		return (-1);
 1019|  1.08k|	}
 1020|    751|	memcpy(n, msgbuf + offset, sizeof(*n));
 1021|       |
 1022|    751|	return (0);
 1023|  1.83k|}
ikev2_pld_notify:
 1028|  1.83k|{
 1029|  1.83k|	struct ikev2_notify	 n;
 1030|  1.83k|	const struct iked_sa	*sa = msg->msg_sa;
 1031|  1.83k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1032|  1.83k|	uint32_t		 spi32;
 1033|  1.83k|	uint64_t		 spi64;
 1034|  1.83k|	struct iked_spi		*rekey;
 1035|  1.83k|	uint16_t		 type;
 1036|  1.83k|	uint16_t		 signature_hash;
 1037|       |
 1038|  1.83k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1038:6): [True: 1.08k, False: 751]
  ------------------
 1039|  1.08k|		return (-1);
 1040|    751|	type = betoh16(n.n_type);
 1041|       |
 1042|    751|	log_debug("%s: protoid %s spisize %d type %s",
 1043|    751|	    __func__,
 1044|    751|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1045|    751|	    print_map(type, ikev2_n_map));
 1046|       |
 1047|    751|	left -= sizeof(n);
 1048|    751|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1048:6): [True: 0, False: 751]
  ------------------
 1049|      0|		return (-1);
 1050|       |
 1051|    751|	print_hex(buf, 0, left);
 1052|       |
 1053|    751|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1053:6): [True: 751, False: 0]
  ------------------
 1054|    751|		return (0);
 1055|       |
 1056|      0|	switch (type) {
  ------------------
  |  Branch (1056:10): [True: 0, False: 0]
  ------------------
 1057|      0|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|      0|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1057:2): [True: 0, False: 0]
  ------------------
 1058|      0|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|      0|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1058:2): [True: 0, False: 0]
  ------------------
 1059|      0|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1059:7): [True: 0, False: 0]
  ------------------
 1060|      0|			log_debug("%s: malformed payload: hash size mismatch"
 1061|      0|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1062|      0|			return (-1);
 1063|      0|		}
 1064|      0|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1064:7): [True: 0, False: 0]
  ------------------
 1065|      0|		    ikev2_msg_frompeer(msg)) == -1)
 1066|      0|			return (-1);
 1067|      0|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1067:7): [True: 0, False: 0]
  ------------------
 1068|      0|			log_debug("%s: %s detected NAT", __func__,
 1069|      0|			    print_map(type, ikev2_n_map));
 1070|      0|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|      0|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1070:8): [True: 0, False: 0]
  ------------------
 1071|      0|				msg->msg_parent->msg_nat_detected
 1072|      0|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  685|      0|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1073|      0|			else
 1074|      0|				msg->msg_parent->msg_nat_detected
 1075|      0|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  686|      0|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1076|      0|		}
 1077|      0|		print_hex(md, 0, sizeof(md));
 1078|       |		/* remember for MOBIKE */
 1079|      0|		msg->msg_parent->msg_natt_rcvd = 1;
 1080|      0|		break;
 1081|      0|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      0|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1081:2): [True: 0, False: 0]
  ------------------
 1082|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1082:7): [True: 0, False: 0]
  ------------------
 1083|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1084|      0|			    __func__);
 1085|      0|			return (-1);
 1086|      0|		}
 1087|       |		/*
 1088|       |		 * If we are the responder, then we only accept
 1089|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1090|       |		 * If we are the initiator, the peer cannot be authenticated.
 1091|       |		 */
 1092|      0|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1092:7): [True: 0, False: 0]
  ------------------
 1093|      0|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1093:8): [True: 0, False: 0]
  ------------------
 1094|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1095|      0|				    " from unauthenticated initiator",
 1096|      0|				    __func__);
 1097|      0|				return (-1);
 1098|      0|			}
 1099|      0|		} else {
 1100|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1100:8): [True: 0, False: 0]
  ------------------
 1101|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1102|      0|				    " from authenticated responder",
 1103|      0|				    __func__);
 1104|      0|				return (-1);
 1105|      0|			}
 1106|      0|		}
 1107|      0|		msg->msg_parent->msg_flags
 1108|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  693|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1109|      0|		break;
 1110|      0|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|      0|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1110:2): [True: 0, False: 0]
  ------------------
 1111|      0|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1111:7): [True: 0, False: 0]
  ------------------
 1112|      0|		    !msg->msg_e) {
  ------------------
  |  Branch (1112:7): [True: 0, False: 0]
  ------------------
 1113|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1114|      0|			    __func__);
 1115|      0|			return (-1);
 1116|      0|		}
 1117|      0|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1117:7): [True: 0, False: 0]
  ------------------
 1118|      0|			log_debug("%s: malformed payload: group size mismatch"
 1119|      0|			    " (%zu != %zu)", __func__, left,
 1120|      0|			    sizeof(msg->msg_parent->msg_group));
 1121|      0|			return (-1);
 1122|      0|		}
 1123|      0|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1124|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  694|      0|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1125|      0|		break;
 1126|      0|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|      0|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1126:2): [True: 0, False: 0]
  ------------------
 1127|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1127:7): [True: 0, False: 0]
  ------------------
 1128|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1129|      0|			    __func__);
 1130|      0|			return (-1);
 1131|      0|		}
 1132|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  692|      0|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1133|      0|		break;
 1134|      0|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|      0|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1134:2): [True: 0, False: 0]
  ------------------
 1135|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1135:7): [True: 0, False: 0]
  ------------------
 1136|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1137|      0|			return (-1);
 1138|      0|		}
 1139|      0|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1139:7): [True: 0, False: 0]
  ------------------
 1140|      0|			log_debug("%s: malformed notification", __func__);
 1141|      0|			return (-1);
 1142|      0|		}
 1143|      0|		rekey = &msg->msg_parent->msg_rekey;
 1144|      0|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1144:7): [True: 0, False: 0]
  ------------------
 1145|      0|			log_debug("%s: rekeying of multiple SAs not supported",
 1146|      0|			    __func__);
 1147|      0|			return (-1);
 1148|      0|		}
 1149|      0|		switch (n.n_spisize) {
 1150|      0|		case 4:
  ------------------
  |  Branch (1150:3): [True: 0, False: 0]
  ------------------
 1151|      0|			memcpy(&spi32, buf, left);
 1152|      0|			rekey->spi = betoh32(spi32);
 1153|      0|			break;
 1154|      0|		case 8:
  ------------------
  |  Branch (1154:3): [True: 0, False: 0]
  ------------------
 1155|      0|			memcpy(&spi64, buf, left);
 1156|      0|			rekey->spi = betoh64(spi64);
 1157|      0|			break;
 1158|      0|		default:
  ------------------
  |  Branch (1158:3): [True: 0, False: 0]
  ------------------
 1159|      0|			log_debug("%s: invalid spi size %d", __func__,
 1160|      0|			    n.n_spisize);
 1161|      0|			return (-1);
 1162|      0|		}
 1163|      0|		rekey->spi_size = n.n_spisize;
 1164|      0|		rekey->spi_protoid = n.n_protoid;
 1165|       |
 1166|      0|		log_debug("%s: rekey %s spi %s", __func__,
 1167|      0|		    print_map(n.n_protoid, ikev2_saproto_map),
 1168|      0|		    print_spi(rekey->spi, n.n_spisize));
 1169|      0|		break;
 1170|      0|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|      0|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1170:2): [True: 0, False: 0]
  ------------------
 1171|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1171:7): [True: 0, False: 0]
  ------------------
 1172|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1173|      0|			    __func__);
 1174|      0|			return (-1);
 1175|      0|		}
 1176|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  697|      0|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1177|      0|		break;
 1178|      0|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|      0|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1178:2): [True: 0, False: 0]
  ------------------
 1179|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1179:7): [True: 0, False: 0]
  ------------------
 1180|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1181|      0|			    __func__);
 1182|      0|			return (-1);
 1183|      0|		}
 1184|      0|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1184:7): [True: 0, False: 0]
  ------------------
 1185|      0|		    sizeof(msg->msg_parent->msg_transform)) {
 1186|      0|			log_debug("%s: ignoring malformed ipcomp notification",
 1187|      0|			    __func__);
 1188|      0|			return (0);
 1189|      0|		}
 1190|      0|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1191|      0|		    sizeof(msg->msg_parent->msg_cpi));
 1192|      0|		memcpy(&msg->msg_parent->msg_transform,
 1193|      0|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1194|      0|		    sizeof(msg->msg_parent->msg_transform));
 1195|       |
 1196|      0|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1197|      0|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1197:7): [True: 0, False: 0]
  ------------------
 1198|      0|		    betoh16(msg->msg_parent->msg_cpi),
 1199|      0|		    print_map(msg->msg_parent->msg_transform,
 1200|      0|		    ikev2_ipcomp_map), left);
 1201|       |
 1202|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  695|      0|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1203|      0|		break;
 1204|      0|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|      0|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1204:2): [True: 0, False: 0]
  ------------------
 1205|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1205:7): [True: 0, False: 0]
  ------------------
 1206|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1207|      0|			    __func__);
 1208|      0|			return (-1);
 1209|      0|		}
 1210|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  691|      0|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1211|      0|		break;
 1212|      0|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|      0|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1212:2): [True: 0, False: 0]
  ------------------
 1213|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  698|      0|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1214|      0|		break;
 1215|      0|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|      0|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1215:2): [True: 0, False: 0]
  ------------------
 1216|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1216:7): [True: 0, False: 0]
  ------------------
 1217|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1218|      0|			    __func__);
 1219|      0|			return (-1);
 1220|      0|		}
 1221|      0|		if (left != 0) {
  ------------------
  |  Branch (1221:7): [True: 0, False: 0]
  ------------------
 1222|      0|			log_debug("%s: ignoring malformed mobike"
 1223|      0|			    " notification: %zu", __func__, left);
 1224|      0|			return (0);
 1225|      0|		}
 1226|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  689|      0|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1227|      0|		break;
 1228|      0|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|      0|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1228:2): [True: 0, False: 0]
  ------------------
 1229|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1229:7): [True: 0, False: 0]
  ------------------
 1230|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1231|      0|			    __func__);
 1232|      0|			return (-1);
 1233|      0|		}
 1234|      0|		if (left != 0) {
  ------------------
  |  Branch (1234:7): [True: 0, False: 0]
  ------------------
 1235|      0|			log_debug("%s: ignoring malformed transport mode"
 1236|      0|			    " notification: %zu", __func__, left);
 1237|      0|			return (0);
 1238|      0|		}
 1239|      0|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1239:7): [True: 0, False: 0]
  ------------------
 1240|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1240:8): [True: 0, False: 0]
  ------------------
 1241|      0|				log_debug("%s: ignoring transport mode"
 1242|      0|				    " notification (policy)", __func__);
 1243|      0|				return (0);
 1244|      0|			}
 1245|      0|		}
 1246|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  696|      0|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1247|      0|		break;
 1248|      0|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|      0|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1248:2): [True: 0, False: 0]
  ------------------
 1249|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1249:7): [True: 0, False: 0]
  ------------------
 1250|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1251|      0|			    __func__);
 1252|      0|			return (-1);
 1253|      0|		}
 1254|      0|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1254:7): [True: 0, False: 0]
  ------------------
 1255|      0|			log_debug("%s: ignoring update sa addresses"
 1256|      0|			    " notification w/o mobike: %zu", __func__, left);
 1257|      0|			return (0);
 1258|      0|		}
 1259|      0|		if (left != 0) {
  ------------------
  |  Branch (1259:7): [True: 0, False: 0]
  ------------------
 1260|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1261|      0|			    " notification: %zu", __func__, left);
 1262|      0|			return (0);
 1263|      0|		}
 1264|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1265|      0|		break;
 1266|      0|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|      0|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1266:2): [True: 0, False: 0]
  ------------------
 1267|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1267:7): [True: 0, False: 0]
  ------------------
 1268|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1269|      0|			    __func__);
 1270|      0|			return (-1);
 1271|      0|		}
 1272|      0|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1272:7): [True: 0, False: 0]
  ------------------
 1273|      0|			log_debug("%s: ignoring cookie2 notification"
 1274|      0|			    " w/o mobike: %zu", __func__, left);
 1275|      0|			return (0);
 1276|      0|		}
 1277|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1277:7): [True: 0, False: 0]
  |  Branch (1277:34): [True: 0, False: 0]
  ------------------
 1278|      0|			log_debug("%s: ignoring malformed cookie2"
 1279|      0|			    " notification: %zu", __func__, left);
 1280|      0|			return (0);
 1281|      0|		}
 1282|      0|		ibuf_release(msg->msg_cookie2);	/* should not happen */
 1283|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1283:7): [True: 0, False: 0]
  ------------------
 1284|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1285|      0|			return (-1);
 1286|      0|		}
 1287|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1288|      0|		break;
 1289|      0|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      0|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1289:2): [True: 0, False: 0]
  ------------------
 1290|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1290:7): [True: 0, False: 0]
  ------------------
 1291|      0|			log_debug("%s: N_COOKIE encrypted",
 1292|      0|			    __func__);
 1293|      0|			return (-1);
 1294|      0|		}
 1295|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1295:7): [True: 0, False: 0]
  |  Branch (1295:33): [True: 0, False: 0]
  ------------------
 1296|      0|			log_debug("%s: ignoring malformed cookie"
 1297|      0|			    " notification: %zu", __func__, left);
 1298|      0|			return (0);
 1299|      0|		}
 1300|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1301|      0|		print_hex(buf, 0, left);
 1302|       |
 1303|      0|		ibuf_release(msg->msg_cookie);
 1304|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1304:7): [True: 0, False: 0]
  ------------------
 1305|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1306|      0|			return (-1);
 1307|      0|		}
 1308|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1309|      0|		break;
 1310|      0|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|      0|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1310:2): [True: 0, False: 0]
  ------------------
 1311|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1311:7): [True: 0, False: 0]
  ------------------
 1312|      0|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1313|      0|			    __func__);
 1314|      0|			return (-1);
 1315|      0|		}
 1316|      0|		if (left != 0) {
  ------------------
  |  Branch (1316:7): [True: 0, False: 0]
  ------------------
 1317|      0|			log_debug("%s: ignoring malformed fragmentation"
 1318|      0|			    " notification: %zu", __func__, left);
 1319|      0|			return (0);
 1320|      0|		}
 1321|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  688|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1322|      0|		break;
 1323|      0|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      0|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1323:2): [True: 0, False: 0]
  ------------------
 1324|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1324:7): [True: 0, False: 0]
  ------------------
 1325|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1326|      0|			    __func__);
 1327|      0|			return (-1);
 1328|      0|		}
 1329|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1329:7): [True: 0, False: 0]
  ------------------
 1330|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1331|      0|			    __func__);
 1332|      0|			return (-1);
 1333|      0|		}
 1334|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1334:7): [True: 0, False: 0]
  ------------------
 1335|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1336|      0|			    "duplicate notify", __func__);
 1337|      0|			return (0);
 1338|      0|		}
 1339|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1339:7): [True: 0, False: 0]
  ------------------
 1340|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1340:7): [True: 0, False: 0]
  ------------------
 1341|      0|			log_debug("%s: malformed signature hash notification"
 1342|      0|			    "(%zu bytes)", __func__, left);
 1343|      0|			return (0);
 1344|      0|		}
 1345|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1345:10): [True: 0, False: 0]
  ------------------
 1346|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1347|      0|			signature_hash = betoh16(signature_hash);
 1348|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1349|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1350|      0|			    signature_hash);
 1351|      0|			left -= sizeof(signature_hash);
 1352|      0|			buf += sizeof(signature_hash);
 1353|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  498|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1353:8): [True: 0, False: 0]
  ------------------
 1354|      0|				msg->msg_parent->msg_flags
 1355|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  690|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1356|      0|		}
 1357|      0|		break;
 1358|      0|	}
 1359|       |
 1360|      0|	return (0);
 1361|      0|}
ikev2_validate_delete:
 1366|  1.03k|{
 1367|  1.03k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1368|       |
 1369|  1.03k|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1369:6): [True: 206, False: 824]
  ------------------
 1370|    206|		log_debug("%s: malformed payload: too short for header "
 1371|    206|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1372|    206|		return (-1);
 1373|    206|	}
 1374|    824|	memcpy(del, msgbuf + offset, sizeof(*del));
 1375|       |
 1376|    824|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1376:6): [True: 22, False: 802]
  ------------------
 1377|     22|		log_info("%s: malformed payload: invalid protoid", __func__);
 1378|     22|		return (-1);
 1379|     22|	}
 1380|       |
 1381|    802|	return (0);
 1382|    824|}
ikev2_pld_delete:
 1387|  1.03k|{
 1388|  1.03k|	struct ikev2_delete	 del;
 1389|  1.03k|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1390|  1.03k|	size_t			 cnt, sz, len;
 1391|       |
 1392|  1.03k|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1392:6): [True: 228, False: 802]
  ------------------
 1393|    228|		return (-1);
 1394|       |
 1395|       |	/* Skip if it's a response, then we don't have to deal with it */
 1396|    802|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1396:6): [True: 0, False: 802]
  ------------------
 1397|    802|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1397:6): [True: 0, False: 0]
  ------------------
 1398|      0|		return (0);
 1399|       |
 1400|    802|	cnt = betoh16(del.del_nspi);
 1401|    802|	sz = del.del_spisize;
 1402|       |
 1403|    802|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1404|    802|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1405|    802|	    sz, cnt);
 1406|       |
 1407|    802|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1407:6): [True: 763, False: 39]
  ------------------
 1408|    763|		log_debug("%s: duplicate delete payload", __func__);
 1409|    763|		return (0);
 1410|    763|	}
 1411|       |
 1412|     39|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1413|     39|	msg->msg_parent->msg_del_cnt = cnt;
 1414|     39|	msg->msg_parent->msg_del_spisize = sz;
 1415|       |
 1416|     39|	buf = msgbuf + offset + sizeof(del);
 1417|     39|	len = left - sizeof(del);
 1418|     39|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1418:6): [True: 2, False: 37]
  |  Branch (1418:18): [True: 29, False: 8]
  |  Branch (1418:29): [True: 2, False: 6]
  ------------------
 1419|     33|		return (0);
 1420|       |
 1421|      6|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1421:6): [True: 5, False: 1]
  ------------------
 1422|      5|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1423|      5|		    __func__, len, sz, cnt);
 1424|      5|		return (-1);
 1425|      5|	}
 1426|       |
 1427|      1|	print_hex(buf, 0, len);
 1428|       |
 1429|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1430|       |
 1431|      1|	return (0);
 1432|      6|}
ikev2_validate_tss:
 1437|  1.13k|{
 1438|  1.13k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1439|       |
 1440|  1.13k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1440:6): [True: 173, False: 966]
  ------------------
 1441|    173|		log_debug("%s: malformed payload: too short for header "
 1442|    173|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1443|    173|		return (-1);
 1444|    173|	}
 1445|    966|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1446|       |
 1447|    966|	return (0);
 1448|  1.13k|}
ikev2_pld_tss:
 1453|  1.13k|{
 1454|  1.13k|	struct ikev2_tsp		 tsp;
 1455|  1.13k|	struct ikev2_ts			 ts;
 1456|  1.13k|	size_t				 ts_len, i;
 1457|       |
 1458|  1.13k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1458:6): [True: 173, False: 966]
  ------------------
 1459|    173|		return (-1);
 1460|       |
 1461|    966|	offset += sizeof(tsp);
 1462|    966|	left -= sizeof(tsp);
 1463|       |
 1464|    966|	log_debug("%s: count %d length %zu", __func__,
 1465|    966|	    tsp.tsp_count, left);
 1466|       |
 1467|  1.57k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1467:14): [True: 1.53k, False: 38]
  ------------------
 1468|  1.53k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1468:7): [True: 820, False: 713]
  ------------------
 1469|    820|			return (-1);
 1470|       |
 1471|    713|		log_debug("%s: type %s protoid %u length %d "
 1472|    713|		    "startport %u endport %u", __func__,
 1473|    713|		    print_map(ts.ts_type, ikev2_ts_map),
 1474|    713|		    ts.ts_protoid, betoh16(ts.ts_length),
 1475|    713|		    betoh16(ts.ts_startport),
 1476|    713|		    betoh16(ts.ts_endport));
 1477|       |
 1478|    713|		offset += sizeof(ts);
 1479|    713|		left -= sizeof(ts);
 1480|       |
 1481|    713|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1482|    713|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1482:7): [True: 108, False: 605]
  ------------------
 1483|    108|			return (-1);
 1484|       |
 1485|    605|		offset += ts_len;
 1486|    605|		left -= ts_len;
 1487|    605|	}
 1488|       |
 1489|     38|	return (0);
 1490|    966|}
ikev2_validate_ts:
 1495|  1.53k|{
 1496|  1.53k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1497|  1.53k|	size_t		 ts_length;
 1498|       |
 1499|  1.53k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1499:6): [True: 731, False: 802]
  ------------------
 1500|    731|		log_debug("%s: malformed payload: too short for header "
 1501|    731|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1502|    731|		return (-1);
 1503|    731|	}
 1504|    802|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1505|       |
 1506|    802|	ts_length = betoh16(ts->ts_length);
 1507|    802|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1507:6): [True: 40, False: 762]
  ------------------
 1508|     40|		log_debug("%s: malformed payload: shorter than minimum header "
 1509|     40|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1510|     40|		return (-1);
 1511|     40|	}
 1512|    762|	if (left < ts_length) {
  ------------------
  |  Branch (1512:6): [True: 49, False: 713]
  ------------------
 1513|     49|		log_debug("%s: malformed payload: too long for payload size "
 1514|     49|		    "(%zu < %zu)", __func__, left, ts_length);
 1515|     49|		return (-1);
 1516|     49|	}
 1517|       |
 1518|    713|	return (0);
 1519|    762|}
ikev2_pld_ts:
 1524|    713|{
 1525|    713|	struct sockaddr_in		 s4;
 1526|    713|	struct sockaddr_in6		 s6;
 1527|    713|	uint8_t				 buf[2][128];
 1528|    713|	uint8_t				*ptr;
 1529|       |
 1530|    713|	ptr = ibuf_data(msg->msg_data) + offset;
 1531|       |
 1532|    713|	switch (type) {
 1533|     94|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  459|     94|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1533:2): [True: 94, False: 619]
  ------------------
 1534|     94|		if (left < 2 * 4) {
  ------------------
  |  Branch (1534:7): [True: 18, False: 76]
  ------------------
 1535|     18|			log_debug("%s: malformed payload: too short "
 1536|     18|			    "for ipv4 addr range (%zu < %u)",
 1537|     18|			    __func__, left, 2 * 4);
 1538|     18|			return (-1);
 1539|     18|		}
 1540|       |
 1541|     76|		bzero(&s4, sizeof(s4));
 1542|     76|		s4.sin_family = AF_INET;
 1543|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1544|       |		s4.sin_len = sizeof(s4);
 1545|       |#endif
 1546|     76|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1547|     76|		ptr += 4;
 1548|     76|		left -= 4;
 1549|     76|		print_host((struct sockaddr *)&s4,
 1550|     76|		    (char *)buf[0], sizeof(buf[0]));
 1551|       |
 1552|     76|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1553|     76|		left -= 4;
 1554|     76|		print_host((struct sockaddr *)&s4,
 1555|     76|		    (char *)buf[1], sizeof(buf[1]));
 1556|       |
 1557|     76|		log_debug("%s: start %s end %s", __func__,
 1558|     76|		    buf[0], buf[1]);
 1559|     76|		break;
 1560|     80|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  460|     80|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1560:2): [True: 80, False: 633]
  ------------------
 1561|     80|		if (left < 2 * 16) {
  ------------------
  |  Branch (1561:7): [True: 28, False: 52]
  ------------------
 1562|     28|			log_debug("%s: malformed payload: too short "
 1563|     28|			    "for ipv6 addr range (%zu < %u)",
 1564|     28|			    __func__, left, 2 * 16);
 1565|     28|			return (-1);
 1566|     28|		}
 1567|     52|		bzero(&s6, sizeof(s6));
 1568|     52|		s6.sin6_family = AF_INET6;
 1569|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1570|       |		s6.sin6_len = sizeof(s6);
 1571|       |#endif
 1572|     52|		memcpy(&s6.sin6_addr, ptr, 16);
 1573|     52|		ptr += 16;
 1574|     52|		left -= 16;
 1575|     52|		print_host((struct sockaddr *)&s6,
 1576|     52|		    (char *)buf[0], sizeof(buf[0]));
 1577|       |
 1578|     52|		memcpy(&s6.sin6_addr, ptr, 16);
 1579|     52|		left -= 16;
 1580|     52|		print_host((struct sockaddr *)&s6,
 1581|     52|		    (char *)buf[1], sizeof(buf[1]));
 1582|     52|		log_debug("%s: start %s end %s", __func__,
 1583|     52|		    buf[0], buf[1]);
 1584|     52|		break;
 1585|    539|	default:
  ------------------
  |  Branch (1585:2): [True: 539, False: 174]
  ------------------
 1586|    539|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1587|    539|		return (0);
 1588|    713|	}
 1589|       |
 1590|    128|	if (left > 0) {
  ------------------
  |  Branch (1590:6): [True: 62, False: 66]
  ------------------
 1591|     62|		log_debug("%s: malformed payload: left (%zu) > 0",
 1592|     62|		    __func__, left);
 1593|     62|		return (-1);
 1594|     62|	}
 1595|       |
 1596|     66|	return (0);
 1597|    128|}
ikev2_validate_cp:
 1852|  2.02k|{
 1853|  2.02k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1854|       |
 1855|  2.02k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1855:6): [True: 629, False: 1.39k]
  ------------------
 1856|    629|		log_debug("%s: malformed payload: too short for header "
 1857|    629|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1858|    629|		return (-1);
 1859|    629|	}
 1860|  1.39k|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1861|       |
 1862|  1.39k|	return (0);
 1863|  2.02k|}
ikev2_pld_cp:
 1868|  2.02k|{
 1869|  2.02k|	struct ikev2_cp		 cp;
 1870|  2.02k|	struct ikev2_cfg	*cfg;
 1871|  2.02k|	struct iked_addr	*addr;
 1872|  2.02k|	struct sockaddr_in	*in4;
 1873|  2.02k|	struct sockaddr_in6	*in6;
 1874|  2.02k|	uint8_t			*ptr;
 1875|  2.02k|	size_t			 len;
 1876|  2.02k|	uint8_t			 buf[128];
 1877|  2.02k|	int			 cfg_type;
 1878|       |
 1879|  2.02k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1879:6): [True: 629, False: 1.39k]
  ------------------
 1880|    629|		return (-1);
 1881|       |
 1882|  1.39k|	ptr = ibuf_data(msg->msg_data) + offset + sizeof(cp);
 1883|  1.39k|	len = left - sizeof(cp);
 1884|       |
 1885|  1.39k|	log_debug("%s: type %s length %zu",
 1886|  1.39k|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1887|  1.39k|	print_hex(ptr, 0, len);
 1888|       |
 1889|  3.51k|	while (len > 0) {
  ------------------
  |  Branch (1889:9): [True: 2.51k, False: 1.00k]
  ------------------
 1890|  2.51k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1890:7): [True: 147, False: 2.36k]
  ------------------
 1891|    147|			log_debug("%s: malformed payload: too short for cfg "
 1892|    147|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1893|    147|			return (-1);
 1894|    147|		}
 1895|  2.36k|		cfg = (struct ikev2_cfg *)ptr;
 1896|       |
 1897|  2.36k|		log_debug("%s: %s 0x%04x length %d", __func__,
 1898|  2.36k|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1899|  2.36k|		    betoh16(cfg->cfg_type),
 1900|  2.36k|		    betoh16(cfg->cfg_length));
 1901|       |
 1902|  2.36k|		ptr += sizeof(*cfg);
 1903|  2.36k|		len -= sizeof(*cfg);
 1904|       |
 1905|  2.36k|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  Branch (1905:7): [True: 244, False: 2.12k]
  ------------------
 1906|    244|			log_debug("%s: malformed payload: too short for "
 1907|    244|			    "cfg_length (%zu < %u)", __func__, len,
 1908|    244|			    betoh16(cfg->cfg_length));
 1909|    244|			return (-1);
 1910|    244|		}
 1911|       |
 1912|  2.12k|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1913|       |
 1914|  2.12k|		cfg_type = betoh16(cfg->cfg_type);
 1915|  2.12k|		switch (cfg_type) {
  ------------------
  |  Branch (1915:11): [True: 881, False: 1.24k]
  ------------------
 1916|     69|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|     69|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1916:3): [True: 69, False: 2.05k]
  ------------------
 1917|    276|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|    276|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1917:3): [True: 207, False: 1.91k]
  ------------------
 1918|    276|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1918:8): [True: 276, False: 0]
  ------------------
 1919|    276|				break;
 1920|      0|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1920:8): [True: 0, False: 0]
  ------------------
 1921|      0|				break;
 1922|       |			/* XXX multiple-valued */
 1923|      0|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  Branch (1923:8): [True: 0, False: 0]
  ------------------
 1924|      0|				log_debug("%s: malformed payload: too short "
 1925|      0|				    "for ipv4 addr (%u < %u)",
 1926|      0|				    __func__, betoh16(cfg->cfg_length), 4);
 1927|      0|				return (-1);
 1928|      0|			}
 1929|      0|			switch(cfg_type) {
 1930|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|      0|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1930:4): [True: 0, False: 0]
  ------------------
 1931|      0|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1931:9): [True: 0, False: 0]
  ------------------
 1932|      0|					log_debug("%s: address already set", __func__);
 1933|      0|					goto skip;
 1934|      0|				}
 1935|      0|				break;
 1936|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|      0|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1936:4): [True: 0, False: 0]
  ------------------
 1937|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1937:9): [True: 0, False: 0]
  ------------------
 1938|      0|					log_debug("%s: dns already set", __func__);
 1939|      0|					goto skip;
 1940|      0|				}
 1941|      0|				break;
 1942|      0|			default:
  ------------------
  |  Branch (1942:4): [True: 0, False: 0]
  ------------------
 1943|      0|				break;
 1944|      0|			}
 1945|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1945:8): [True: 0, False: 0]
  ------------------
 1946|      0|				log_debug("%s: malloc failed", __func__);
 1947|      0|				break;
 1948|      0|			}
 1949|      0|			addr->addr_af = AF_INET;
 1950|      0|			in4 = (struct sockaddr_in *)&addr->addr;
 1951|      0|			in4->sin_family = AF_INET;
 1952|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1953|       |			in4->sin_len = sizeof(*in4);
 1954|       |#endif
 1955|      0|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1956|      0|			print_host((struct sockaddr *)in4, (char *)buf,
 1957|      0|			    sizeof(buf));
 1958|      0|			log_debug("%s: cfg %s", __func__, buf);
 1959|      0|			switch(cfg_type) {
  ------------------
  |  Branch (1959:11): [True: 0, False: 0]
  ------------------
 1960|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|      0|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1960:4): [True: 0, False: 0]
  ------------------
 1961|      0|				msg->msg_parent->msg_cp_addr = addr;
 1962|      0|				log_debug("%s: IP4_ADDRESS %s", __func__, buf);
 1963|      0|				break;
 1964|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|      0|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1964:4): [True: 0, False: 0]
  ------------------
 1965|      0|				msg->msg_parent->msg_cp_dns = addr;
 1966|      0|				log_debug("%s: IP4_DNS %s", __func__, buf);
 1967|      0|				break;
 1968|      0|			}
 1969|      0|			break;
 1970|    899|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|    899|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1970:3): [True: 899, False: 1.22k]
  ------------------
 1971|    965|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|    965|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1971:3): [True: 66, False: 2.05k]
  ------------------
 1972|    965|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1972:8): [True: 965, False: 0]
  ------------------
 1973|    965|				break;
 1974|      0|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1974:8): [True: 0, False: 0]
  ------------------
 1975|      0|				break;
 1976|       |			/* XXX multiple-valued */
 1977|      0|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  Branch (1977:8): [True: 0, False: 0]
  ------------------
 1978|      0|				log_debug("%s: malformed payload: too short "
 1979|      0|				    "for ipv6 addr w/prefixlen (%u < %u)",
 1980|      0|				    __func__, betoh16(cfg->cfg_length), 16);
 1981|      0|				return (-1);
 1982|      0|			}
 1983|      0|			switch(cfg_type) {
  ------------------
  |  Branch (1983:11): [True: 0, False: 0]
  ------------------
 1984|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|      0|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1984:4): [True: 0, False: 0]
  ------------------
 1985|      0|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (1985:9): [True: 0, False: 0]
  ------------------
 1986|      0|					log_debug("%s: address6 already set", __func__);
 1987|      0|					goto skip;
 1988|      0|				}
 1989|      0|				break;
 1990|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      0|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1990:4): [True: 0, False: 0]
  ------------------
 1991|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1991:9): [True: 0, False: 0]
  ------------------
 1992|      0|					log_debug("%s: dns already set", __func__);
 1993|      0|					goto skip;
 1994|      0|				}
 1995|      0|				break;
 1996|      0|			}
 1997|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1997:8): [True: 0, False: 0]
  ------------------
 1998|      0|				log_debug("%s: malloc failed", __func__);
 1999|      0|				break;
 2000|      0|			}
 2001|      0|			addr->addr_af = AF_INET6;
 2002|      0|			in6 = (struct sockaddr_in6 *)&addr->addr;
 2003|      0|			in6->sin6_family = AF_INET6;
 2004|       |#ifdef HAVE_SOCKADDR_SA_LEN
 2005|       |			in6->sin6_len = sizeof(*in6);
 2006|       |#endif
 2007|      0|			memcpy(&in6->sin6_addr, ptr, 16);
 2008|      0|			print_host((struct sockaddr *)in6, (char *)buf,
 2009|      0|			    sizeof(buf));
 2010|      0|			log_debug("%s: cfg %s/%d", __func__, buf, ptr[16]);
 2011|      0|			switch(cfg_type) {
  ------------------
  |  Branch (2011:11): [True: 0, False: 0]
  ------------------
 2012|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|      0|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2012:4): [True: 0, False: 0]
  ------------------
 2013|      0|				msg->msg_parent->msg_cp_addr6 = addr;
 2014|      0|				log_debug("%s: IP6_ADDRESS %s", __func__, buf);
 2015|      0|				break;
 2016|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      0|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2016:4): [True: 0, False: 0]
  ------------------
 2017|      0|				msg->msg_parent->msg_cp_dns = addr;
 2018|      0|				log_debug("%s: IP6_DNS %s", __func__, buf);
 2019|      0|				break;
 2020|      0|			}
 2021|      0|			break;
 2022|  2.12k|		}
 2023|       |
 2024|  2.12k| skip:
 2025|  2.12k|		ptr += betoh16(cfg->cfg_length);
 2026|  2.12k|		len -= betoh16(cfg->cfg_length);
 2027|  2.12k|	}
 2028|       |
 2029|  1.00k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2029:6): [True: 1.00k, False: 0]
  ------------------
 2030|  1.00k|		return (0);
 2031|       |
 2032|      0|	msg->msg_parent->msg_cp = cp.cp_type;
 2033|       |
 2034|      0|	return (0);
 2035|  1.00k|}
ikev2_validate_eap:
 2040|  4.62k|{
 2041|  4.62k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2042|       |
 2043|  4.62k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2043:6): [True: 1.92k, False: 2.69k]
  ------------------
 2044|  1.92k|		log_debug("%s: malformed payload: too short for header "
 2045|  1.92k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2046|  1.92k|		return (-1);
 2047|  1.92k|	}
 2048|  2.69k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2049|       |
 2050|  2.69k|	return (0);
 2051|  4.62k|}
ikev2_pld_eap:
 2056|  4.62k|{
 2057|  4.62k|	struct eap_header		 hdr;
 2058|  4.62k|	struct eap_message		*eap = NULL;
 2059|  4.62k|	const struct iked_sa		*sa = msg->msg_sa;
 2060|  4.62k|	size_t				 len;
 2061|       |
 2062|  4.62k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2062:6): [True: 1.92k, False: 2.69k]
  ------------------
 2063|  1.92k|		return (-1);
 2064|  2.69k|	len = betoh16(hdr.eap_length);
 2065|       |
 2066|  2.69k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2066:6): [True: 917, False: 1.77k]
  ------------------
 2067|    917|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1091|    917|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1090|    917|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2068|    917|		    print_map(hdr.eap_code, eap_code_map),
 2069|    917|		    hdr.eap_id, betoh16(hdr.eap_length));
 2070|  1.77k|	} else {
 2071|       |		/* Now try to get the indicated length */
 2072|  1.77k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2072:7): [True: 893, False: 884]
  ------------------
 2073|    893|			log_debug("%s: invalid EAP length", __func__);
 2074|    893|			return (-1);
 2075|    893|		}
 2076|       |
 2077|    884|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1091|    884|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1090|    884|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2078|    884|		    print_map(eap->eap_code, eap_code_map),
 2079|    884|		    eap->eap_id, betoh16(eap->eap_length),
 2080|    884|		    print_map(eap->eap_type, eap_type_map));
 2081|       |
 2082|    884|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2082:7): [True: 0, False: 884]
  ------------------
 2083|      0|			return (-1);
 2084|    884|		msg->msg_parent->msg_eap.eam_found = 1;
 2085|    884|	}
 2086|       |
 2087|  1.80k|	return (0);
 2088|  2.69k|}

ibuf_zero:
   47|  3.03k|{
   48|  3.03k|	explicit_bzero(buf->buf, buf->wpos);
   49|  3.03k|}
ibuf_new:
   53|  1.52k|{
   54|  1.52k|	struct ibuf	*buf;
   55|       |
   56|  1.52k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (56:6): [True: 0, False: 1.52k]
  ------------------
   57|  1.52k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  1.52k|#define IKED_MSGBUF_MAX		8192
  ------------------
   58|      0|		return (NULL);
   59|       |
   60|  1.52k|	ibuf_zero(buf);
   61|       |
   62|  1.52k|	if (len == 0)
  ------------------
  |  Branch (62:6): [True: 0, False: 1.52k]
  ------------------
   63|      0|		return (buf);
   64|       |
   65|  1.52k|	if (data == NULL) {
  ------------------
  |  Branch (65:6): [True: 0, False: 1.52k]
  ------------------
   66|      0|		if (ibuf_advance(buf, len) == NULL) {
  ------------------
  |  Branch (66:7): [True: 0, False: 0]
  ------------------
   67|      0|			ibuf_free(buf);
   68|      0|			return (NULL);
   69|      0|		}
   70|  1.52k|	} else {
   71|  1.52k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (71:7): [True: 0, False: 1.52k]
  ------------------
   72|      0|			ibuf_free(buf);
   73|      0|			return (NULL);
   74|      0|		}
   75|  1.52k|	}
   76|       |
   77|  1.52k|	return (buf);
   78|  1.52k|}
ibuf_release:
  106|  9.56k|{
  107|  9.56k|	if (buf == NULL)
  ------------------
  |  Branch (107:6): [True: 8.04k, False: 1.51k]
  ------------------
  108|  8.04k|		return;
  109|  1.51k|	if (buf->buf != NULL) {
  ------------------
  |  Branch (109:6): [True: 1.51k, False: 0]
  ------------------
  110|  1.51k|		ibuf_zero(buf);
  111|  1.51k|		free(buf->buf);
  112|  1.51k|	}
  113|  1.51k|	free(buf);
  114|  1.51k|}
ibuf_data:
  126|   139k|{
  127|   139k|	return (ibuf_seek(buf, 0, 0));
  128|   139k|}

log_getverbose:
   82|  18.7k|{
   83|  18.7k|	return (verbose);
   84|  18.7k|}
vlog:
   98|  2.49k|{
   99|  2.49k|	char	*nfmt;
  100|  2.49k|	int	 saved_errno = errno;
  101|       |
  102|  2.49k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 2.49k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  2.49k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  2.49k|	errno = saved_errno;
  116|  2.49k|}
log_info:
  158|  2.49k|{
  159|  2.49k|	va_list	 ap;
  160|       |
  161|  2.49k|	va_start(ap, emsg);
  162|  2.49k|	vlog(LOG_INFO, emsg, ap);
  163|  2.49k|	va_end(ap);
  164|  2.49k|}
log_debug:
  168|  93.6k|{
  169|  93.6k|	va_list	 ap;
  170|       |
  171|  93.6k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 93.6k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|  93.6k|}

socket_getport:
   71|    256|{
   72|    256|	switch (sa->sa_family) {
   73|    152|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 152, False: 104]
  ------------------
   74|    152|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|    104|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 104, False: 152]
  ------------------
   76|    104|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 256]
  ------------------
   78|      0|		return (0);
   79|    256|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|    256|}
print_spi:
  499|  5.10k|{
  500|  5.10k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  5.10k|	static int		 i = 0;
  502|  5.10k|	char			*ptr;
  503|       |
  504|  5.10k|	ptr = buf[i];
  505|       |
  506|  5.10k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 5.10k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|     87|	case 4:
  ------------------
  |  Branch (510:2): [True: 87, False: 5.01k]
  ------------------
  511|     87|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|     87|		break;
  513|  1.91k|	case 8:
  ------------------
  |  Branch (513:2): [True: 1.91k, False: 3.18k]
  ------------------
  514|  1.91k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  1.91k|		break;
  516|  3.09k|	default:
  ------------------
  |  Branch (516:2): [True: 3.09k, False: 2.00k]
  ------------------
  517|  3.09k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  3.09k|		break;
  519|  5.10k|	}
  520|       |
  521|  5.10k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  5.10k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 637, False: 4.46k]
  ------------------
  522|    637|		i = 0;
  523|       |
  524|  5.10k|	return (ptr);
  525|  5.10k|}
print_map:
  529|   109k|{
  530|   109k|	unsigned int		 i;
  531|   109k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|   109k|	static int		 idx = 0;
  533|   109k|	const char		*name = NULL;
  534|       |
  535|   109k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|   109k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 13.7k, False: 96.0k]
  ------------------
  536|  13.7k|		idx = 0;
  537|   109k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  1.60M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 1.49M, False: 109k]
  ------------------
  540|  1.49M|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 62.9k, False: 1.43M]
  ------------------
  541|  62.9k|			name = map[i].cm_name;
  542|  1.49M|	}
  543|       |
  544|   109k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 46.8k, False: 62.9k]
  ------------------
  545|  46.8k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|  62.9k|	else
  547|  62.9k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|   109k|	return (buf[idx++]);
  550|   109k|}
print_hex:
  561|  18.7k|{
  562|  18.7k|	unsigned int	 i;
  563|       |
  564|  18.7k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 18.7k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|  18.7k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_host:
  731|    256|{
  732|    256|	static char	sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  733|    256|	static int	idx = 0;
  734|    256|	char		pbuf[7];
  735|    256|	in_port_t	port;
  736|       |
  737|    256|	if (buf == NULL) {
  ------------------
  |  Branch (737:6): [True: 0, False: 256]
  ------------------
  738|      0|		buf = sbuf[idx];
  739|      0|		len = sizeof(sbuf[idx]);
  740|      0|		if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|      0|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (740:7): [True: 0, False: 0]
  ------------------
  741|      0|			idx = 0;
  742|      0|	}
  743|       |
  744|    256|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (744:6): [True: 0, False: 256]
  ------------------
  745|      0|		strlcpy(buf, "any", len);
  746|      0|		return (buf);
  747|      0|	}
  748|       |
  749|    256|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  113|    256|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (113:3): [True: 152, False: 104]
  |  |  ------------------
  |  |  114|    256|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (114:2): [True: 104, False: 0]
  |  |  ------------------
  |  |  115|    104|	sizeof(struct sockaddr))
  ------------------
  |  Branch (749:6): [True: 0, False: 256]
  ------------------
  750|    256|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  751|      0|		strlcpy(buf, "unknown", len);
  752|      0|		return (buf);
  753|      0|	}
  754|       |
  755|    256|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (755:6): [True: 0, False: 256]
  ------------------
  756|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  757|      0|		(void)strlcat(buf, pbuf, len);
  758|      0|	}
  759|       |
  760|    256|	return (buf);
  761|    256|}

eap_parse:
   58|    884|{
   59|    884|	return (0);
   60|    884|}
ikev2_msg_frompeer:
   64|  28.2k|{
   65|  28.2k|	return (0);
   66|  28.2k|}
ikev2_ikesa_info:
   82|  1.80k|{
   83|  1.80k|	return "";
   84|  1.80k|}
ikev2_print_id:
  159|    624|{
  160|    624|	return (0);
  161|    624|}
ikev2_msg_cleanup:
  230|    894|{
  231|    894|	struct iked_certreq *cr;
  232|    894|	struct iked_proposal *prop, *proptmp;
  233|       |
  234|    894|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (234:6): [True: 894, False: 0]
  ------------------
  235|    894|		ibuf_release(msg->msg_nonce);
  236|    894|		ibuf_release(msg->msg_ke);
  237|    894|		ibuf_release(msg->msg_auth.id_buf);
  238|    894|		ibuf_release(msg->msg_peerid.id_buf);
  239|    894|		ibuf_release(msg->msg_localid.id_buf);
  240|    894|		ibuf_release(msg->msg_cert.id_buf);
  241|    894|		ibuf_release(msg->msg_cookie);
  242|    894|		ibuf_release(msg->msg_cookie2);
  243|    894|		ibuf_release(msg->msg_del_buf);
  244|    894|		free(msg->msg_eap.eam_user);
  245|    894|		free(msg->msg_cp_addr);
  246|    894|		free(msg->msg_cp_addr6);
  247|       |
  248|    894|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|    894|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|    894|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|    894|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  1.78k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 894]
  |  |  ------------------
  |  |  447|    894|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|    894|	    (var) = (tvar))
  ------------------
  249|    894|		    proptmp) {
  250|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  251|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (251:8): [True: 0, False: 0]
  ------------------
  252|      0|				free(prop->prop_xforms);
  253|      0|			free(prop);
  254|      0|		}
  255|       |
  256|    894|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|    894|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (256:10): [True: 0, False: 894]
  ------------------
  257|      0|			ibuf_release(cr->cr_data);
  258|      0|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|      0|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|      0|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  310|      0|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  259|      0|			free(cr);
  260|      0|		}
  261|    894|	}
  262|       |
  263|    894|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (263:6): [True: 894, False: 0]
  ------------------
  264|    894|		ibuf_release(msg->msg_data);
  265|    894|		msg->msg_data = NULL;
  266|    894|	}
  267|    894|}

LLVMFuzzerTestOneInput:
  104|    895|{
  105|    895|	struct ibuf		*fuzzed;
  106|    895|	struct ike_header	 hdr;
  107|    895|	struct iked_message	 msg;
  108|       |
  109|    895|	bzero(&hdr, sizeof(hdr));
  110|    895|	bzero(&msg, sizeof(msg));
  111|       |
  112|    895|	fuzzed = ibuf_new(data, size);
  113|    895|	if (fuzzed == NULL){
  ------------------
  |  Branch (113:6): [True: 0, False: 895]
  ------------------
  114|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  115|      0|		    "(hint: fuzz-input too long?)");
  116|      0|		return -1;
  117|      0|	}	
  118|       |	
  119|       |	/* size too small? */
  120|    895|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (120:6): [True: 1, False: 894]
  ------------------
  121|      1|		ibuf_free(fuzzed);
  122|      1|		return 0;
  123|      1|	}	       
  124|       |
  125|    894|	prepare_header(&hdr, fuzzed);
  126|    894|	prepare_message(&msg, fuzzed);
  127|       |
  128|    894|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  129|       |
  130|    894|	ikev2_msg_cleanup(NULL, &msg);
  131|       |
  132|    894|	return 0;
  133|    895|}
test_parser_fuzz.c:prepare_header:
   75|    894|{
   76|    894|	bzero(hdr, sizeof(*hdr));
   77|    894|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|    894|	    sizeof(hdr->ike_ispi));
   79|    894|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|    894|	    sizeof(hdr->ike_rspi));
   81|    894|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|    894|	hdr->ike_version = get_version(ibuf_data(data));
   83|    894|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|    894|	hdr->ike_length = get_length(ibuf_data(data));
   85|    894|}
test_parser_fuzz.c:get_icookie:
   39|    894|{
   40|    894|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|    894|#define OFFSET_ICOOKIE		0
  ------------------
   41|    894|}
test_parser_fuzz.c:get_rcookie:
   45|    894|{
   46|    894|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|    894|#define OFFSET_RCOOKIE		8
  ------------------
   47|    894|}
test_parser_fuzz.c:get_nextpayload:
   51|    894|{
   52|    894|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|    894|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|    894|}
test_parser_fuzz.c:get_version:
   57|    894|{
   58|    894|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|    894|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|    894|}
test_parser_fuzz.c:get_exchange:
   63|    894|{
   64|    894|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|    894|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|    894|}
test_parser_fuzz.c:get_length:
   69|    894|{
   70|    894|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|    894|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|    894|}
test_parser_fuzz.c:prepare_message:
   89|    894|{
   90|    894|	static struct iked_sa	sa;
   91|       |
   92|    894|	bzero(&sa, sizeof(sa));
   93|    894|	bzero(msg, sizeof(*msg));
   94|       |
   95|    894|	msg->msg_sa = &sa;
   96|    894|	msg->msg_data = data;
   97|    894|	msg->msg_e = 1;
   98|    894|	msg->msg_parent = msg;
   99|    894|}

