freezero:
   25|  3.93k|{
   26|       |	/* This is legal. */
   27|  3.93k|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 406, False: 3.53k]
  ------------------
   28|    406|		return;
   29|       |
   30|  3.53k|	explicit_bzero(ptr, sz);
   31|  3.53k|	free(ptr);
   32|  3.53k|}

ibuf_dynamic:
   60|  3.94k|{
   61|  3.94k|	struct ibuf	*buf;
   62|       |
   63|  3.94k|	if (max < len) {
  ------------------
  |  Branch (63:6): [True: 0, False: 3.94k]
  ------------------
   64|      0|		errno = EINVAL;
   65|      0|		return (NULL);
   66|      0|	}
   67|       |
   68|  3.94k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (68:6): [True: 0, False: 3.94k]
  ------------------
   69|      0|		return (NULL);
   70|  3.94k|	if (len > 0) {
  ------------------
  |  Branch (70:6): [True: 3.53k, False: 408]
  ------------------
   71|  3.53k|		if ((buf->buf = calloc(len, 1)) == NULL) {
  ------------------
  |  Branch (71:7): [True: 0, False: 3.53k]
  ------------------
   72|      0|			free(buf);
   73|      0|			return (NULL);
   74|      0|		}
   75|  3.53k|	}
   76|  3.94k|	buf->size = len;
   77|  3.94k|	buf->max = max;
   78|  3.94k|	buf->fd = -1;
   79|       |
   80|  3.94k|	return (buf);
   81|  3.94k|}
ibuf_add:
  105|  3.53k|{
  106|  3.53k|	if (len > SIZE_MAX - buf->wpos) {
  ------------------
  |  Branch (106:6): [True: 0, False: 3.53k]
  ------------------
  107|      0|		errno = ERANGE;
  108|      0|		return (-1);
  109|      0|	}
  110|       |
  111|  3.53k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (111:6): [True: 0, False: 3.53k]
  ------------------
  112|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (112:7): [True: 0, False: 0]
  ------------------
  113|      0|			return (-1);
  114|       |
  115|  3.53k|	memcpy(buf->buf + buf->wpos, data, len);
  116|  3.53k|	buf->wpos += len;
  117|  3.53k|	return (0);
  118|  3.53k|}
ibuf_seek:
  142|   313k|{
  143|       |	/* only allowed to seek in already written parts */
  144|   313k|	if (len > SIZE_MAX - pos || pos + len > buf->wpos)
  ------------------
  |  Branch (144:6): [True: 0, False: 313k]
  |  Branch (144:30): [True: 1.35k, False: 311k]
  ------------------
  145|  1.35k|		return (NULL);
  146|       |
  147|   311k|	return (buf->buf + pos);
  148|   313k|}
ibuf_size:
  152|  2.48k|{
  153|  2.48k|	return (buf->wpos);
  154|  2.48k|}
ibuf_free:
  241|  26.0k|{
  242|  26.0k|	if (buf == NULL)
  ------------------
  |  Branch (242:6): [True: 22.1k, False: 3.93k]
  ------------------
  243|  22.1k|		return;
  244|  3.93k|	freezero(buf->buf, buf->size);
  245|  3.93k|	free(buf);
  246|  3.93k|}

strlcpy:
   29|   137k|{
   30|   137k|	const char *osrc = src;
   31|   137k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|   137k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 137k, False: 0]
  ------------------
   35|   767k|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 766k, False: 972]
  ------------------
   36|   766k|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 136k, False: 629k]
  ------------------
   37|   136k|				break;
   38|   766k|		}
   39|   137k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|   137k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 972, False: 136k]
  ------------------
   43|    972|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 972, False: 0]
  ------------------
   44|    972|			*dst = '\0';		/* NUL-terminate dst */
   45|    972|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 972]
  ------------------
   46|      0|			;
   47|    972|	}
   48|       |
   49|   137k|	return(src - osrc - 1);	/* count does not include NUL */
   50|   137k|}

ikev2_pld_parse:
  118|  2.46k|{
  119|  2.46k|	log_debug("%s: header ispi %s rspi %s"
  120|  2.46k|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  121|  2.46k|	    " msgid %d length %u response %d", __func__,
  122|  2.46k|	    print_spi(betoh64(hdr->ike_ispi), 8),
  123|  2.46k|	    print_spi(betoh64(hdr->ike_rspi), 8),
  124|  2.46k|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  125|  2.46k|	    hdr->ike_version,
  126|  2.46k|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  127|  2.46k|	    hdr->ike_flags,
  128|  2.46k|	    betoh32(hdr->ike_msgid),
  129|  2.46k|	    betoh32(hdr->ike_length),
  130|  2.46k|	    msg->msg_response);
  131|       |
  132|  2.46k|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  Branch (132:6): [True: 4, False: 2.46k]
  ------------------
  133|      4|		log_debug("%s: short message", __func__);
  134|      4|		return (-1);
  135|      4|	}
  136|       |
  137|  2.46k|	offset += sizeof(*hdr);
  138|       |
  139|  2.46k|	return (ikev2_pld_payloads(env, msg, offset,
  140|  2.46k|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  141|  2.46k|}
ikev2_validate_pld:
  146|  68.5k|{
  147|  68.5k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  148|  68.5k|	size_t		 pld_length;
  149|       |
  150|       |	/* We need at least the generic header. */
  151|  68.5k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (151:6): [True: 213, False: 68.3k]
  ------------------
  152|    213|		log_debug("%s: malformed payload: too short for generic "
  153|    213|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  154|    213|		return (-1);
  155|    213|	}
  156|  68.3k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  157|       |
  158|       |	/*
  159|       |	 * We need at least the specified number of bytes.
  160|       |	 * pld_length is the full size of the payload including
  161|       |	 * the generic payload header.
  162|       |	 */
  163|  68.3k|	pld_length = betoh16(pld->pld_length);
  164|  68.3k|	if (left < pld_length) {
  ------------------
  |  Branch (164:6): [True: 818, False: 67.4k]
  ------------------
  165|    818|		log_debug("%s: malformed payload: shorter than specified "
  166|    818|		    "(%zu < %zu)", __func__, left, pld_length);
  167|    818|		return (-1);
  168|    818|	}
  169|       |	/*
  170|       |	 * Sanity check the specified payload size, it must
  171|       |	 * be at least the size of the generic payload header.
  172|       |	 */
  173|  67.4k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (173:6): [True: 374, False: 67.1k]
  ------------------
  174|    374|		log_debug("%s: malformed payload: shorter than minimum "
  175|    374|		    "header size (%zu < %zu)", __func__, pld_length,
  176|    374|		    sizeof(*pld));
  177|    374|		return (-1);
  178|    374|	}
  179|       |
  180|  67.1k|	return (0);
  181|  67.4k|}
ikev2_pld_payloads:
  186|  2.46k|{
  187|  2.46k|	struct ikev2_payload	 pld;
  188|  2.46k|	unsigned int		 e;
  189|  2.46k|	int			 ret;
  190|  2.46k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  191|  2.46k|	size_t			 total, left;
  192|       |
  193|       |	/* Check if message was decrypted in an E payload */
  194|  2.46k|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|  2.46k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (194:6): [True: 2.46k, False: 0]
  ------------------
  195|       |
  196|       |	/* Bytes left in datagram. */
  197|  2.46k|	total = length - offset;
  198|       |
  199|  69.1k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (199:9): [True: 68.9k, False: 213]
  |  Branch (199:25): [True: 68.5k, False: 457]
  ------------------
  200|  68.5k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (200:7): [True: 1.40k, False: 67.1k]
  ------------------
  201|  1.40k|			return (-1);
  202|       |
  203|  67.1k|		log_debug("%s: %spayload %s"
  204|  67.1k|		    " nextpayload %s critical 0x%02x length %d",
  205|  67.1k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (205:17): [True: 67.1k, False: 0]
  ------------------
  206|  67.1k|		    print_map(payload, ikev2_payload_map),
  207|  67.1k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  208|  67.1k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|  67.1k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  209|  67.1k|		    betoh16(pld.pld_length));
  210|       |
  211|       |		/* Skip over generic payload header. */
  212|  67.1k|		offset += sizeof(pld);
  213|  67.1k|		total -= sizeof(pld);
  214|  67.1k|		left = betoh16(pld.pld_length) - sizeof(pld);
  215|  67.1k|		ret = 0;
  216|       |
  217|  67.1k|		switch (payload | e) {
  218|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (218:3): [True: 0, False: 67.1k]
  ------------------
  219|  12.5k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  12.5k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  12.5k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (219:3): [True: 12.5k, False: 54.5k]
  ------------------
  220|  12.5k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  221|  12.5k|			break;
  222|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (222:3): [True: 0, False: 67.1k]
  ------------------
  223|  4.32k|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|  4.32k|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|  4.32k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (223:3): [True: 4.32k, False: 62.7k]
  ------------------
  224|  4.32k|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  225|  4.32k|			break;
  226|  2.68k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|  2.68k|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|  2.68k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 2.68k, False: 64.4k]
  ------------------
  227|  3.49k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  3.49k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  3.49k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (227:3): [True: 808, False: 66.3k]
  ------------------
  228|  3.49k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  229|  3.49k|			    payload);
  230|  3.49k|			break;
  231|    594|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|    594|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|    594|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (231:3): [True: 594, False: 66.5k]
  ------------------
  232|    594|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  233|    594|			break;
  234|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (234:3): [True: 0, False: 67.1k]
  ------------------
  235|  6.22k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  6.22k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  6.22k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (235:3): [True: 6.22k, False: 60.8k]
  ------------------
  236|  6.22k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  237|  6.22k|			break;
  238|  5.65k|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|  5.65k|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|  5.65k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (238:3): [True: 5.65k, False: 61.4k]
  ------------------
  239|  5.65k|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  240|  5.65k|			break;
  241|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (241:3): [True: 0, False: 67.1k]
  ------------------
  242|    159|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|    159|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|    159|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (242:3): [True: 159, False: 66.9k]
  ------------------
  243|    159|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  244|    159|			break;
  245|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (245:3): [True: 0, False: 67.1k]
  ------------------
  246|  3.54k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  3.54k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  3.54k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (246:3): [True: 3.54k, False: 63.5k]
  ------------------
  247|  3.54k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  248|  3.54k|			break;
  249|  2.28k|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|  2.28k|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|  2.28k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (249:3): [True: 2.28k, False: 64.8k]
  ------------------
  250|  2.28k|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  251|  2.28k|			break;
  252|    492|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|    492|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|    492|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 492, False: 66.6k]
  ------------------
  253|  3.04k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  3.04k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  3.04k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (253:3): [True: 2.54k, False: 64.5k]
  ------------------
  254|  3.04k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  255|  3.04k|			break;
  256|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (256:3): [True: 0, False: 67.1k]
  ------------------
  257|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  258|      0|			break;
  259|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (259:3): [True: 0, False: 67.1k]
  ------------------
  260|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  261|      0|			break;
  262|  4.22k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  4.22k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  4.22k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (262:3): [True: 4.22k, False: 62.8k]
  ------------------
  263|  4.22k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  264|  4.22k|			break;
  265|  7.42k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  7.42k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  7.42k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (265:3): [True: 7.42k, False: 59.6k]
  ------------------
  266|  7.42k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  267|  7.42k|			break;
  268|  13.5k|		default:
  ------------------
  |  Branch (268:3): [True: 13.5k, False: 53.5k]
  ------------------
  269|  13.5k|			print_hex(msgbuf, offset,
  270|  13.5k|			    betoh16(pld.pld_length) - sizeof(pld));
  271|  13.5k|			break;
  272|  67.1k|		}
  273|       |
  274|  67.1k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (274:7): [True: 33.7k, False: 33.3k]
  |  Branch (274:19): [True: 387, False: 33.3k]
  ------------------
  275|    387|			(void)ikev2_send_informational(env, msg);
  276|    387|			return (-1);
  277|    387|		}
  278|       |
  279|       |		/* Encrypted payloads must appear last */
  280|  66.7k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|  66.7k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (280:7): [True: 1, False: 66.7k]
  ------------------
  281|  66.7k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|  66.7k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (281:7): [True: 2, False: 66.7k]
  ------------------
  282|      3|			return (0);
  283|       |
  284|  66.7k|		payload = pld.pld_nextpayload;
  285|  66.7k|		offset += left;
  286|  66.7k|		total -= left;
  287|  66.7k|	}
  288|       |
  289|    670|	return (0);
  290|  2.46k|}
ikev2_validate_sa:
  295|  15.2k|{
  296|  15.2k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  297|  15.2k|	size_t		 sap_length;
  298|       |
  299|  15.2k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (299:6): [True: 4.68k, False: 10.5k]
  ------------------
  300|  4.68k|		log_debug("%s: malformed payload: too short for header "
  301|  4.68k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  302|  4.68k|		return (-1);
  303|  4.68k|	}
  304|  10.5k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  305|       |
  306|  10.5k|	sap_length = betoh16(sap->sap_length);
  307|  10.5k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (307:6): [True: 1.57k, False: 8.96k]
  ------------------
  308|  1.57k|		log_debug("%s: malformed payload: shorter than minimum header "
  309|  1.57k|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  310|  1.57k|		return (-1);
  311|  1.57k|	}
  312|  8.96k|	if (left < sap_length) {
  ------------------
  |  Branch (312:6): [True: 1.55k, False: 7.40k]
  ------------------
  313|  1.55k|		log_debug("%s: malformed payload: too long for actual payload "
  314|  1.55k|		    "size (%zu < %zu)", __func__, left, sap_length);
  315|  1.55k|		return (-1);
  316|  1.55k|	}
  317|       |	/*
  318|       |	 * If there is only one proposal, sap_length must be the
  319|       |	 * total payload size.
  320|       |	 */
  321|  7.40k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (321:6): [True: 881, False: 6.52k]
  |  Branch (321:24): [True: 29, False: 852]
  ------------------
  322|     29|		log_debug("%s: malformed payload: SA payload length mismatches "
  323|     29|		    "single proposal substructure length (%zu != %zu)",
  324|     29|		    __func__, left, sap_length);
  325|     29|		return (-1);
  326|     29|	}
  327|       |	/*
  328|       |	 * If there are more than one proposal, there must be bytes
  329|       |	 * left in the payload.
  330|       |	 */
  331|  7.37k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (331:6): [True: 6.52k, False: 852]
  |  Branch (331:23): [True: 513, False: 6.01k]
  ------------------
  332|    513|		log_debug("%s: malformed payload: SA payload too small for "
  333|    513|		    "further proposals (%zu <= %zu)", __func__,
  334|    513|		    left, sap_length);
  335|    513|		return (-1);
  336|    513|	}
  337|  6.86k|	return (0);
  338|  7.37k|}
ikev2_pld_sa:
  343|  12.5k|{
  344|  12.5k|	struct ikev2_sa_proposal	 sap;
  345|  12.5k|	struct iked_proposal		*prop = NULL;
  346|  12.5k|	uint32_t			 spi32;
  347|  12.5k|	uint64_t			 spi = 0, spi64;
  348|  12.5k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  349|  12.5k|	int				 r;
  350|  12.5k|	struct iked_proposals		*props;
  351|  12.5k|	size_t				 total;
  352|       |
  353|  15.2k|	do {
  354|  15.2k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (354:7): [True: 8.36k, False: 6.86k]
  ------------------
  355|  8.36k|			return (-1);
  356|       |
  357|       |		/* Assumed size of the first proposals, including SPI if present. */
  358|  6.86k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  359|       |
  360|  6.86k|		props = &msg->msg_parent->msg_proposals;
  361|       |
  362|  6.86k|		offset += sizeof(sap);
  363|  6.86k|		left -= sizeof(sap);
  364|       |
  365|  6.86k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (365:7): [True: 731, False: 6.13k]
  ------------------
  366|    731|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (366:8): [True: 279, False: 452]
  ------------------
  367|    279|				log_debug("%s: malformed payload: SPI larger than "
  368|    279|				    "actual payload (%zu < %d)", __func__, left,
  369|    279|				    sap.sap_spisize);
  370|    279|				return (-1);
  371|    279|			}
  372|    452|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (372:8): [True: 103, False: 349]
  ------------------
  373|    103|				log_debug("%s: malformed payload: SPI larger than "
  374|    103|				    "proposal (%zu < %d)", __func__, total,
  375|    103|				    sap.sap_spisize);
  376|    103|				return (-1);
  377|    103|			}
  378|    349|			switch (sap.sap_spisize) {
  379|    100|			case 4:
  ------------------
  |  Branch (379:4): [True: 100, False: 249]
  ------------------
  380|    100|				memcpy(&spi32, msgbuf + offset, 4);
  381|    100|				spi = betoh32(spi32);
  382|    100|				break;
  383|    128|			case 8:
  ------------------
  |  Branch (383:4): [True: 128, False: 221]
  ------------------
  384|    128|				memcpy(&spi64, msgbuf + offset, 8);
  385|    128|				spi = betoh64(spi64);
  386|    128|				break;
  387|    121|			default:
  ------------------
  |  Branch (387:4): [True: 121, False: 228]
  ------------------
  388|    121|				log_debug("%s: unsupported SPI size %d",
  389|    121|				    __func__, sap.sap_spisize);
  390|    121|				return (-1);
  391|    349|			}
  392|       |
  393|    228|			offset += sap.sap_spisize;
  394|    228|			left -= sap.sap_spisize;
  395|       |
  396|       |			/* Assumed size of the proposal, now without SPI. */
  397|    228|			total -= sap.sap_spisize;
  398|    228|		}
  399|       |
  400|       |		/*
  401|       |		 * As we verified sanity of packet headers, this check will
  402|       |		 * be always false, but just to be sure we keep it.
  403|       |		 */
  404|  6.36k|		if (left < total) {
  ------------------
  |  Branch (404:7): [True: 0, False: 6.36k]
  ------------------
  405|      0|			log_debug("%s: malformed payload: too long for payload "
  406|      0|			    "(%zu < %zu)", __func__, left, total);
  407|      0|			return (-1);
  408|      0|		}
  409|       |
  410|  6.36k|		log_debug("%s: more %d reserved %d length %d"
  411|  6.36k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  412|  6.36k|		    __func__, sap.sap_more, sap.sap_reserved,
  413|  6.36k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  414|  6.36k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  415|  6.36k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  416|       |
  417|  6.36k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (417:7): [True: 69, False: 6.29k]
  ------------------
  418|     69|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (418:8): [True: 69, False: 0]
  ------------------
  419|     69|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  420|     69|				log_debug("%s: invalid proposal", __func__);
  421|     69|				return (-1);
  422|     69|			}
  423|      0|			prop = msg->msg_parent->msg_prop;
  424|      0|			prop->prop_peerspi.spi = spi;
  425|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  426|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  427|       |
  428|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  429|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  430|      0|		}
  431|       |
  432|       |		/*
  433|       |		 * Parse the attached transforms
  434|       |		 */
  435|  6.29k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (435:7): [True: 3.91k, False: 2.38k]
  ------------------
  436|  3.91k|			r = ikev2_pld_xform(env, msg, offset, total);
  437|  3.91k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (437:8): [True: 0, False: 3.91k]
  |  Branch (437:21): [True: 0, False: 0]
  ------------------
  438|      0|				log_debug("%s: invalid proposal transform",
  439|      0|				    __func__);
  440|       |
  441|       |				/* cleanup and ignore proposal */
  442|      0|				config_free_proposal(props, prop);
  443|      0|				prop = msg->msg_parent->msg_prop = NULL;
  444|  3.91k|			} else if (r != 0) {
  ------------------
  |  Branch (444:15): [True: 3.20k, False: 709]
  ------------------
  445|  3.20k|				log_debug("%s: invalid proposal transforms",
  446|  3.20k|				    __func__);
  447|  3.20k|				return (-1);
  448|  3.20k|			}
  449|  3.91k|		}
  450|       |
  451|  3.09k|		offset += total;
  452|  3.09k|		left -= total;
  453|  3.09k|	} while (sap.sap_more);
  ------------------
  |  Branch (453:11): [True: 2.65k, False: 433]
  ------------------
  454|       |
  455|    433|	return (0);
  456|  12.5k|}
ikev2_validate_xform:
  461|  5.09k|{
  462|  5.09k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  463|  5.09k|	size_t		 xfrm_length;
  464|       |
  465|  5.09k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (465:6): [True: 274, False: 4.82k]
  ------------------
  466|    274|		log_debug("%s: malformed payload: too short for header "
  467|    274|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  468|    274|		return (-1);
  469|    274|	}
  470|  4.82k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  471|       |
  472|  4.82k|	xfrm_length = betoh16(xfrm->xfrm_length);
  473|  4.82k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (473:6): [True: 994, False: 3.82k]
  ------------------
  474|    994|		log_debug("%s: malformed payload: shorter than minimum header "
  475|    994|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  476|    994|		return (-1);
  477|    994|	}
  478|  3.82k|	if (total < xfrm_length) {
  ------------------
  |  Branch (478:6): [True: 459, False: 3.36k]
  ------------------
  479|    459|		log_debug("%s: malformed payload: too long for payload size "
  480|    459|		    "(%zu < %zu)", __func__, total, xfrm_length);
  481|    459|		return (-1);
  482|    459|	}
  483|       |
  484|  3.36k|	return (0);
  485|  3.82k|}
ikev2_pld_xform:
  490|  5.09k|{
  491|  5.09k|	struct ikev2_transform		 xfrm;
  492|  5.09k|	char				 id[BUFSIZ];
  493|  5.09k|	int				 ret = 0;
  494|  5.09k|	int				 r;
  495|  5.09k|	size_t				 xfrm_length;
  496|       |
  497|  5.09k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (497:6): [True: 1.72k, False: 3.36k]
  ------------------
  498|  1.72k|		return (-1);
  499|       |
  500|  3.36k|	xfrm_length = betoh16(xfrm.xfrm_length);
  501|       |
  502|  3.36k|	switch (xfrm.xfrm_type) {
  503|    710|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|    710|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (503:2): [True: 710, False: 2.65k]
  ------------------
  504|    710|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  505|    710|		    ikev2_xformencr_map), sizeof(id));
  506|    710|		break;
  507|    755|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|    755|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (507:2): [True: 755, False: 2.61k]
  ------------------
  508|    755|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  509|    755|		    ikev2_xformprf_map), sizeof(id));
  510|    755|		break;
  511|     76|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|     76|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (511:2): [True: 76, False: 3.29k]
  ------------------
  512|     76|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  513|     76|		    ikev2_xformauth_map), sizeof(id));
  514|     76|		break;
  515|    140|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|    140|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (515:2): [True: 140, False: 3.22k]
  ------------------
  516|    140|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  517|    140|		    ikev2_xformdh_map), sizeof(id));
  518|    140|		break;
  519|    737|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|    737|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (519:2): [True: 737, False: 2.63k]
  ------------------
  520|    737|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  521|    737|		    ikev2_xformesn_map), sizeof(id));
  522|    737|		break;
  523|    950|	default:
  ------------------
  |  Branch (523:2): [True: 950, False: 2.41k]
  ------------------
  524|    950|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  525|    950|		break;
  526|  3.36k|	}
  527|       |
  528|  3.36k|	log_debug("%s: more %d reserved %d length %zu"
  529|  3.36k|	    " type %s id %s",
  530|  3.36k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  531|  3.36k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  532|       |
  533|       |	/*
  534|       |	 * Parse transform attributes, if available
  535|       |	 */
  536|  3.36k|	msg->msg_attrlength = 0;
  537|  3.36k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (537:6): [True: 1.84k, False: 1.52k]
  ------------------
  538|  1.84k|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (538:7): [True: 1.34k, False: 502]
  ------------------
  539|  1.84k|		    xfrm_length - sizeof(xfrm)) != 0) {
  540|  1.34k|			return (-1);
  541|  1.34k|		}
  542|  1.84k|	}
  543|       |
  544|  2.02k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (544:6): [True: 0, False: 2.02k]
  ------------------
  545|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  546|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  547|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  548|      0|		if (r == -1) {
  ------------------
  |  Branch (548:7): [True: 0, False: 0]
  ------------------
  549|      0|			log_debug("%s: failed to add transform: alloc error",
  550|      0|			    __func__);
  551|      0|			return (r);
  552|      0|		} else if (r == -2) {
  ------------------
  |  Branch (552:14): [True: 0, False: 0]
  ------------------
  553|      0|			log_debug("%s: failed to add transform: unknown type",
  554|      0|			    __func__);
  555|      0|			return (r);
  556|      0|		}
  557|      0|	}
  558|       |
  559|       |	/* Next transform */
  560|  2.02k|	offset += xfrm_length;
  561|  2.02k|	total -= xfrm_length;
  562|  2.02k|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|  2.02k|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (562:6): [True: 1.18k, False: 840]
  ------------------
  563|  1.18k|		ret = ikev2_pld_xform(env, msg, offset, total);
  564|    840|	else if (total != 0) {
  ------------------
  |  Branch (564:11): [True: 131, False: 709]
  ------------------
  565|       |		/* No more transforms but still some data left. */
  566|    131|		log_debug("%s: less data than specified, %zu bytes left",
  567|    131|		    __func__, total);
  568|    131|		ret = -1;
  569|    131|	}
  570|       |
  571|  2.02k|	return (ret);
  572|  2.02k|}
ikev2_validate_attr:
  577|  28.3k|{
  578|  28.3k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  579|       |
  580|  28.3k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (580:6): [True: 436, False: 27.8k]
  ------------------
  581|    436|		log_debug("%s: malformed payload: too short for header "
  582|    436|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  583|    436|		return (-1);
  584|    436|	}
  585|  27.8k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  586|       |
  587|  27.8k|	return (0);
  588|  28.3k|}
ikev2_pld_attr:
  593|  28.3k|{
  594|  28.3k|	struct ikev2_attribute		 attr;
  595|  28.3k|	unsigned int			 type;
  596|  28.3k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  597|  28.3k|	int				 ret = 0;
  598|  28.3k|	size_t				 attr_length;
  599|       |
  600|  28.3k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (600:6): [True: 436, False: 27.8k]
  ------------------
  601|    436|		return (-1);
  602|       |
  603|  27.8k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  27.8k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  604|       |
  605|  27.8k|	log_debug("%s: attribute type %s length %d total %zu",
  606|  27.8k|	    __func__, print_map(type, ikev2_attrtype_map),
  607|  27.8k|	    betoh16(attr.attr_length), total);
  608|       |
  609|  27.8k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  27.8k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (609:6): [True: 21.7k, False: 6.11k]
  ------------------
  610|       |		/* Type-Value attribute */
  611|  21.7k|		offset += sizeof(attr);
  612|  21.7k|		total -= sizeof(attr);
  613|       |
  614|  21.7k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  21.7k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (614:7): [True: 44, False: 21.7k]
  ------------------
  615|     44|			msg->msg_attrlength = betoh16(attr.attr_length);
  616|  21.7k|	} else {
  617|       |		/* Type-Length-Value attribute */
  618|  6.11k|		attr_length = betoh16(attr.attr_length);
  619|  6.11k|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (619:7): [True: 519, False: 5.59k]
  ------------------
  620|    519|			log_debug("%s: malformed payload: shorter than "
  621|    519|			    "minimum header size (%zu < %zu)", __func__,
  622|    519|			    attr_length, sizeof(attr));
  623|    519|			return (-1);
  624|    519|		}
  625|  5.59k|		if (total < attr_length) {
  ------------------
  |  Branch (625:7): [True: 389, False: 5.20k]
  ------------------
  626|    389|			log_debug("%s: malformed payload: attribute larger "
  627|    389|			    "than actual payload (%zu < %zu)", __func__,
  628|    389|			    total, attr_length);
  629|    389|			return (-1);
  630|    389|		}
  631|  5.20k|		print_hex(msgbuf, offset + sizeof(attr),
  632|  5.20k|		    attr_length - sizeof(attr));
  633|  5.20k|		offset += attr_length;
  634|  5.20k|		total -= attr_length;
  635|  5.20k|	}
  636|       |
  637|  26.9k|	if (total > 0) {
  ------------------
  |  Branch (637:6): [True: 26.4k, False: 502]
  ------------------
  638|       |		/* Next attribute */
  639|  26.4k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  640|  26.4k|	}
  641|       |
  642|  26.9k|	return (ret);
  643|  27.8k|}
ikev2_validate_ke:
  648|  4.32k|{
  649|  4.32k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  650|       |
  651|  4.32k|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (651:6): [True: 2.75k, False: 1.56k]
  ------------------
  652|  2.75k|		log_debug("%s: malformed payload: too short for header "
  653|  2.75k|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  654|  2.75k|		return (-1);
  655|  2.75k|	}
  656|  1.56k|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  657|       |
  658|  1.56k|	return (0);
  659|  4.32k|}
ikev2_pld_ke:
  664|  4.32k|{
  665|  4.32k|	struct ikev2_keyexchange	 kex;
  666|  4.32k|	uint8_t				*buf;
  667|  4.32k|	size_t				 len;
  668|  4.32k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  669|       |
  670|  4.32k|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (670:6): [True: 2.75k, False: 1.56k]
  ------------------
  671|  2.75k|		return (-1);
  672|       |
  673|  1.56k|	log_debug("%s: dh group %s reserved %d", __func__,
  674|  1.56k|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  675|  1.56k|	    betoh16(kex.kex_reserved));
  676|       |
  677|  1.56k|	buf = msgbuf + offset + sizeof(kex);
  678|  1.56k|	len = left - sizeof(kex);
  679|       |
  680|  1.56k|	if (len == 0) {
  ------------------
  |  Branch (680:6): [True: 305, False: 1.26k]
  ------------------
  681|    305|		log_debug("%s: malformed payload: no KE data given", __func__);
  682|    305|		return (-1);
  683|    305|	}
  684|       |
  685|  1.26k|	print_hex(buf, 0, len);
  686|       |
  687|  1.26k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (687:6): [True: 22, False: 1.23k]
  ------------------
  688|     22|		if (ibuf_length(msg->msg_parent->msg_ke)) {
  ------------------
  |  Branch (688:7): [True: 4, False: 18]
  ------------------
  689|      4|			log_info("%s: duplicate KE payload", __func__);
  690|      4|			return (-1);
  691|      4|		}
  692|     18|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (692:7): [True: 0, False: 18]
  ------------------
  693|      0|			log_debug("%s: failed to get exchange", __func__);
  694|      0|			return (-1);
  695|      0|		}
  696|     18|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  697|     18|	}
  698|       |
  699|  1.25k|	return (0);
  700|  1.26k|}
ikev2_validate_id:
  705|  3.49k|{
  706|  3.49k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  707|       |
  708|  3.49k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (708:6): [True: 1.83k, False: 1.66k]
  ------------------
  709|  1.83k|		log_debug("%s: malformed payload: too short for header "
  710|  1.83k|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  711|  1.83k|		return (-1);
  712|  1.83k|	}
  713|  1.66k|	memcpy(id, msgbuf + offset, sizeof(*id));
  714|       |
  715|  1.66k|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|  1.66k|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (715:6): [True: 669, False: 995]
  ------------------
  716|    669|		log_debug("%s: malformed payload: invalid ID type.",
  717|    669|		    __func__);
  718|    669|		return (-1);
  719|    669|	}
  720|       |
  721|    995|	return (0);
  722|  1.66k|}
ikev2_pld_id:
  727|  3.49k|{
  728|  3.49k|	uint8_t				*ptr;
  729|  3.49k|	struct ikev2_id			 id;
  730|  3.49k|	size_t				 len;
  731|  3.49k|	struct iked_id			*idp, idb;
  732|  3.49k|	const struct iked_sa		*sa = msg->msg_sa;
  733|  3.49k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  734|  3.49k|	char				 idstr[IKED_ID_SIZE];
  735|       |
  736|  3.49k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (736:6): [True: 2.50k, False: 995]
  ------------------
  737|  2.50k|		return (-1);
  738|       |
  739|    995|	bzero(&idb, sizeof(idb));
  740|       |
  741|       |	/* Don't strip the Id payload header */
  742|    995|	ptr = msgbuf + offset;
  743|    995|	len = left;
  744|       |
  745|    995|	idb.id_type = id.id_type;
  746|    995|	idb.id_offset = sizeof(id);
  747|    995|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (747:6): [True: 0, False: 995]
  ------------------
  748|      0|		return (-1);
  749|       |
  750|    995|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (750:6): [True: 0, False: 995]
  ------------------
  751|      0|		ibuf_free(idb.id_buf);
  752|      0|		log_debug("%s: malformed id", __func__);
  753|      0|		return (-1);
  754|      0|	}
  755|       |
  756|    995|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  757|       |
  758|    995|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (758:6): [True: 954, False: 41]
  ------------------
  759|    954|		ibuf_free(idb.id_buf);
  760|    954|		return (0);
  761|    954|	}
  762|       |
  763|     41|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (763:8): [True: 0, False: 41]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|     41|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|     41|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (764:7): [True: 41, False: 0]
  |  Branch (764:35): [True: 24, False: 17]
  ------------------
  765|     24|		idp = &msg->msg_parent->msg_peerid;
  766|     17|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|     17|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (766:11): [True: 17, False: 0]
  |  Branch (766:39): [True: 17, False: 0]
  ------------------
  767|     17|		idp = &msg->msg_parent->msg_localid;
  768|      0|	else {
  769|      0|		ibuf_free(idb.id_buf);
  770|      0|		log_debug("%s: unexpected id payload", __func__);
  771|      0|		return (0);
  772|      0|	}
  773|       |
  774|     41|	if (idp->id_type) {
  ------------------
  |  Branch (774:6): [True: 11, False: 30]
  ------------------
  775|     11|		ibuf_free(idb.id_buf);
  776|     11|		log_debug("%s: duplicate id payload", __func__);
  777|     11|		return (-1);
  778|     11|	}
  779|       |
  780|     30|	idp->id_buf = idb.id_buf;
  781|     30|	idp->id_offset = idb.id_offset;
  782|     30|	idp->id_type = idb.id_type;
  783|       |
  784|     30|	return (0);
  785|     41|}
ikev2_validate_cert:
  790|    594|{
  791|    594|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  792|       |
  793|    594|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (793:6): [True: 45, False: 549]
  ------------------
  794|     45|		log_debug("%s: malformed payload: too short for header "
  795|     45|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  796|     45|		return (-1);
  797|     45|	}
  798|    549|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  799|       |
  800|    549|	return (0);
  801|    594|}
ikev2_pld_cert:
  806|    594|{
  807|    594|	struct ikev2_cert		 cert;
  808|    594|	uint8_t				*buf;
  809|    594|	size_t				 len;
  810|    594|	struct iked_id			*certid;
  811|    594|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  812|    594|	const struct iked_sa		*sa = msg->msg_sa;
  813|       |
  814|    594|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (814:6): [True: 45, False: 549]
  ------------------
  815|     45|		return (-1);
  816|    549|	offset += sizeof(cert);
  817|       |
  818|    549|	buf = msgbuf + offset;
  819|    549|	len = left - sizeof(cert);
  820|       |
  821|    549|	log_debug("%s: type %s length %zu",
  822|    549|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  823|       |
  824|    549|	print_hex(buf, 0, len);
  825|       |
  826|    549|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (826:6): [True: 447, False: 102]
  ------------------
  827|    447|		return (0);
  828|       |
  829|    102|	certid = &msg->msg_parent->msg_cert;
  830|    102|	if (certid->id_type) {
  ------------------
  |  Branch (830:6): [True: 68, False: 34]
  ------------------
  831|     68|		log_debug("%s: multiple cert payloads, ignoring",
  832|     68|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1103|     68|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1102|     68|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  833|     68|		return (0);
  834|     68|	}
  835|       |
  836|     34|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (836:6): [True: 0, False: 34]
  ------------------
  837|      0|		log_debug("%s: failed to save cert", __func__);
  838|      0|		return (-1);
  839|      0|	}
  840|     34|	certid->id_type = cert.cert_type;
  841|     34|	certid->id_offset = 0;
  842|       |
  843|     34|	return (0);
  844|     34|}
ikev2_validate_certreq:
  849|  6.22k|{
  850|  6.22k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  851|       |
  852|  6.22k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (852:6): [True: 1.45k, False: 4.76k]
  ------------------
  853|  1.45k|		log_debug("%s: malformed payload: too short for header "
  854|  1.45k|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  855|  1.45k|		return (-1);
  856|  1.45k|	}
  857|  4.76k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  858|       |
  859|  4.76k|	return (0);
  860|  6.22k|}
ikev2_pld_certreq:
  865|  6.22k|{
  866|  6.22k|	struct ikev2_cert		 cert;
  867|  6.22k|	struct iked_certreq		*cr;
  868|  6.22k|	uint8_t				*buf;
  869|  6.22k|	ssize_t				 len;
  870|  6.22k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  871|       |
  872|  6.22k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (872:6): [True: 1.45k, False: 4.76k]
  ------------------
  873|  1.45k|		return (-1);
  874|  4.76k|	offset += sizeof(cert);
  875|       |
  876|  4.76k|	buf = msgbuf + offset;
  877|  4.76k|	len = left - sizeof(cert);
  878|       |
  879|  4.76k|	log_debug("%s: type %s length %zd",
  880|  4.76k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  881|       |
  882|  4.76k|	print_hex(buf, 0, len);
  883|       |
  884|  4.76k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (884:6): [True: 4.24k, False: 523]
  ------------------
  885|  4.24k|		return (0);
  886|       |
  887|    523|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|    523|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (887:6): [True: 129, False: 394]
  ------------------
  888|    129|		if (len == 0) {
  ------------------
  |  Branch (888:7): [True: 115, False: 14]
  ------------------
  889|    115|			log_info("%s: invalid length 0", __func__);
  890|    115|			return (0);
  891|    115|		}
  892|     14|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (892:7): [True: 9, False: 5]
  ------------------
  893|      9|			log_info("%s: invalid certificate request",
  894|      9|			    __func__);
  895|      9|			return (-1);
  896|      9|		}
  897|     14|	}
  898|       |
  899|    399|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (899:6): [True: 0, False: 399]
  ------------------
  900|      0|		log_info("%s: failed to allocate certreq.", __func__);
  901|      0|		return (-1);
  902|      0|	}
  903|    399|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (903:6): [True: 0, False: 399]
  ------------------
  904|      0|		log_info("%s: failed to allocate buffer.", __func__);
  905|      0|		free(cr);
  906|      0|		return (-1);
  907|      0|	}
  908|    399|	cr->cr_type = cert.cert_type;
  909|    399|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|    399|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|    399|	(elm)->field.sqe_next = NULL;					\
  |  |  298|    399|	*(head)->sqh_last = (elm);					\
  |  |  299|    399|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|    399|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  910|       |
  911|    399|	return (0);
  912|    399|}
ikev2_validate_auth:
  917|  5.65k|{
  918|  5.65k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  919|       |
  920|  5.65k|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (920:6): [True: 1.01k, False: 4.64k]
  ------------------
  921|  1.01k|		log_debug("%s: malformed payload: too short for header "
  922|  1.01k|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  923|  1.01k|		return (-1);
  924|  1.01k|	}
  925|  4.64k|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  926|       |
  927|  4.64k|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (927:6): [True: 2.66k, False: 1.98k]
  ------------------
  928|  2.66k|		log_info("%s: malformed payload: invalid auth method",
  929|  2.66k|		    __func__);
  930|  2.66k|		return (-1);
  931|  2.66k|	}
  932|       |
  933|  1.98k|	return (0);
  934|  4.64k|}
ikev2_pld_auth:
  939|  5.65k|{
  940|  5.65k|	struct ikev2_auth		 auth;
  941|  5.65k|	struct iked_id			*idp;
  942|  5.65k|	uint8_t				*buf;
  943|  5.65k|	size_t				 len;
  944|  5.65k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  945|       |
  946|  5.65k|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (946:6): [True: 3.67k, False: 1.98k]
  ------------------
  947|  3.67k|		return (-1);
  948|  1.98k|	offset += sizeof(auth);
  949|       |
  950|  1.98k|	buf = msgbuf + offset;
  951|  1.98k|	len = left - sizeof(auth);
  952|       |
  953|  1.98k|	log_debug("%s: method %s length %zu",
  954|  1.98k|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  955|       |
  956|  1.98k|	print_hex(buf, 0, len);
  957|       |
  958|  1.98k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (958:6): [True: 1.96k, False: 14]
  ------------------
  959|  1.96k|		return (0);
  960|       |
  961|     14|	idp = &msg->msg_parent->msg_auth;
  962|     14|	if (idp->id_type) {
  ------------------
  |  Branch (962:6): [True: 1, False: 13]
  ------------------
  963|      1|		log_debug("%s: duplicate auth payload", __func__);
  964|      1|		return (-1);
  965|      1|	}
  966|       |
  967|     13|	ibuf_free(idp->id_buf);
  968|     13|	idp->id_type = auth.auth_method;
  969|     13|	idp->id_offset = 0;
  970|     13|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (970:6): [True: 0, False: 13]
  ------------------
  971|      0|		return (-1);
  972|       |
  973|     13|	return (0);
  974|     13|}
ikev2_pld_nonce:
  979|    159|{
  980|    159|	size_t		 len;
  981|    159|	uint8_t		*buf;
  982|    159|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  983|       |
  984|    159|	buf = msgbuf + offset;
  985|    159|	len = left;
  986|       |
  987|    159|	if (len == 0) {
  ------------------
  |  Branch (987:6): [True: 52, False: 107]
  ------------------
  988|     52|		log_debug("%s: malformed payload: no NONCE given", __func__);
  989|     52|		return (-1);
  990|     52|	}
  991|       |
  992|    107|	print_hex(buf, 0, len);
  993|       |
  994|    107|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (994:6): [True: 30, False: 77]
  ------------------
  995|     30|		if (ibuf_length(msg->msg_parent->msg_nonce)) {
  ------------------
  |  Branch (995:7): [True: 14, False: 16]
  ------------------
  996|     14|			log_info("%s: duplicate NONCE payload", __func__);
  997|     14|			return (-1);
  998|     14|		}
  999|     16|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (999:7): [True: 0, False: 16]
  ------------------
 1000|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1001|      0|			return (-1);
 1002|      0|		}
 1003|     16|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1004|     16|	}
 1005|       |
 1006|     93|	return (0);
 1007|    107|}
ikev2_validate_notify:
 1012|  3.54k|{
 1013|  3.54k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1014|       |
 1015|  3.54k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1015:6): [True: 1.77k, False: 1.76k]
  ------------------
 1016|  1.77k|		log_debug("%s: malformed payload: too short for header "
 1017|  1.77k|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1018|  1.77k|		return (-1);
 1019|  1.77k|	}
 1020|  1.76k|	memcpy(n, msgbuf + offset, sizeof(*n));
 1021|       |
 1022|  1.76k|	return (0);
 1023|  3.54k|}
ikev2_pld_notify:
 1028|  3.54k|{
 1029|  3.54k|	struct ikev2_notify	 n;
 1030|  3.54k|	const struct iked_sa	*sa = msg->msg_sa;
 1031|  3.54k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1032|  3.54k|	uint32_t		 spi32;
 1033|  3.54k|	uint64_t		 spi64;
 1034|  3.54k|	struct iked_spi		*rekey;
 1035|  3.54k|	uint16_t		 type;
 1036|  3.54k|	uint16_t		 signature_hash;
 1037|       |
 1038|  3.54k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1038:6): [True: 1.77k, False: 1.76k]
  ------------------
 1039|  1.77k|		return (-1);
 1040|  1.76k|	type = betoh16(n.n_type);
 1041|       |
 1042|  1.76k|	log_debug("%s: protoid %s spisize %d type %s",
 1043|  1.76k|	    __func__,
 1044|  1.76k|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1045|  1.76k|	    print_map(type, ikev2_n_map));
 1046|       |
 1047|  1.76k|	left -= sizeof(n);
 1048|  1.76k|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1048:6): [True: 0, False: 1.76k]
  ------------------
 1049|      0|		return (-1);
 1050|       |
 1051|  1.76k|	print_hex(buf, 0, left);
 1052|       |
 1053|  1.76k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1053:6): [True: 942, False: 825]
  ------------------
 1054|    942|		return (0);
 1055|       |
 1056|    825|	switch (type) {
  ------------------
  |  Branch (1056:10): [True: 518, False: 307]
  ------------------
 1057|     18|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|     18|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1057:2): [True: 18, False: 807]
  ------------------
 1058|     30|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|     30|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1058:2): [True: 12, False: 813]
  ------------------
 1059|     30|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1059:7): [True: 7, False: 23]
  ------------------
 1060|      7|			log_debug("%s: malformed payload: hash size mismatch"
 1061|      7|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1062|      7|			return (-1);
 1063|      7|		}
 1064|     23|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1064:7): [True: 0, False: 23]
  ------------------
 1065|     23|		    ikev2_msg_frompeer(msg)) == -1)
 1066|      0|			return (-1);
 1067|     23|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1067:7): [True: 23, False: 0]
  ------------------
 1068|     23|			log_debug("%s: %s detected NAT", __func__,
 1069|     23|			    print_map(type, ikev2_n_map));
 1070|     23|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|     23|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1070:8): [True: 13, False: 10]
  ------------------
 1071|     13|				msg->msg_parent->msg_nat_detected
 1072|     13|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  685|     13|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1073|     10|			else
 1074|     10|				msg->msg_parent->msg_nat_detected
 1075|     10|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  686|     10|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1076|     23|		}
 1077|     23|		print_hex(md, 0, sizeof(md));
 1078|       |		/* remember for MOBIKE */
 1079|     23|		msg->msg_parent->msg_natt_rcvd = 1;
 1080|     23|		break;
 1081|      2|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      2|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1081:2): [True: 2, False: 823]
  ------------------
 1082|      2|		if (!msg->msg_e) {
  ------------------
  |  Branch (1082:7): [True: 0, False: 2]
  ------------------
 1083|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1084|      0|			    __func__);
 1085|      0|			return (-1);
 1086|      0|		}
 1087|       |		/*
 1088|       |		 * If we are the responder, then we only accept
 1089|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1090|       |		 * If we are the initiator, the peer cannot be authenticated.
 1091|       |		 */
 1092|      2|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1092:7): [True: 2, False: 0]
  ------------------
 1093|      2|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      2|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1093:8): [True: 2, False: 0]
  ------------------
 1094|      2|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1095|      2|				    " from unauthenticated initiator",
 1096|      2|				    __func__);
 1097|      2|				return (-1);
 1098|      2|			}
 1099|      2|		} else {
 1100|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1100:8): [True: 0, False: 0]
  ------------------
 1101|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1102|      0|				    " from authenticated responder",
 1103|      0|				    __func__);
 1104|      0|				return (-1);
 1105|      0|			}
 1106|      0|		}
 1107|      0|		msg->msg_parent->msg_flags
 1108|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  693|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1109|      0|		break;
 1110|      5|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|      5|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1110:2): [True: 5, False: 820]
  ------------------
 1111|      5|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|      5|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1111:7): [True: 0, False: 5]
  ------------------
 1112|      5|		    !msg->msg_e) {
  ------------------
  |  Branch (1112:7): [True: 0, False: 0]
  ------------------
 1113|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1114|      0|			    __func__);
 1115|      0|			return (-1);
 1116|      0|		}
 1117|      5|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1117:7): [True: 3, False: 2]
  ------------------
 1118|      3|			log_debug("%s: malformed payload: group size mismatch"
 1119|      3|			    " (%zu != %zu)", __func__, left,
 1120|      3|			    sizeof(msg->msg_parent->msg_group));
 1121|      3|			return (-1);
 1122|      3|		}
 1123|      2|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1124|      2|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  694|      2|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1125|      2|		break;
 1126|     66|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|     66|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1126:2): [True: 66, False: 759]
  ------------------
 1127|     66|		if (!msg->msg_e) {
  ------------------
  |  Branch (1127:7): [True: 0, False: 66]
  ------------------
 1128|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1129|      0|			    __func__);
 1130|      0|			return (-1);
 1131|      0|		}
 1132|     66|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  692|     66|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1133|     66|		break;
 1134|      5|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|      5|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1134:2): [True: 5, False: 820]
  ------------------
 1135|      5|		if (!msg->msg_e) {
  ------------------
  |  Branch (1135:7): [True: 0, False: 5]
  ------------------
 1136|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1137|      0|			return (-1);
 1138|      0|		}
 1139|      5|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1139:7): [True: 2, False: 3]
  ------------------
 1140|      2|			log_debug("%s: malformed notification", __func__);
 1141|      2|			return (-1);
 1142|      2|		}
 1143|      3|		rekey = &msg->msg_parent->msg_rekey;
 1144|      3|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1144:7): [True: 0, False: 3]
  ------------------
 1145|      0|			log_debug("%s: rekeying of multiple SAs not supported",
 1146|      0|			    __func__);
 1147|      0|			return (-1);
 1148|      0|		}
 1149|      3|		switch (n.n_spisize) {
 1150|      1|		case 4:
  ------------------
  |  Branch (1150:3): [True: 1, False: 2]
  ------------------
 1151|      1|			memcpy(&spi32, buf, left);
 1152|      1|			rekey->spi = betoh32(spi32);
 1153|      1|			break;
 1154|      0|		case 8:
  ------------------
  |  Branch (1154:3): [True: 0, False: 3]
  ------------------
 1155|      0|			memcpy(&spi64, buf, left);
 1156|      0|			rekey->spi = betoh64(spi64);
 1157|      0|			break;
 1158|      2|		default:
  ------------------
  |  Branch (1158:3): [True: 2, False: 1]
  ------------------
 1159|      2|			log_debug("%s: invalid spi size %d", __func__,
 1160|      2|			    n.n_spisize);
 1161|      2|			return (-1);
 1162|      3|		}
 1163|      1|		rekey->spi_size = n.n_spisize;
 1164|      1|		rekey->spi_protoid = n.n_protoid;
 1165|       |
 1166|      1|		log_debug("%s: rekey %s spi %s", __func__,
 1167|      1|		    print_map(n.n_protoid, ikev2_saproto_map),
 1168|      1|		    print_spi(rekey->spi, n.n_spisize));
 1169|      1|		break;
 1170|     23|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|     23|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1170:2): [True: 23, False: 802]
  ------------------
 1171|     23|		if (!msg->msg_e) {
  ------------------
  |  Branch (1171:7): [True: 0, False: 23]
  ------------------
 1172|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1173|      0|			    __func__);
 1174|      0|			return (-1);
 1175|      0|		}
 1176|     23|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  697|     23|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1177|     23|		break;
 1178|     14|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|     14|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1178:2): [True: 14, False: 811]
  ------------------
 1179|     14|		if (!msg->msg_e) {
  ------------------
  |  Branch (1179:7): [True: 0, False: 14]
  ------------------
 1180|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1181|      0|			    __func__);
 1182|      0|			return (-1);
 1183|      0|		}
 1184|     14|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1184:7): [True: 4, False: 10]
  ------------------
 1185|     14|		    sizeof(msg->msg_parent->msg_transform)) {
 1186|      4|			log_debug("%s: ignoring malformed ipcomp notification",
 1187|      4|			    __func__);
 1188|      4|			return (0);
 1189|      4|		}
 1190|     10|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1191|     10|		    sizeof(msg->msg_parent->msg_cpi));
 1192|     10|		memcpy(&msg->msg_parent->msg_transform,
 1193|     10|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1194|     10|		    sizeof(msg->msg_parent->msg_transform));
 1195|       |
 1196|     10|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1197|     10|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1197:7): [True: 0, False: 10]
  ------------------
 1198|     10|		    betoh16(msg->msg_parent->msg_cpi),
 1199|     10|		    print_map(msg->msg_parent->msg_transform,
 1200|     10|		    ikev2_ipcomp_map), left);
 1201|       |
 1202|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  695|     10|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1203|     10|		break;
 1204|      9|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|      9|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1204:2): [True: 9, False: 816]
  ------------------
 1205|      9|		if (!msg->msg_e) {
  ------------------
  |  Branch (1205:7): [True: 0, False: 9]
  ------------------
 1206|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1207|      0|			    __func__);
 1208|      0|			return (-1);
 1209|      0|		}
 1210|      9|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  691|      9|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1211|      9|		break;
 1212|      4|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|      4|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1212:2): [True: 4, False: 821]
  ------------------
 1213|      4|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  698|      4|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1214|      4|		break;
 1215|     21|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|     21|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1215:2): [True: 21, False: 804]
  ------------------
 1216|     21|		if (!msg->msg_e) {
  ------------------
  |  Branch (1216:7): [True: 0, False: 21]
  ------------------
 1217|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1218|      0|			    __func__);
 1219|      0|			return (-1);
 1220|      0|		}
 1221|     21|		if (left != 0) {
  ------------------
  |  Branch (1221:7): [True: 20, False: 1]
  ------------------
 1222|     20|			log_debug("%s: ignoring malformed mobike"
 1223|     20|			    " notification: %zu", __func__, left);
 1224|     20|			return (0);
 1225|     20|		}
 1226|      1|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  689|      1|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1227|      1|		break;
 1228|     16|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|     16|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1228:2): [True: 16, False: 809]
  ------------------
 1229|     16|		if (!msg->msg_e) {
  ------------------
  |  Branch (1229:7): [True: 0, False: 16]
  ------------------
 1230|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1231|      0|			    __func__);
 1232|      0|			return (-1);
 1233|      0|		}
 1234|     16|		if (left != 0) {
  ------------------
  |  Branch (1234:7): [True: 15, False: 1]
  ------------------
 1235|     15|			log_debug("%s: ignoring malformed transport mode"
 1236|     15|			    " notification: %zu", __func__, left);
 1237|     15|			return (0);
 1238|     15|		}
 1239|      1|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1239:7): [True: 0, False: 1]
  ------------------
 1240|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1240:8): [True: 0, False: 0]
  ------------------
 1241|      0|				log_debug("%s: ignoring transport mode"
 1242|      0|				    " notification (policy)", __func__);
 1243|      0|				return (0);
 1244|      0|			}
 1245|      0|		}
 1246|      1|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  696|      1|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1247|      1|		break;
 1248|     53|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|     53|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1248:2): [True: 53, False: 772]
  ------------------
 1249|     53|		if (!msg->msg_e) {
  ------------------
  |  Branch (1249:7): [True: 0, False: 53]
  ------------------
 1250|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1251|      0|			    __func__);
 1252|      0|			return (-1);
 1253|      0|		}
 1254|     53|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1254:7): [True: 53, False: 0]
  ------------------
 1255|     53|			log_debug("%s: ignoring update sa addresses"
 1256|     53|			    " notification w/o mobike: %zu", __func__, left);
 1257|     53|			return (0);
 1258|     53|		}
 1259|      0|		if (left != 0) {
  ------------------
  |  Branch (1259:7): [True: 0, False: 0]
  ------------------
 1260|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1261|      0|			    " notification: %zu", __func__, left);
 1262|      0|			return (0);
 1263|      0|		}
 1264|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1265|      0|		break;
 1266|     43|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|     43|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1266:2): [True: 43, False: 782]
  ------------------
 1267|     43|		if (!msg->msg_e) {
  ------------------
  |  Branch (1267:7): [True: 0, False: 43]
  ------------------
 1268|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1269|      0|			    __func__);
 1270|      0|			return (-1);
 1271|      0|		}
 1272|     43|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1272:7): [True: 43, False: 0]
  ------------------
 1273|     43|			log_debug("%s: ignoring cookie2 notification"
 1274|     43|			    " w/o mobike: %zu", __func__, left);
 1275|     43|			return (0);
 1276|     43|		}
 1277|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1277:7): [True: 0, False: 0]
  |  Branch (1277:34): [True: 0, False: 0]
  ------------------
 1278|      0|			log_debug("%s: ignoring malformed cookie2"
 1279|      0|			    " notification: %zu", __func__, left);
 1280|      0|			return (0);
 1281|      0|		}
 1282|      0|		ibuf_free(msg->msg_cookie2);	/* should not happen */
 1283|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1283:7): [True: 0, False: 0]
  ------------------
 1284|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1285|      0|			return (-1);
 1286|      0|		}
 1287|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1288|      0|		break;
 1289|      1|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      1|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1289:2): [True: 1, False: 824]
  ------------------
 1290|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1290:7): [True: 1, False: 0]
  ------------------
 1291|      1|			log_debug("%s: N_COOKIE encrypted",
 1292|      1|			    __func__);
 1293|      1|			return (-1);
 1294|      1|		}
 1295|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1295:7): [True: 0, False: 0]
  |  Branch (1295:33): [True: 0, False: 0]
  ------------------
 1296|      0|			log_debug("%s: ignoring malformed cookie"
 1297|      0|			    " notification: %zu", __func__, left);
 1298|      0|			return (0);
 1299|      0|		}
 1300|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1301|      0|		print_hex(buf, 0, left);
 1302|       |
 1303|      0|		ibuf_free(msg->msg_cookie);
 1304|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1304:7): [True: 0, False: 0]
  ------------------
 1305|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1306|      0|			return (-1);
 1307|      0|		}
 1308|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1309|      0|		break;
 1310|     13|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|     13|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1310:2): [True: 13, False: 812]
  ------------------
 1311|     13|		if (msg->msg_e) {
  ------------------
  |  Branch (1311:7): [True: 13, False: 0]
  ------------------
 1312|     13|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1313|     13|			    __func__);
 1314|     13|			return (-1);
 1315|     13|		}
 1316|      0|		if (left != 0) {
  ------------------
  |  Branch (1316:7): [True: 0, False: 0]
  ------------------
 1317|      0|			log_debug("%s: ignoring malformed fragmentation"
 1318|      0|			    " notification: %zu", __func__, left);
 1319|      0|			return (0);
 1320|      0|		}
 1321|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  688|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1322|      0|		break;
 1323|      2|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      2|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1323:2): [True: 2, False: 823]
  ------------------
 1324|      2|		if (msg->msg_e) {
  ------------------
  |  Branch (1324:7): [True: 2, False: 0]
  ------------------
 1325|      2|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1326|      2|			    __func__);
 1327|      2|			return (-1);
 1328|      2|		}
 1329|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1329:7): [True: 0, False: 0]
  ------------------
 1330|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1331|      0|			    __func__);
 1332|      0|			return (-1);
 1333|      0|		}
 1334|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1334:7): [True: 0, False: 0]
  ------------------
 1335|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1336|      0|			    "duplicate notify", __func__);
 1337|      0|			return (0);
 1338|      0|		}
 1339|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1339:7): [True: 0, False: 0]
  ------------------
 1340|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1340:7): [True: 0, False: 0]
  ------------------
 1341|      0|			log_debug("%s: malformed signature hash notification"
 1342|      0|			    "(%zu bytes)", __func__, left);
 1343|      0|			return (0);
 1344|      0|		}
 1345|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1345:10): [True: 0, False: 0]
  ------------------
 1346|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1347|      0|			signature_hash = betoh16(signature_hash);
 1348|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1349|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1350|      0|			    signature_hash);
 1351|      0|			left -= sizeof(signature_hash);
 1352|      0|			buf += sizeof(signature_hash);
 1353|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  498|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1353:8): [True: 0, False: 0]
  ------------------
 1354|      0|				msg->msg_parent->msg_flags
 1355|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  690|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1356|      0|		}
 1357|      0|		break;
 1358|    825|	}
 1359|       |
 1360|    658|	return (0);
 1361|    825|}
ikev2_validate_delete:
 1366|  2.28k|{
 1367|  2.28k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1368|       |
 1369|  2.28k|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1369:6): [True: 365, False: 1.91k]
  ------------------
 1370|    365|		log_debug("%s: malformed payload: too short for header "
 1371|    365|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1372|    365|		return (-1);
 1373|    365|	}
 1374|  1.91k|	memcpy(del, msgbuf + offset, sizeof(*del));
 1375|       |
 1376|  1.91k|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1376:6): [True: 25, False: 1.89k]
  ------------------
 1377|     25|		log_info("%s: malformed payload: invalid protoid", __func__);
 1378|     25|		return (-1);
 1379|     25|	}
 1380|       |
 1381|  1.89k|	return (0);
 1382|  1.91k|}
ikev2_pld_delete:
 1387|  2.28k|{
 1388|  2.28k|	struct ikev2_delete	 del;
 1389|  2.28k|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1390|  2.28k|	size_t			 cnt, sz, len;
 1391|       |
 1392|  2.28k|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1392:6): [True: 390, False: 1.89k]
  ------------------
 1393|    390|		return (-1);
 1394|       |
 1395|       |	/* Skip if it's a response, then we don't have to deal with it */
 1396|  1.89k|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1396:6): [True: 95, False: 1.79k]
  ------------------
 1397|  1.89k|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1397:6): [True: 0, False: 95]
  ------------------
 1398|      0|		return (0);
 1399|       |
 1400|  1.89k|	cnt = betoh16(del.del_nspi);
 1401|  1.89k|	sz = del.del_spisize;
 1402|       |
 1403|  1.89k|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1404|  1.89k|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1405|  1.89k|	    sz, cnt);
 1406|       |
 1407|  1.89k|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1407:6): [True: 1.77k, False: 117]
  ------------------
 1408|  1.77k|		log_debug("%s: duplicate delete payload", __func__);
 1409|  1.77k|		return (0);
 1410|  1.77k|	}
 1411|       |
 1412|    117|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1413|    117|	msg->msg_parent->msg_del_cnt = cnt;
 1414|    117|	msg->msg_parent->msg_del_spisize = sz;
 1415|       |
 1416|    117|	buf = msgbuf + offset + sizeof(del);
 1417|    117|	len = left - sizeof(del);
 1418|    117|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1418:6): [True: 5, False: 112]
  |  Branch (1418:18): [True: 86, False: 26]
  |  Branch (1418:29): [True: 20, False: 6]
  ------------------
 1419|    111|		return (0);
 1420|       |
 1421|      6|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1421:6): [True: 5, False: 1]
  ------------------
 1422|      5|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1423|      5|		    __func__, len, sz, cnt);
 1424|      5|		return (-1);
 1425|      5|	}
 1426|       |
 1427|      1|	print_hex(buf, 0, len);
 1428|       |
 1429|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1430|       |
 1431|      1|	return (0);
 1432|      6|}
ikev2_validate_tss:
 1437|  3.04k|{
 1438|  3.04k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1439|       |
 1440|  3.04k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1440:6): [True: 235, False: 2.80k]
  ------------------
 1441|    235|		log_debug("%s: malformed payload: too short for header "
 1442|    235|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1443|    235|		return (-1);
 1444|    235|	}
 1445|  2.80k|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1446|       |
 1447|  2.80k|	return (0);
 1448|  3.04k|}
ikev2_pld_tss:
 1453|  3.04k|{
 1454|  3.04k|	struct ikev2_tsp		 tsp;
 1455|  3.04k|	struct ikev2_ts			 ts;
 1456|  3.04k|	size_t				 ts_len, i;
 1457|       |
 1458|  3.04k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1458:6): [True: 235, False: 2.80k]
  ------------------
 1459|    235|		return (-1);
 1460|       |
 1461|  2.80k|	offset += sizeof(tsp);
 1462|  2.80k|	left -= sizeof(tsp);
 1463|       |
 1464|  2.80k|	log_debug("%s: count %d length %zu", __func__,
 1465|  2.80k|	    tsp.tsp_count, left);
 1466|       |
 1467|  4.60k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1467:14): [True: 3.30k, False: 1.29k]
  ------------------
 1468|  3.30k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1468:7): [True: 1.27k, False: 2.03k]
  ------------------
 1469|  1.27k|			return (-1);
 1470|       |
 1471|  2.03k|		log_debug("%s: type %s protoid %u length %d "
 1472|  2.03k|		    "startport %u endport %u", __func__,
 1473|  2.03k|		    print_map(ts.ts_type, ikev2_ts_map),
 1474|  2.03k|		    ts.ts_protoid, betoh16(ts.ts_length),
 1475|  2.03k|		    betoh16(ts.ts_startport),
 1476|  2.03k|		    betoh16(ts.ts_endport));
 1477|       |
 1478|  2.03k|		offset += sizeof(ts);
 1479|  2.03k|		left -= sizeof(ts);
 1480|       |
 1481|  2.03k|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1482|  2.03k|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1482:7): [True: 240, False: 1.79k]
  ------------------
 1483|    240|			return (-1);
 1484|       |
 1485|  1.79k|		offset += ts_len;
 1486|  1.79k|		left -= ts_len;
 1487|  1.79k|	}
 1488|       |
 1489|  1.29k|	return (0);
 1490|  2.80k|}
ikev2_validate_ts:
 1495|  3.30k|{
 1496|  3.30k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1497|  3.30k|	size_t		 ts_length;
 1498|       |
 1499|  3.30k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1499:6): [True: 1.01k, False: 2.29k]
  ------------------
 1500|  1.01k|		log_debug("%s: malformed payload: too short for header "
 1501|  1.01k|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1502|  1.01k|		return (-1);
 1503|  1.01k|	}
 1504|  2.29k|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1505|       |
 1506|  2.29k|	ts_length = betoh16(ts->ts_length);
 1507|  2.29k|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1507:6): [True: 110, False: 2.18k]
  ------------------
 1508|    110|		log_debug("%s: malformed payload: shorter than minimum header "
 1509|    110|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1510|    110|		return (-1);
 1511|    110|	}
 1512|  2.18k|	if (left < ts_length) {
  ------------------
  |  Branch (1512:6): [True: 151, False: 2.03k]
  ------------------
 1513|    151|		log_debug("%s: malformed payload: too long for payload size "
 1514|    151|		    "(%zu < %zu)", __func__, left, ts_length);
 1515|    151|		return (-1);
 1516|    151|	}
 1517|       |
 1518|  2.03k|	return (0);
 1519|  2.18k|}
ikev2_pld_ts:
 1524|  2.03k|{
 1525|  2.03k|	struct sockaddr_in		 start4, end4;
 1526|  2.03k|	struct sockaddr_in6		 start6, end6;
 1527|  2.03k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
 1528|  2.03k|	uint8_t				*ptr;
 1529|       |
 1530|  2.03k|	ptr = msgbuf + offset;
 1531|       |
 1532|  2.03k|	switch (type) {
 1533|    132|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  459|    132|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1533:2): [True: 132, False: 1.90k]
  ------------------
 1534|    132|		if (left < 2 * 4) {
  ------------------
  |  Branch (1534:7): [True: 18, False: 114]
  ------------------
 1535|     18|			log_debug("%s: malformed payload: too short "
 1536|     18|			    "for ipv4 addr range (%zu < %u)",
 1537|     18|			    __func__, left, 2 * 4);
 1538|     18|			return (-1);
 1539|     18|		}
 1540|       |
 1541|    114|		bzero(&start4, sizeof(start4));
 1542|    114|		start4.sin_family = AF_INET;
 1543|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1544|       |		start4.sin_len = sizeof(start4);
 1545|       |#endif
 1546|    114|		memcpy(&start4.sin_addr.s_addr, ptr, 4);
 1547|    114|		ptr += 4;
 1548|    114|		left -= 4;
 1549|       |
 1550|    114|		bzero(&end4, sizeof(end4));
 1551|    114|		end4.sin_family = AF_INET;
 1552|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1553|       |		end4.sin_len = sizeof(end4);
 1554|       |#endif
 1555|    114|		memcpy(&end4.sin_addr.s_addr, ptr, 4);
 1556|    114|		left -= 4;
 1557|       |
 1558|    114|		log_debug("%s: start %s end %s", __func__,
 1559|    114|		    print_addr(&start4), print_addr(&end4));
 1560|    114|		break;
 1561|    212|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  460|    212|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1561:2): [True: 212, False: 1.82k]
  ------------------
 1562|    212|		if (left < 2 * 16) {
  ------------------
  |  Branch (1562:7): [True: 28, False: 184]
  ------------------
 1563|     28|			log_debug("%s: malformed payload: too short "
 1564|     28|			    "for ipv6 addr range (%zu < %u)",
 1565|     28|			    __func__, left, 2 * 16);
 1566|     28|			return (-1);
 1567|     28|		}
 1568|    184|		bzero(&start6, sizeof(start6));
 1569|    184|		start6.sin6_family = AF_INET6;
 1570|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1571|       |		start6.sin6_len = sizeof(start6);
 1572|       |#endif
 1573|    184|		memcpy(&start6.sin6_addr, ptr, 16);
 1574|    184|		ptr += 16;
 1575|    184|		left -= 16;
 1576|       |
 1577|    184|		bzero(&end6, sizeof(end6));
 1578|    184|		end6.sin6_family = AF_INET6;
 1579|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1580|       |		end6.sin6_len = sizeof(end6);
 1581|       |#endif
 1582|    184|		memcpy(&end6.sin6_addr, ptr, 16);
 1583|    184|		left -= 16;
 1584|       |
 1585|    184|		log_debug("%s: start %s end %s", __func__,
 1586|    184|		    print_addr(&start6), print_addr(&end6));
 1587|    184|		break;
 1588|  1.69k|	default:
  ------------------
  |  Branch (1588:2): [True: 1.69k, False: 344]
  ------------------
 1589|  1.69k|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1590|  1.69k|		return (0);
 1591|  2.03k|	}
 1592|       |
 1593|    298|	if (left > 0) {
  ------------------
  |  Branch (1593:6): [True: 194, False: 104]
  ------------------
 1594|    194|		log_debug("%s: malformed payload: left (%zu) > 0",
 1595|    194|		    __func__, left);
 1596|    194|		return (-1);
 1597|    194|	}
 1598|       |
 1599|    104|	return (0);
 1600|    298|}
ikev2_validate_cp:
 1855|  4.22k|{
 1856|  4.22k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1857|       |
 1858|  4.22k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1858:6): [True: 1.61k, False: 2.61k]
  ------------------
 1859|  1.61k|		log_debug("%s: malformed payload: too short for header "
 1860|  1.61k|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1861|  1.61k|		return (-1);
 1862|  1.61k|	}
 1863|  2.61k|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1864|       |
 1865|  2.61k|	return (0);
 1866|  4.22k|}
ikev2_pld_cp:
 1871|  4.22k|{
 1872|  4.22k|	struct ikev2_cp		 cp;
 1873|  4.22k|	struct ikev2_cfg	*cfg;
 1874|  4.22k|	struct iked_addr	*addr;
 1875|  4.22k|	struct sockaddr_in	*in4;
 1876|  4.22k|	struct sockaddr_in6	*in6;
 1877|  4.22k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
 1878|  4.22k|	uint8_t			*ptr;
 1879|  4.22k|	size_t			 len;
 1880|  4.22k|	int			 cfg_type;
 1881|       |
 1882|  4.22k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1882:6): [True: 1.61k, False: 2.61k]
  ------------------
 1883|  1.61k|		return (-1);
 1884|       |
 1885|  2.61k|	ptr = msgbuf + offset + sizeof(cp);
 1886|  2.61k|	len = left - sizeof(cp);
 1887|       |
 1888|  2.61k|	log_debug("%s: type %s length %zu",
 1889|  2.61k|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1890|  2.61k|	print_hex(ptr, 0, len);
 1891|       |
 1892|  6.31k|	while (len > 0) {
  ------------------
  |  Branch (1892:9): [True: 4.29k, False: 2.02k]
  ------------------
 1893|  4.29k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1893:7): [True: 250, False: 4.04k]
  ------------------
 1894|    250|			log_debug("%s: malformed payload: too short for cfg "
 1895|    250|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1896|    250|			return (-1);
 1897|    250|		}
 1898|  4.04k|		cfg = (struct ikev2_cfg *)ptr;
 1899|       |
 1900|  4.04k|		log_debug("%s: %s 0x%04x length %d", __func__,
 1901|  4.04k|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1902|  4.04k|		    betoh16(cfg->cfg_type),
 1903|  4.04k|		    betoh16(cfg->cfg_length));
 1904|       |
 1905|  4.04k|		ptr += sizeof(*cfg);
 1906|  4.04k|		len -= sizeof(*cfg);
 1907|       |
 1908|  4.04k|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  Branch (1908:7): [True: 339, False: 3.70k]
  ------------------
 1909|    339|			log_debug("%s: malformed payload: too short for "
 1910|    339|			    "cfg_length (%zu < %u)", __func__, len,
 1911|    339|			    betoh16(cfg->cfg_length));
 1912|    339|			return (-1);
 1913|    339|		}
 1914|       |
 1915|  3.70k|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1916|       |
 1917|  3.70k|		cfg_type = betoh16(cfg->cfg_type);
 1918|  3.70k|		switch (cfg_type) {
  ------------------
  |  Branch (1918:11): [True: 1.30k, False: 2.39k]
  ------------------
 1919|    372|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|    372|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1919:3): [True: 372, False: 3.33k]
  ------------------
 1920|    667|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|    667|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1920:3): [True: 295, False: 3.41k]
  ------------------
 1921|    667|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1921:8): [True: 327, False: 340]
  ------------------
 1922|    327|				break;
 1923|    340|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1923:8): [True: 165, False: 175]
  ------------------
 1924|    165|				break;
 1925|       |			/* XXX multiple-valued */
 1926|    175|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  Branch (1926:8): [True: 2, False: 173]
  ------------------
 1927|      2|				log_debug("%s: malformed payload: too short "
 1928|      2|				    "for ipv4 addr (%u < %u)",
 1929|      2|				    __func__, betoh16(cfg->cfg_length), 4);
 1930|      2|				return (-1);
 1931|      2|			}
 1932|    173|			switch(cfg_type) {
 1933|    140|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|    140|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1933:4): [True: 140, False: 33]
  ------------------
 1934|    140|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1934:9): [True: 90, False: 50]
  ------------------
 1935|     90|					log_debug("%s: address already set", __func__);
 1936|     90|					goto skip;
 1937|     90|				}
 1938|     50|				break;
 1939|     50|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|     33|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1939:4): [True: 33, False: 140]
  ------------------
 1940|     33|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1940:9): [True: 19, False: 14]
  ------------------
 1941|     19|					log_debug("%s: dns already set", __func__);
 1942|     19|					goto skip;
 1943|     19|				}
 1944|     14|				break;
 1945|     14|			default:
  ------------------
  |  Branch (1945:4): [True: 0, False: 173]
  ------------------
 1946|      0|				break;
 1947|    173|			}
 1948|     64|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1948:8): [True: 0, False: 64]
  ------------------
 1949|      0|				log_debug("%s: malloc failed", __func__);
 1950|      0|				break;
 1951|      0|			}
 1952|     64|			addr->addr_af = AF_INET;
 1953|     64|			in4 = (struct sockaddr_in *)&addr->addr;
 1954|     64|			in4->sin_family = AF_INET;
 1955|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1956|       |			in4->sin_len = sizeof(*in4);
 1957|       |#endif
 1958|     64|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1959|     64|			switch(cfg_type) {
 1960|     50|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|     50|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1960:4): [True: 50, False: 14]
  ------------------
 1961|     50|				msg->msg_parent->msg_cp_addr = addr;
 1962|     50|				log_debug("%s: IP4_ADDRESS %s", __func__,
 1963|     50|				    print_addr(&addr->addr));
 1964|     50|				break;
 1965|     14|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|     14|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1965:4): [True: 14, False: 50]
  ------------------
 1966|     14|				msg->msg_parent->msg_cp_dns = addr;
 1967|     14|				log_debug("%s: IP4_DNS %s", __func__,
 1968|     14|				    print_addr(&addr->addr));
 1969|     14|				break;
 1970|      0|			default:
  ------------------
  |  Branch (1970:4): [True: 0, False: 64]
  ------------------
 1971|      0|				log_debug("%s: cfg %s", __func__,
 1972|      0|				    print_addr(&addr->addr));
 1973|      0|				break;
 1974|     64|			}
 1975|     64|			break;
 1976|  1.15k|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|  1.15k|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1976:3): [True: 1.15k, False: 2.54k]
  ------------------
 1977|  1.72k|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|  1.72k|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1977:3): [True: 570, False: 3.13k]
  ------------------
 1978|  1.72k|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1978:8): [True: 1.63k, False: 90]
  ------------------
 1979|  1.63k|				break;
 1980|     90|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1980:8): [True: 54, False: 36]
  ------------------
 1981|     54|				break;
 1982|       |			/* XXX multiple-valued */
 1983|     36|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  Branch (1983:8): [True: 1, False: 35]
  ------------------
 1984|      1|				log_debug("%s: malformed payload: too short "
 1985|      1|				    "for ipv6 addr w/prefixlen (%u < %u)",
 1986|      1|				    __func__, betoh16(cfg->cfg_length), 16);
 1987|      1|				return (-1);
 1988|      1|			}
 1989|     35|			switch(cfg_type) {
  ------------------
  |  Branch (1989:11): [True: 0, False: 35]
  ------------------
 1990|     28|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|     28|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1990:4): [True: 28, False: 7]
  ------------------
 1991|     28|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (1991:9): [True: 15, False: 13]
  ------------------
 1992|     15|					log_debug("%s: address6 already set", __func__);
 1993|     15|					goto skip;
 1994|     15|				}
 1995|     13|				break;
 1996|     13|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      7|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1996:4): [True: 7, False: 28]
  ------------------
 1997|      7|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 1]
  ------------------
 1998|      6|					log_debug("%s: dns already set", __func__);
 1999|      6|					goto skip;
 2000|      6|				}
 2001|      1|				break;
 2002|     35|			}
 2003|     14|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (2003:8): [True: 0, False: 14]
  ------------------
 2004|      0|				log_debug("%s: malloc failed", __func__);
 2005|      0|				break;
 2006|      0|			}
 2007|     14|			addr->addr_af = AF_INET6;
 2008|     14|			in6 = (struct sockaddr_in6 *)&addr->addr;
 2009|     14|			in6->sin6_family = AF_INET6;
 2010|       |#ifdef HAVE_SOCKADDR_SA_LEN
 2011|       |			in6->sin6_len = sizeof(*in6);
 2012|       |#endif
 2013|     14|			memcpy(&in6->sin6_addr, ptr, 16);
 2014|     14|			switch(cfg_type) {
 2015|     13|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|     13|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2015:4): [True: 13, False: 1]
  ------------------
 2016|     13|				msg->msg_parent->msg_cp_addr6 = addr;
 2017|     13|				log_debug("%s: IP6_ADDRESS %s", __func__,
 2018|     13|				    print_addr(&addr->addr));
 2019|     13|				break;
 2020|      1|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      1|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2020:4): [True: 1, False: 13]
  ------------------
 2021|      1|				msg->msg_parent->msg_cp_dns = addr;
 2022|      1|				log_debug("%s: IP6_DNS %s", __func__,
 2023|      1|				    print_addr(&addr->addr));
 2024|      1|				break;
 2025|      0|			default:
  ------------------
  |  Branch (2025:4): [True: 0, False: 14]
  ------------------
 2026|      0|				log_debug("%s: cfg %s/%d", __func__,
 2027|      0|				    print_addr(&addr->addr), ptr[16]);
 2028|      0|				break;
 2029|     14|			}
 2030|     14|			break;
 2031|  3.70k|		}
 2032|       |
 2033|  3.70k| skip:
 2034|  3.70k|		ptr += betoh16(cfg->cfg_length);
 2035|  3.70k|		len -= betoh16(cfg->cfg_length);
 2036|  3.70k|	}
 2037|       |
 2038|  2.02k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2038:6): [True: 1.84k, False: 181]
  ------------------
 2039|  1.84k|		return (0);
 2040|       |
 2041|    181|	msg->msg_parent->msg_cp = cp.cp_type;
 2042|       |
 2043|    181|	return (0);
 2044|  2.02k|}
ikev2_validate_eap:
 2049|  7.42k|{
 2050|  7.42k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2051|       |
 2052|  7.42k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2052:6): [True: 3.29k, False: 4.12k]
  ------------------
 2053|  3.29k|		log_debug("%s: malformed payload: too short for header "
 2054|  3.29k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2055|  3.29k|		return (-1);
 2056|  3.29k|	}
 2057|  4.12k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2058|       |
 2059|  4.12k|	return (0);
 2060|  7.42k|}
ikev2_pld_eap:
 2065|  7.42k|{
 2066|  7.42k|	struct eap_header		 hdr;
 2067|  7.42k|	struct eap_message		*eap = NULL;
 2068|  7.42k|	const struct iked_sa		*sa = msg->msg_sa;
 2069|  7.42k|	size_t				 len;
 2070|       |
 2071|  7.42k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2071:6): [True: 3.29k, False: 4.12k]
  ------------------
 2072|  3.29k|		return (-1);
 2073|  4.12k|	len = betoh16(hdr.eap_length);
 2074|       |
 2075|  4.12k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2075:6): [True: 1.26k, False: 2.86k]
  ------------------
 2076|  1.26k|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1103|  1.26k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1102|  1.26k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2077|  1.26k|		    print_map(hdr.eap_code, eap_code_map),
 2078|  1.26k|		    hdr.eap_id, betoh16(hdr.eap_length));
 2079|  2.86k|	} else {
 2080|       |		/* Now try to get the indicated length */
 2081|  2.86k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2081:7): [True: 1.35k, False: 1.51k]
  ------------------
 2082|  1.35k|			log_debug("%s: invalid EAP length", __func__);
 2083|  1.35k|			return (-1);
 2084|  1.35k|		}
 2085|       |
 2086|  1.51k|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1103|  1.51k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1102|  1.51k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2087|  1.51k|		    print_map(eap->eap_code, eap_code_map),
 2088|  1.51k|		    eap->eap_id, betoh16(eap->eap_length),
 2089|  1.51k|		    print_map(eap->eap_type, eap_type_map));
 2090|       |
 2091|  1.51k|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2091:7): [True: 0, False: 1.51k]
  ------------------
 2092|      0|			return (-1);
 2093|  1.51k|		msg->msg_parent->msg_eap.eam_found = 1;
 2094|  1.51k|	}
 2095|       |
 2096|  2.77k|	return (0);
 2097|  4.12k|}

ibuf_new:
   47|  3.94k|{
   48|  3.94k|	struct ibuf	*buf;
   49|       |
   50|  3.94k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (50:6): [True: 0, False: 3.94k]
  ------------------
   51|  3.94k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  3.94k|#define IKED_MSGBUF_MAX		8192
  ------------------
   52|      0|		return (NULL);
   53|       |
   54|  3.94k|	if (len == 0)
  ------------------
  |  Branch (54:6): [True: 408, False: 3.53k]
  ------------------
   55|    408|		return (buf);
   56|       |
   57|  3.53k|	if (data == NULL) {
  ------------------
  |  Branch (57:6): [True: 0, False: 3.53k]
  ------------------
   58|      0|		if (ibuf_reserve(buf, len) == NULL) {
  ------------------
  |  Branch (58:7): [True: 0, False: 0]
  ------------------
   59|      0|			ibuf_free(buf);
   60|      0|			return (NULL);
   61|      0|		}
   62|  3.53k|	} else {
   63|  3.53k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 3.53k]
  ------------------
   64|      0|			ibuf_free(buf);
   65|      0|			return (NULL);
   66|      0|		}
   67|  3.53k|	}
   68|       |
   69|  3.53k|	return (buf);
   70|  3.53k|}
ibuf_length:
   80|     52|{
   81|     52|	if (buf == NULL || buf->buf == NULL)
  ------------------
  |  Branch (81:6): [True: 34, False: 18]
  |  Branch (81:21): [True: 0, False: 18]
  ------------------
   82|     34|		return (0);
   83|     18|	return (ibuf_size(buf));
   84|     52|}
ibuf_data:
   88|   248k|{
   89|   248k|	return (ibuf_seek(buf, 0, 0));
   90|   248k|}

log_getverbose:
   82|  35.5k|{
   83|  35.5k|	return (verbose);
   84|  35.5k|}
vlog:
   98|  5.60k|{
   99|  5.60k|	char	*nfmt;
  100|  5.60k|	int	 saved_errno = errno;
  101|       |
  102|  5.60k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 5.60k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  5.60k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  5.60k|	errno = saved_errno;
  116|  5.60k|}
log_info:
  158|  5.60k|{
  159|  5.60k|	va_list	 ap;
  160|       |
  161|  5.60k|	va_start(ap, emsg);
  162|  5.60k|	vlog(LOG_INFO, emsg, ap);
  163|  5.60k|	va_end(ap);
  164|  5.60k|}
log_debug:
  168|   172k|{
  169|   172k|	va_list	 ap;
  170|       |
  171|   172k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 172k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|   172k|}

socket_getport:
   71|    674|{
   72|    674|	switch (sa->sa_family) {
   73|    292|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 292, False: 382]
  ------------------
   74|    292|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|    382|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 382, False: 292]
  ------------------
   76|    382|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 674]
  ------------------
   78|      0|		return (0);
   79|    674|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|    674|}
print_spi:
  499|  11.3k|{
  500|  11.3k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  11.3k|	static int		 i = 0;
  502|  11.3k|	char			*ptr;
  503|       |
  504|  11.3k|	ptr = buf[i];
  505|       |
  506|  11.3k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 11.3k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|    101|	case 4:
  ------------------
  |  Branch (510:2): [True: 101, False: 11.2k]
  ------------------
  511|    101|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|    101|		break;
  513|  5.06k|	case 8:
  ------------------
  |  Branch (513:2): [True: 5.06k, False: 6.23k]
  ------------------
  514|  5.06k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  5.06k|		break;
  516|  6.13k|	default:
  ------------------
  |  Branch (516:2): [True: 6.13k, False: 5.16k]
  ------------------
  517|  6.13k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  6.13k|		break;
  519|  11.3k|	}
  520|       |
  521|  11.3k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  11.3k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 1.41k, False: 9.89k]
  ------------------
  522|  1.41k|		i = 0;
  523|       |
  524|  11.3k|	return (ptr);
  525|  11.3k|}
print_map:
  529|   206k|{
  530|   206k|	unsigned int		 i;
  531|   206k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|   206k|	static int		 idx = 0;
  533|   206k|	const char		*name = NULL;
  534|       |
  535|   206k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|   206k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 25.8k, False: 180k]
  ------------------
  536|  25.8k|		idx = 0;
  537|   206k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  3.40M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 3.19M, False: 206k]
  ------------------
  540|  3.19M|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 134k, False: 3.06M]
  ------------------
  541|   134k|			name = map[i].cm_name;
  542|  3.19M|	}
  543|       |
  544|   206k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 71.5k, False: 134k]
  ------------------
  545|  71.5k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|   134k|	else
  547|   134k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|   206k|	return (buf[idx++]);
  550|   206k|}
print_hex:
  561|  35.5k|{
  562|  35.5k|	unsigned int	 i;
  563|       |
  564|  35.5k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 35.5k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|  35.5k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_addr:
  731|    674|{
  732|    674|	static char	 sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  733|    674|	static int	 idx;
  734|    674|	struct sockaddr	*sa = addr;
  735|    674|	char		*buf;
  736|    674|	size_t		 len;
  737|    674|	char		 pbuf[7];
  738|    674|	in_port_t	 port;
  739|       |
  740|    674|	buf = sbuf[idx];
  741|    674|	len = sizeof(sbuf[idx]);
  742|    674|	if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|    674|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (742:6): [True: 84, False: 590]
  ------------------
  743|     84|		idx = 0;
  744|       |
  745|    674|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (745:6): [True: 0, False: 674]
  ------------------
  746|      0|		strlcpy(buf, "any", len);
  747|      0|		return (buf);
  748|      0|	}
  749|       |
  750|    674|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  113|    674|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (113:3): [True: 292, False: 382]
  |  |  ------------------
  |  |  114|    674|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (114:2): [True: 382, False: 0]
  |  |  ------------------
  |  |  115|    382|	sizeof(struct sockaddr))
  ------------------
  |  Branch (750:6): [True: 0, False: 674]
  ------------------
  751|    674|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  752|      0|		strlcpy(buf, "unknown", len);
  753|      0|		return (buf);
  754|      0|	}
  755|       |
  756|    674|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (756:6): [True: 0, False: 674]
  ------------------
  757|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  758|      0|		(void)strlcat(buf, pbuf, len);
  759|      0|	}
  760|       |
  761|    674|	return (buf);
  762|    674|}

eap_parse:
   60|  1.51k|{
   61|  1.51k|	return (0);
   62|  1.51k|}
ikev2_msg_frompeer:
   67|  59.9k|{
   68|  59.9k|	struct iked_sa		*sa = msg->msg_sa;
   69|  59.9k|	struct ike_header	*hdr;
   70|       |
   71|  59.9k|	msg = msg->msg_parent;
   72|       |
   73|  59.9k|	if (sa == NULL ||
  ------------------
  |  Branch (73:6): [True: 0, False: 59.9k]
  ------------------
   74|  59.9k|	    (hdr = ibuf_seek(msg->msg_data, 0, sizeof(*hdr))) == NULL)
  ------------------
  |  Branch (74:6): [True: 0, False: 59.9k]
  ------------------
   75|      0|		return (0);
   76|       |
   77|  59.9k|	if (!sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (77:6): [True: 59.9k, False: 0]
  ------------------
   78|  59.9k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR))
  ------------------
  |  |   19|  59.9k|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (78:6): [True: 2.74k, False: 57.1k]
  ------------------
   79|  2.74k|		return (1);
   80|  57.1k|	else if (sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (80:11): [True: 0, False: 57.1k]
  ------------------
   81|  57.1k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR) == 0)
  ------------------
  |  |   19|      0|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (81:6): [True: 0, False: 0]
  ------------------
   82|      0|		return (1);
   83|       |
   84|  57.1k|	return (0);
   85|  59.9k|}
ikev2_ikesa_info:
  101|  2.84k|{
  102|  2.84k|	return "";
  103|  2.84k|}
sa_stateok:
  120|      7|{
  121|      7|	return (0);
  122|      7|}
ikev2_nat_detection:
  164|     23|{
  165|     23|	return (0);
  166|     23|}
ikev2_print_id:
  178|    995|{
  179|    995|	return (0);
  180|    995|}
config_add_proposal:
  191|     69|{
  192|     69|	return (NULL);
  193|     69|}
ikev2_send_informational:
  208|    387|{
  209|    387|	return (0);
  210|    387|}
ikev2_msg_cleanup:
  249|  2.46k|{
  250|  2.46k|	struct iked_certreq *cr;
  251|  2.46k|	struct iked_proposal *prop, *proptmp;
  252|       |
  253|  2.46k|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (253:6): [True: 2.46k, False: 0]
  ------------------
  254|  2.46k|		ibuf_free(msg->msg_nonce);
  255|  2.46k|		ibuf_free(msg->msg_ke);
  256|  2.46k|		ibuf_free(msg->msg_auth.id_buf);
  257|  2.46k|		ibuf_free(msg->msg_peerid.id_buf);
  258|  2.46k|		ibuf_free(msg->msg_localid.id_buf);
  259|  2.46k|		ibuf_free(msg->msg_cert.id_buf);
  260|  2.46k|		ibuf_free(msg->msg_cookie);
  261|  2.46k|		ibuf_free(msg->msg_cookie2);
  262|  2.46k|		ibuf_free(msg->msg_del_buf);
  263|  2.46k|		free(msg->msg_eap.eam_user);
  264|  2.46k|		free(msg->msg_cp_addr);
  265|  2.46k|		free(msg->msg_cp_addr6);
  266|       |
  267|  2.46k|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|  2.46k|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|  2.46k|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|  2.46k|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  4.93k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 2.46k]
  |  |  ------------------
  |  |  447|  2.46k|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|  2.46k|	    (var) = (tvar))
  ------------------
  268|  2.46k|		    proptmp) {
  269|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  270|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (270:8): [True: 0, False: 0]
  ------------------
  271|      0|				free(prop->prop_xforms);
  272|      0|			free(prop);
  273|      0|		}
  274|       |
  275|  2.86k|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|  2.86k|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (275:10): [True: 399, False: 2.46k]
  ------------------
  276|    399|			ibuf_free(cr->cr_data);
  277|    399|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|    399|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|    399|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 65, False: 334]
  |  |  ------------------
  |  |  310|    399|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|    399|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  278|    399|			free(cr);
  279|    399|		}
  280|  2.46k|	}
  281|       |
  282|  2.46k|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (282:6): [True: 2.46k, False: 0]
  ------------------
  283|  2.46k|		ibuf_free(msg->msg_data);
  284|  2.46k|		msg->msg_data = NULL;
  285|  2.46k|	}
  286|  2.46k|}

LLVMFuzzerTestOneInput:
  107|  2.47k|{
  108|  2.47k|	struct ibuf		*fuzzed;
  109|  2.47k|	struct ike_header	 hdr;
  110|  2.47k|	struct iked_message	 msg;
  111|       |
  112|  2.47k|	bzero(&hdr, sizeof(hdr));
  113|  2.47k|	bzero(&msg, sizeof(msg));
  114|       |
  115|  2.47k|	fuzzed = ibuf_new(data, size);
  116|  2.47k|	if (fuzzed == NULL){
  ------------------
  |  Branch (116:6): [True: 0, False: 2.47k]
  ------------------
  117|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  118|      0|		    "(hint: fuzz-input too long?)");
  119|      0|		return -1;
  120|      0|	}	
  121|       |	
  122|       |	/* size too small? */
  123|  2.47k|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (123:6): [True: 1, False: 2.46k]
  ------------------
  124|      1|		ibuf_free(fuzzed);
  125|      1|		return 0;
  126|      1|	}	       
  127|       |
  128|  2.46k|	prepare_header(&hdr, fuzzed);
  129|  2.46k|	prepare_message(&msg, fuzzed);
  130|       |
  131|  2.46k|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  132|       |
  133|  2.46k|	ikev2_msg_cleanup(NULL, &msg);
  134|       |
  135|  2.46k|	return 0;
  136|  2.47k|}
test_parser_fuzz.c:prepare_header:
   75|  2.46k|{
   76|  2.46k|	bzero(hdr, sizeof(*hdr));
   77|  2.46k|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|  2.46k|	    sizeof(hdr->ike_ispi));
   79|  2.46k|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|  2.46k|	    sizeof(hdr->ike_rspi));
   81|  2.46k|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|  2.46k|	hdr->ike_version = get_version(ibuf_data(data));
   83|  2.46k|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|  2.46k|	hdr->ike_length = get_length(ibuf_data(data));
   85|  2.46k|}
test_parser_fuzz.c:get_icookie:
   39|  2.46k|{
   40|  2.46k|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|  2.46k|#define OFFSET_ICOOKIE		0
  ------------------
   41|  2.46k|}
test_parser_fuzz.c:get_rcookie:
   45|  2.46k|{
   46|  2.46k|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|  2.46k|#define OFFSET_RCOOKIE		8
  ------------------
   47|  2.46k|}
test_parser_fuzz.c:get_nextpayload:
   51|  2.46k|{
   52|  2.46k|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|  2.46k|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|  2.46k|}
test_parser_fuzz.c:get_version:
   57|  2.46k|{
   58|  2.46k|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|  2.46k|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|  2.46k|}
test_parser_fuzz.c:get_exchange:
   63|  2.46k|{
   64|  2.46k|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|  2.46k|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|  2.46k|}
test_parser_fuzz.c:get_length:
   69|  2.46k|{
   70|  2.46k|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|  2.46k|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|  2.46k|}
test_parser_fuzz.c:prepare_message:
   89|  2.46k|{
   90|  2.46k|	static struct iked_sa	sa;
   91|       |
   92|  2.46k|	bzero(&sa, sizeof(sa));
   93|  2.46k|	bzero(msg, sizeof(*msg));
   94|       |
   95|  2.46k|	msg->msg_sa = &sa;
   96|  2.46k|	msg->msg_data = data;
   97|  2.46k|	msg->msg_e = 1;
   98|  2.46k|	msg->msg_parent = msg;
   99|       |
  100|  2.46k|	TAILQ_INIT(&msg->msg_proposals);
  ------------------
  |  |  465|  2.46k|#define	TAILQ_INIT(head) do {						\
  |  |  466|  2.46k|	(head)->tqh_first = NULL;					\
  |  |  467|  2.46k|	(head)->tqh_last = &(head)->tqh_first;				\
  |  |  468|  2.46k|} while (0)
  |  |  ------------------
  |  |  |  Branch (468:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  101|  2.46k|	SIMPLEQ_INIT(&msg->msg_certreqs);
  ------------------
  |  |  285|  2.46k|#define	SIMPLEQ_INIT(head) do {						\
  |  |  286|  2.46k|	(head)->sqh_first = NULL;					\
  |  |  287|  2.46k|	(head)->sqh_last = &(head)->sqh_first;				\
  |  |  288|  2.46k|} while (0)
  |  |  ------------------
  |  |  |  Branch (288:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  102|  2.46k|}

