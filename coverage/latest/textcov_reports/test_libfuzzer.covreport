freezero:
   25|  1.11k|{
   26|       |	/* This is legal. */
   27|  1.11k|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 78, False: 1.04k]
  ------------------
   28|     78|		return;
   29|       |
   30|  1.04k|	explicit_bzero(ptr, sz);
   31|  1.04k|	free(ptr);
   32|  1.04k|}

ibuf_dynamic:
   62|  1.27k|{
   63|  1.27k|	struct ibuf	*buf;
   64|       |
   65|  1.27k|	if (max < len) {
  ------------------
  |  Branch (65:6): [True: 0, False: 1.27k]
  ------------------
   66|      0|		errno = EINVAL;
   67|      0|		return (NULL);
   68|      0|	}
   69|       |
   70|  1.27k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (70:6): [True: 0, False: 1.27k]
  ------------------
   71|      0|		return (NULL);
   72|  1.27k|	if (len > 0) {
  ------------------
  |  Branch (72:6): [True: 1.12k, False: 145]
  ------------------
   73|  1.12k|		if ((buf->buf = calloc(len, 1)) == NULL) {
  ------------------
  |  Branch (73:7): [True: 0, False: 1.12k]
  ------------------
   74|      0|			free(buf);
   75|      0|			return (NULL);
   76|      0|		}
   77|  1.12k|	}
   78|  1.27k|	buf->size = len;
   79|  1.27k|	buf->max = max;
   80|  1.27k|	buf->fd = -1;
   81|       |
   82|  1.27k|	return (buf);
   83|  1.27k|}
ibuf_reserve:
  107|  1.12k|{
  108|  1.12k|	void	*b;
  109|       |
  110|  1.12k|	if (len > SIZE_MAX - buf->wpos) {
  ------------------
  |  Branch (110:6): [True: 0, False: 1.12k]
  ------------------
  111|      0|		errno = ERANGE;
  112|      0|		return (NULL);
  113|      0|	}
  114|       |
  115|  1.12k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (115:6): [True: 0, False: 1.12k]
  ------------------
  116|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (116:7): [True: 0, False: 0]
  ------------------
  117|      0|			return (NULL);
  118|       |
  119|  1.12k|	b = buf->buf + buf->wpos;
  120|  1.12k|	buf->wpos += len;
  121|  1.12k|	memset(b, 0, len);
  122|  1.12k|	return (b);
  123|  1.12k|}
ibuf_add:
  127|  1.12k|{
  128|  1.12k|	void *b;
  129|       |
  130|  1.12k|	if ((b = ibuf_reserve(buf, len)) == NULL)
  ------------------
  |  Branch (130:6): [True: 0, False: 1.12k]
  ------------------
  131|      0|		return (-1);
  132|       |
  133|  1.12k|	memcpy(b, data, len);
  134|  1.12k|	return (0);
  135|  1.12k|}
ibuf_seek:
  202|  19.8k|{
  203|       |	/* only allowed to seek in already written parts */
  204|  19.8k|	if (len > SIZE_MAX - pos || pos + len > buf->wpos) {
  ------------------
  |  Branch (204:6): [True: 0, False: 19.8k]
  |  Branch (204:30): [True: 432, False: 19.3k]
  ------------------
  205|    432|		errno = ERANGE;
  206|    432|		return (NULL);
  207|    432|	}
  208|       |
  209|  19.3k|	return (buf->buf + pos);
  210|  19.8k|}
ibuf_data:
  272|  62.0k|{
  273|  62.0k|	return (buf->buf);
  274|  62.0k|}
ibuf_size:
  278|    703|{
  279|    703|	return (buf->wpos);
  280|    703|}
ibuf_free:
  296|  7.37k|{
  297|  7.37k|	if (buf == NULL)
  ------------------
  |  Branch (297:6): [True: 6.25k, False: 1.11k]
  ------------------
  298|  6.25k|		return;
  299|       |#ifdef NOTYET
  300|       |	if (buf->fd != -1)
  301|       |		close(buf->fd);
  302|       |#endif
  303|  1.11k|	freezero(buf->buf, buf->size);
  304|  1.11k|	free(buf);
  305|  1.11k|}

strlcpy:
   29|  43.2k|{
   30|  43.2k|	const char *osrc = src;
   31|  43.2k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|  43.2k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 43.2k, False: 0]
  ------------------
   35|   237k|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 236k, False: 124]
  ------------------
   36|   236k|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 43.1k, False: 193k]
  ------------------
   37|  43.1k|				break;
   38|   236k|		}
   39|  43.2k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|  43.2k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 124, False: 43.1k]
  ------------------
   43|    124|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 124, False: 0]
  ------------------
   44|    124|			*dst = '\0';		/* NUL-terminate dst */
   45|    124|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 124]
  ------------------
   46|      0|			;
   47|    124|	}
   48|       |
   49|  43.2k|	return(src - osrc - 1);	/* count does not include NUL */
   50|  43.2k|}

ikev2_pld_parse:
  118|    700|{
  119|    700|	log_debug("%s: header ispi %s rspi %s"
  120|    700|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  121|    700|	    " msgid %d length %u response %d", __func__,
  122|    700|	    print_spi(betoh64(hdr->ike_ispi), 8),
  123|    700|	    print_spi(betoh64(hdr->ike_rspi), 8),
  124|    700|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  125|    700|	    hdr->ike_version,
  126|    700|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  127|    700|	    hdr->ike_flags,
  128|    700|	    betoh32(hdr->ike_msgid),
  129|    700|	    betoh32(hdr->ike_length),
  130|    700|	    msg->msg_response);
  131|       |
  132|    700|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  Branch (132:6): [True: 4, False: 696]
  ------------------
  133|      4|		log_debug("%s: short message", __func__);
  134|      4|		return (-1);
  135|      4|	}
  136|       |
  137|    696|	offset += sizeof(*hdr);
  138|       |
  139|    696|	return (ikev2_pld_payloads(env, msg, offset,
  140|    696|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  141|    700|}
ikev2_validate_pld:
  146|  20.4k|{
  147|  20.4k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  148|  20.4k|	size_t		 pld_length;
  149|       |
  150|       |	/* We need at least the generic header. */
  151|  20.4k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (151:6): [True: 75, False: 20.4k]
  ------------------
  152|     75|		log_debug("%s: malformed payload: too short for generic "
  153|     75|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  154|     75|		return (-1);
  155|     75|	}
  156|  20.4k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  157|       |
  158|       |	/*
  159|       |	 * We need at least the specified number of bytes.
  160|       |	 * pld_length is the full size of the payload including
  161|       |	 * the generic payload header.
  162|       |	 */
  163|  20.4k|	pld_length = betoh16(pld->pld_length);
  164|  20.4k|	if (left < pld_length) {
  ------------------
  |  Branch (164:6): [True: 81, False: 20.3k]
  ------------------
  165|     81|		log_debug("%s: malformed payload: shorter than specified "
  166|     81|		    "(%zu < %zu)", __func__, left, pld_length);
  167|     81|		return (-1);
  168|     81|	}
  169|       |	/*
  170|       |	 * Sanity check the specified payload size, it must
  171|       |	 * be at least the size of the generic payload header.
  172|       |	 */
  173|  20.3k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (173:6): [True: 31, False: 20.3k]
  ------------------
  174|     31|		log_debug("%s: malformed payload: shorter than minimum "
  175|     31|		    "header size (%zu < %zu)", __func__, pld_length,
  176|     31|		    sizeof(*pld));
  177|     31|		return (-1);
  178|     31|	}
  179|       |
  180|  20.3k|	return (0);
  181|  20.3k|}
ikev2_pld_payloads:
  186|    696|{
  187|    696|	struct ikev2_payload	 pld;
  188|    696|	unsigned int		 e;
  189|    696|	int			 ret;
  190|    696|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  191|    696|	size_t			 total, left;
  192|       |
  193|       |	/* Check if message was decrypted in an E payload */
  194|    696|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|    696|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (194:6): [True: 696, False: 0]
  ------------------
  195|       |
  196|       |	/* Bytes left in datagram. */
  197|    696|	total = length - offset;
  198|       |
  199|  20.9k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (199:9): [True: 20.8k, False: 92]
  |  Branch (199:25): [True: 20.4k, False: 348]
  ------------------
  200|  20.4k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (200:7): [True: 187, False: 20.3k]
  ------------------
  201|    187|			return (-1);
  202|       |
  203|  20.3k|		log_debug("%s: %spayload %s"
  204|  20.3k|		    " nextpayload %s critical 0x%02x length %d",
  205|  20.3k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (205:17): [True: 20.3k, False: 0]
  ------------------
  206|  20.3k|		    print_map(payload, ikev2_payload_map),
  207|  20.3k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  208|  20.3k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|  20.3k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  209|  20.3k|		    betoh16(pld.pld_length));
  210|       |
  211|       |		/* Skip over generic payload header. */
  212|  20.3k|		offset += sizeof(pld);
  213|  20.3k|		total -= sizeof(pld);
  214|  20.3k|		left = betoh16(pld.pld_length) - sizeof(pld);
  215|  20.3k|		ret = 0;
  216|       |
  217|  20.3k|		switch (payload | e) {
  218|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (218:3): [True: 0, False: 20.3k]
  ------------------
  219|  4.21k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  4.21k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  4.21k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (219:3): [True: 4.21k, False: 16.0k]
  ------------------
  220|  4.21k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  221|  4.21k|			break;
  222|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (222:3): [True: 0, False: 20.3k]
  ------------------
  223|    664|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|    664|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|    664|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (223:3): [True: 664, False: 19.6k]
  ------------------
  224|    664|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  225|    664|			break;
  226|    934|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|    934|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|    934|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 934, False: 19.3k]
  ------------------
  227|  1.13k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  1.13k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  1.13k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (227:3): [True: 196, False: 20.1k]
  ------------------
  228|  1.13k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  229|  1.13k|			    payload);
  230|  1.13k|			break;
  231|    479|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|    479|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|    479|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (231:3): [True: 479, False: 19.8k]
  ------------------
  232|    479|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  233|    479|			break;
  234|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (234:3): [True: 0, False: 20.3k]
  ------------------
  235|  1.73k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  1.73k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  1.73k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (235:3): [True: 1.73k, False: 18.5k]
  ------------------
  236|  1.73k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  237|  1.73k|			break;
  238|    724|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|    724|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|    724|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (238:3): [True: 724, False: 19.5k]
  ------------------
  239|    724|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  240|    724|			break;
  241|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (241:3): [True: 0, False: 20.3k]
  ------------------
  242|     59|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|     59|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|     59|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (242:3): [True: 59, False: 20.2k]
  ------------------
  243|     59|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  244|     59|			break;
  245|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (245:3): [True: 0, False: 20.3k]
  ------------------
  246|  1.04k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  1.04k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  1.04k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (246:3): [True: 1.04k, False: 19.2k]
  ------------------
  247|  1.04k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  248|  1.04k|			break;
  249|    784|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|    784|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|    784|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (249:3): [True: 784, False: 19.5k]
  ------------------
  250|    784|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  251|    784|			break;
  252|    348|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|    348|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|    348|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 348, False: 19.9k]
  ------------------
  253|  1.19k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  1.19k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  1.19k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (253:3): [True: 849, False: 19.4k]
  ------------------
  254|  1.19k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  255|  1.19k|			break;
  256|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (256:3): [True: 0, False: 20.3k]
  ------------------
  257|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  258|      0|			break;
  259|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (259:3): [True: 0, False: 20.3k]
  ------------------
  260|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  261|      0|			break;
  262|  1.15k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  1.15k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  1.15k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (262:3): [True: 1.15k, False: 19.1k]
  ------------------
  263|  1.15k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  264|  1.15k|			break;
  265|  3.17k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  3.17k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  3.17k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (265:3): [True: 3.17k, False: 17.1k]
  ------------------
  266|  3.17k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  267|  3.17k|			break;
  268|  3.95k|		default:
  ------------------
  |  Branch (268:3): [True: 3.95k, False: 16.3k]
  ------------------
  269|  3.95k|			print_hex(msgbuf, offset,
  270|  3.95k|			    betoh16(pld.pld_length) - sizeof(pld));
  271|  3.95k|			break;
  272|  20.3k|		}
  273|       |
  274|  20.3k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (274:7): [True: 10.0k, False: 10.2k]
  |  Branch (274:19): [True: 67, False: 10.0k]
  ------------------
  275|     67|			(void)ikev2_send_informational(env, msg);
  276|     67|			return (-1);
  277|     67|		}
  278|       |
  279|       |		/* Encrypted payloads must appear last */
  280|  20.2k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|  20.2k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (280:7): [True: 1, False: 20.2k]
  ------------------
  281|  20.2k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|  20.2k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (281:7): [True: 1, False: 20.2k]
  ------------------
  282|      2|			return (0);
  283|       |
  284|  20.2k|		payload = pld.pld_nextpayload;
  285|  20.2k|		offset += left;
  286|  20.2k|		total -= left;
  287|  20.2k|	}
  288|       |
  289|    440|	return (0);
  290|    696|}
ikev2_validate_sa:
  295|  5.30k|{
  296|  5.30k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  297|  5.30k|	size_t		 sap_length;
  298|       |
  299|  5.30k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (299:6): [True: 1.87k, False: 3.43k]
  ------------------
  300|  1.87k|		log_debug("%s: malformed payload: too short for header "
  301|  1.87k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  302|  1.87k|		return (-1);
  303|  1.87k|	}
  304|  3.43k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  305|       |
  306|  3.43k|	sap_length = betoh16(sap->sap_length);
  307|  3.43k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (307:6): [True: 534, False: 2.89k]
  ------------------
  308|    534|		log_debug("%s: malformed payload: shorter than minimum header "
  309|    534|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  310|    534|		return (-1);
  311|    534|	}
  312|  2.89k|	if (left < sap_length) {
  ------------------
  |  Branch (312:6): [True: 285, False: 2.61k]
  ------------------
  313|    285|		log_debug("%s: malformed payload: too long for actual payload "
  314|    285|		    "size (%zu < %zu)", __func__, left, sap_length);
  315|    285|		return (-1);
  316|    285|	}
  317|       |	/*
  318|       |	 * If there is only one proposal, sap_length must be the
  319|       |	 * total payload size.
  320|       |	 */
  321|  2.61k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (321:6): [True: 305, False: 2.30k]
  |  Branch (321:24): [True: 11, False: 294]
  ------------------
  322|     11|		log_debug("%s: malformed payload: SA payload length mismatches "
  323|     11|		    "single proposal substructure length (%zu != %zu)",
  324|     11|		    __func__, left, sap_length);
  325|     11|		return (-1);
  326|     11|	}
  327|       |	/*
  328|       |	 * If there are more than one proposal, there must be bytes
  329|       |	 * left in the payload.
  330|       |	 */
  331|  2.60k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (331:6): [True: 2.30k, False: 294]
  |  Branch (331:23): [True: 66, False: 2.24k]
  ------------------
  332|     66|		log_debug("%s: malformed payload: SA payload too small for "
  333|     66|		    "further proposals (%zu <= %zu)", __func__,
  334|     66|		    left, sap_length);
  335|     66|		return (-1);
  336|     66|	}
  337|  2.53k|	return (0);
  338|  2.60k|}
ikev2_pld_sa:
  343|  4.21k|{
  344|  4.21k|	struct ikev2_sa_proposal	 sap;
  345|  4.21k|	struct iked_proposal		*prop = NULL;
  346|  4.21k|	uint32_t			 spi32;
  347|  4.21k|	uint64_t			 spi = 0, spi64;
  348|  4.21k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  349|  4.21k|	int				 r;
  350|  4.21k|	struct iked_proposals		*props;
  351|  4.21k|	size_t				 total;
  352|       |
  353|  5.30k|	do {
  354|  5.30k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (354:7): [True: 2.76k, False: 2.53k]
  ------------------
  355|  2.76k|			return (-1);
  356|       |
  357|       |		/* Assumed size of the first proposals, including SPI if present. */
  358|  2.53k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  359|       |
  360|  2.53k|		props = &msg->msg_parent->msg_proposals;
  361|       |
  362|  2.53k|		offset += sizeof(sap);
  363|  2.53k|		left -= sizeof(sap);
  364|       |
  365|  2.53k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (365:7): [True: 380, False: 2.15k]
  ------------------
  366|    380|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (366:8): [True: 68, False: 312]
  ------------------
  367|     68|				log_debug("%s: malformed payload: SPI larger than "
  368|     68|				    "actual payload (%zu < %d)", __func__, left,
  369|     68|				    sap.sap_spisize);
  370|     68|				return (-1);
  371|     68|			}
  372|    312|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (372:8): [True: 66, False: 246]
  ------------------
  373|     66|				log_debug("%s: malformed payload: SPI larger than "
  374|     66|				    "proposal (%zu < %d)", __func__, total,
  375|     66|				    sap.sap_spisize);
  376|     66|				return (-1);
  377|     66|			}
  378|    246|			switch (sap.sap_spisize) {
  379|     80|			case 4:
  ------------------
  |  Branch (379:4): [True: 80, False: 166]
  ------------------
  380|     80|				memcpy(&spi32, msgbuf + offset, 4);
  381|     80|				spi = betoh32(spi32);
  382|     80|				break;
  383|     98|			case 8:
  ------------------
  |  Branch (383:4): [True: 98, False: 148]
  ------------------
  384|     98|				memcpy(&spi64, msgbuf + offset, 8);
  385|     98|				spi = betoh64(spi64);
  386|     98|				break;
  387|     68|			default:
  ------------------
  |  Branch (387:4): [True: 68, False: 178]
  ------------------
  388|     68|				log_debug("%s: unsupported SPI size %d",
  389|     68|				    __func__, sap.sap_spisize);
  390|     68|				return (-1);
  391|    246|			}
  392|       |
  393|    178|			offset += sap.sap_spisize;
  394|    178|			left -= sap.sap_spisize;
  395|       |
  396|       |			/* Assumed size of the proposal, now without SPI. */
  397|    178|			total -= sap.sap_spisize;
  398|    178|		}
  399|       |
  400|       |		/*
  401|       |		 * As we verified sanity of packet headers, this check will
  402|       |		 * be always false, but just to be sure we keep it.
  403|       |		 */
  404|  2.33k|		if (left < total) {
  ------------------
  |  Branch (404:7): [True: 0, False: 2.33k]
  ------------------
  405|      0|			log_debug("%s: malformed payload: too long for payload "
  406|      0|			    "(%zu < %zu)", __func__, left, total);
  407|      0|			return (-1);
  408|      0|		}
  409|       |
  410|  2.33k|		log_debug("%s: more %d reserved %d length %d"
  411|  2.33k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  412|  2.33k|		    __func__, sap.sap_more, sap.sap_reserved,
  413|  2.33k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  414|  2.33k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  415|  2.33k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  416|       |
  417|  2.33k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (417:7): [True: 2, False: 2.33k]
  ------------------
  418|      2|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (418:8): [True: 2, False: 0]
  ------------------
  419|      2|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  420|      2|				log_debug("%s: invalid proposal", __func__);
  421|      2|				return (-1);
  422|      2|			}
  423|      0|			prop = msg->msg_parent->msg_prop;
  424|      0|			prop->prop_peerspi.spi = spi;
  425|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  426|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  427|       |
  428|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  429|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  430|      0|		}
  431|       |
  432|       |		/*
  433|       |		 * Parse the attached transforms
  434|       |		 */
  435|  2.33k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (435:7): [True: 1.36k, False: 963]
  ------------------
  436|  1.36k|			r = ikev2_pld_xform(env, msg, offset, total);
  437|  1.36k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (437:8): [True: 0, False: 1.36k]
  |  Branch (437:21): [True: 0, False: 0]
  ------------------
  438|      0|				log_debug("%s: invalid proposal transform",
  439|      0|				    __func__);
  440|       |
  441|       |				/* cleanup and ignore proposal */
  442|      0|				config_free_proposal(props, prop);
  443|      0|				prop = msg->msg_parent->msg_prop = NULL;
  444|  1.36k|			} else if (r != 0) {
  ------------------
  |  Branch (444:15): [True: 1.05k, False: 315]
  ------------------
  445|  1.05k|				log_debug("%s: invalid proposal transforms",
  446|  1.05k|				    __func__);
  447|  1.05k|				return (-1);
  448|  1.05k|			}
  449|  1.36k|		}
  450|       |
  451|  1.27k|		offset += total;
  452|  1.27k|		left -= total;
  453|  1.27k|	} while (sap.sap_more);
  ------------------
  |  Branch (453:11): [True: 1.08k, False: 191]
  ------------------
  454|       |
  455|    191|	return (0);
  456|  4.21k|}
ikev2_validate_xform:
  461|  1.75k|{
  462|  1.75k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  463|  1.75k|	size_t		 xfrm_length;
  464|       |
  465|  1.75k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (465:6): [True: 165, False: 1.59k]
  ------------------
  466|    165|		log_debug("%s: malformed payload: too short for header "
  467|    165|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  468|    165|		return (-1);
  469|    165|	}
  470|  1.59k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  471|       |
  472|  1.59k|	xfrm_length = betoh16(xfrm->xfrm_length);
  473|  1.59k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (473:6): [True: 131, False: 1.46k]
  ------------------
  474|    131|		log_debug("%s: malformed payload: shorter than minimum header "
  475|    131|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  476|    131|		return (-1);
  477|    131|	}
  478|  1.46k|	if (total < xfrm_length) {
  ------------------
  |  Branch (478:6): [True: 111, False: 1.35k]
  ------------------
  479|    111|		log_debug("%s: malformed payload: too long for payload size "
  480|    111|		    "(%zu < %zu)", __func__, total, xfrm_length);
  481|    111|		return (-1);
  482|    111|	}
  483|       |
  484|  1.35k|	return (0);
  485|  1.46k|}
ikev2_pld_xform:
  490|  1.75k|{
  491|  1.75k|	struct ikev2_transform		 xfrm;
  492|  1.75k|	char				 id[BUFSIZ];
  493|  1.75k|	int				 ret = 0;
  494|  1.75k|	int				 r;
  495|  1.75k|	size_t				 xfrm_length;
  496|       |
  497|  1.75k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (497:6): [True: 407, False: 1.35k]
  ------------------
  498|    407|		return (-1);
  499|       |
  500|  1.35k|	xfrm_length = betoh16(xfrm.xfrm_length);
  501|       |
  502|  1.35k|	switch (xfrm.xfrm_type) {
  503|    335|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|    335|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (503:2): [True: 335, False: 1.01k]
  ------------------
  504|    335|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  505|    335|		    ikev2_xformencr_map), sizeof(id));
  506|    335|		break;
  507|    435|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|    435|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (507:2): [True: 435, False: 915]
  ------------------
  508|    435|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  509|    435|		    ikev2_xformprf_map), sizeof(id));
  510|    435|		break;
  511|     66|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|     66|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (511:2): [True: 66, False: 1.28k]
  ------------------
  512|     66|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  513|     66|		    ikev2_xformauth_map), sizeof(id));
  514|     66|		break;
  515|     67|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|     67|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (515:2): [True: 67, False: 1.28k]
  ------------------
  516|     67|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  517|     67|		    ikev2_xformdh_map), sizeof(id));
  518|     67|		break;
  519|     66|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|     66|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (519:2): [True: 66, False: 1.28k]
  ------------------
  520|     66|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  521|     66|		    ikev2_xformesn_map), sizeof(id));
  522|     66|		break;
  523|    381|	default:
  ------------------
  |  Branch (523:2): [True: 381, False: 969]
  ------------------
  524|    381|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  525|    381|		break;
  526|  1.35k|	}
  527|       |
  528|  1.35k|	log_debug("%s: more %d reserved %d length %zu"
  529|  1.35k|	    " type %s id %s",
  530|  1.35k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  531|  1.35k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  532|       |
  533|       |	/*
  534|       |	 * Parse transform attributes, if available
  535|       |	 */
  536|  1.35k|	msg->msg_attrlength = 0;
  537|  1.35k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (537:6): [True: 838, False: 512]
  ------------------
  538|    838|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (538:7): [True: 568, False: 270]
  ------------------
  539|    838|		    xfrm_length - sizeof(xfrm)) != 0) {
  540|    568|			return (-1);
  541|    568|		}
  542|    838|	}
  543|       |
  544|    782|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (544:6): [True: 0, False: 782]
  ------------------
  545|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  546|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  547|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  548|      0|		if (r == -1) {
  ------------------
  |  Branch (548:7): [True: 0, False: 0]
  ------------------
  549|      0|			log_debug("%s: failed to add transform: alloc error",
  550|      0|			    __func__);
  551|      0|			return (r);
  552|      0|		} else if (r == -2) {
  ------------------
  |  Branch (552:14): [True: 0, False: 0]
  ------------------
  553|      0|			log_debug("%s: failed to add transform: unknown type",
  554|      0|			    __func__);
  555|      0|			return (r);
  556|      0|		}
  557|      0|	}
  558|       |
  559|       |	/* Next transform */
  560|    782|	offset += xfrm_length;
  561|    782|	total -= xfrm_length;
  562|    782|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|    782|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (562:6): [True: 388, False: 394]
  ------------------
  563|    388|		ret = ikev2_pld_xform(env, msg, offset, total);
  564|    394|	else if (total != 0) {
  ------------------
  |  Branch (564:11): [True: 79, False: 315]
  ------------------
  565|       |		/* No more transforms but still some data left. */
  566|     79|		log_debug("%s: less data than specified, %zu bytes left",
  567|     79|		    __func__, total);
  568|     79|		ret = -1;
  569|     79|	}
  570|       |
  571|    782|	return (ret);
  572|    782|}
ikev2_validate_attr:
  577|  1.94k|{
  578|  1.94k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  579|       |
  580|  1.94k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (580:6): [True: 105, False: 1.84k]
  ------------------
  581|    105|		log_debug("%s: malformed payload: too short for header "
  582|    105|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  583|    105|		return (-1);
  584|    105|	}
  585|  1.84k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  586|       |
  587|  1.84k|	return (0);
  588|  1.94k|}
ikev2_pld_attr:
  593|  1.94k|{
  594|  1.94k|	struct ikev2_attribute		 attr;
  595|  1.94k|	unsigned int			 type;
  596|  1.94k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  597|  1.94k|	int				 ret = 0;
  598|  1.94k|	size_t				 attr_length;
  599|       |
  600|  1.94k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (600:6): [True: 105, False: 1.84k]
  ------------------
  601|    105|		return (-1);
  602|       |
  603|  1.84k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  1.84k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  604|       |
  605|  1.84k|	log_debug("%s: attribute type %s length %d total %zu",
  606|  1.84k|	    __func__, print_map(type, ikev2_attrtype_map),
  607|  1.84k|	    betoh16(attr.attr_length), total);
  608|       |
  609|  1.84k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  1.84k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (609:6): [True: 1.11k, False: 733]
  ------------------
  610|       |		/* Type-Value attribute */
  611|  1.11k|		offset += sizeof(attr);
  612|  1.11k|		total -= sizeof(attr);
  613|       |
  614|  1.11k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  1.11k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (614:7): [True: 34, False: 1.07k]
  ------------------
  615|     34|			msg->msg_attrlength = betoh16(attr.attr_length);
  616|  1.11k|	} else {
  617|       |		/* Type-Length-Value attribute */
  618|    733|		attr_length = betoh16(attr.attr_length);
  619|    733|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (619:7): [True: 246, False: 487]
  ------------------
  620|    246|			log_debug("%s: malformed payload: shorter than "
  621|    246|			    "minimum header size (%zu < %zu)", __func__,
  622|    246|			    attr_length, sizeof(attr));
  623|    246|			return (-1);
  624|    246|		}
  625|    487|		if (total < attr_length) {
  ------------------
  |  Branch (625:7): [True: 217, False: 270]
  ------------------
  626|    217|			log_debug("%s: malformed payload: attribute larger "
  627|    217|			    "than actual payload (%zu < %zu)", __func__,
  628|    217|			    total, attr_length);
  629|    217|			return (-1);
  630|    217|		}
  631|    270|		print_hex(msgbuf, offset + sizeof(attr),
  632|    270|		    attr_length - sizeof(attr));
  633|    270|		offset += attr_length;
  634|    270|		total -= attr_length;
  635|    270|	}
  636|       |
  637|  1.38k|	if (total > 0) {
  ------------------
  |  Branch (637:6): [True: 1.11k, False: 270]
  ------------------
  638|       |		/* Next attribute */
  639|  1.11k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  640|  1.11k|	}
  641|       |
  642|  1.38k|	return (ret);
  643|  1.84k|}
ikev2_validate_ke:
  648|    664|{
  649|    664|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  650|       |
  651|    664|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (651:6): [True: 442, False: 222]
  ------------------
  652|    442|		log_debug("%s: malformed payload: too short for header "
  653|    442|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  654|    442|		return (-1);
  655|    442|	}
  656|    222|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  657|       |
  658|    222|	return (0);
  659|    664|}
ikev2_pld_ke:
  664|    664|{
  665|    664|	struct ikev2_keyexchange	 kex;
  666|    664|	uint8_t				*buf;
  667|    664|	size_t				 len;
  668|    664|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  669|       |
  670|    664|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (670:6): [True: 442, False: 222]
  ------------------
  671|    442|		return (-1);
  672|       |
  673|    222|	log_debug("%s: dh group %s reserved %d", __func__,
  674|    222|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  675|    222|	    betoh16(kex.kex_reserved));
  676|       |
  677|    222|	buf = msgbuf + offset + sizeof(kex);
  678|    222|	len = left - sizeof(kex);
  679|       |
  680|    222|	if (len == 0) {
  ------------------
  |  Branch (680:6): [True: 68, False: 154]
  ------------------
  681|     68|		log_debug("%s: malformed payload: no KE data given", __func__);
  682|     68|		return (-1);
  683|     68|	}
  684|       |
  685|    154|	print_hex(buf, 0, len);
  686|       |
  687|    154|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (687:6): [True: 5, False: 149]
  ------------------
  688|      5|		if (ibuf_length(msg->msg_parent->msg_ke)) {
  ------------------
  |  Branch (688:7): [True: 1, False: 4]
  ------------------
  689|      1|			log_info("%s: duplicate KE payload", __func__);
  690|      1|			return (-1);
  691|      1|		}
  692|      4|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (692:7): [True: 0, False: 4]
  ------------------
  693|      0|			log_debug("%s: failed to get exchange", __func__);
  694|      0|			return (-1);
  695|      0|		}
  696|      4|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  697|      4|	}
  698|       |
  699|    153|	return (0);
  700|    154|}
ikev2_validate_id:
  705|  1.13k|{
  706|  1.13k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  707|       |
  708|  1.13k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (708:6): [True: 612, False: 518]
  ------------------
  709|    612|		log_debug("%s: malformed payload: too short for header "
  710|    612|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  711|    612|		return (-1);
  712|    612|	}
  713|    518|	memcpy(id, msgbuf + offset, sizeof(*id));
  714|       |
  715|    518|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|    518|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (715:6): [True: 215, False: 303]
  ------------------
  716|    215|		log_debug("%s: malformed payload: invalid ID type.",
  717|    215|		    __func__);
  718|    215|		return (-1);
  719|    215|	}
  720|       |
  721|    303|	return (0);
  722|    518|}
ikev2_pld_id:
  727|  1.13k|{
  728|  1.13k|	uint8_t				*ptr;
  729|  1.13k|	struct ikev2_id			 id;
  730|  1.13k|	size_t				 len;
  731|  1.13k|	struct iked_id			*idp, idb;
  732|  1.13k|	const struct iked_sa		*sa = msg->msg_sa;
  733|  1.13k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  734|  1.13k|	char				 idstr[IKED_ID_SIZE];
  735|       |
  736|  1.13k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (736:6): [True: 827, False: 303]
  ------------------
  737|    827|		return (-1);
  738|       |
  739|    303|	bzero(&idb, sizeof(idb));
  740|       |
  741|       |	/* Don't strip the Id payload header */
  742|    303|	ptr = msgbuf + offset;
  743|    303|	len = left;
  744|       |
  745|    303|	idb.id_type = id.id_type;
  746|    303|	idb.id_offset = sizeof(id);
  747|    303|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (747:6): [True: 0, False: 303]
  ------------------
  748|      0|		return (-1);
  749|       |
  750|    303|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (750:6): [True: 0, False: 303]
  ------------------
  751|      0|		ibuf_free(idb.id_buf);
  752|      0|		log_debug("%s: malformed id", __func__);
  753|      0|		return (-1);
  754|      0|	}
  755|       |
  756|    303|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  757|       |
  758|    303|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (758:6): [True: 293, False: 10]
  ------------------
  759|    293|		ibuf_free(idb.id_buf);
  760|    293|		return (0);
  761|    293|	}
  762|       |
  763|     10|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (763:8): [True: 0, False: 10]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|     10|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|     10|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (764:7): [True: 10, False: 0]
  |  Branch (764:35): [True: 6, False: 4]
  ------------------
  765|      6|		idp = &msg->msg_parent->msg_peerid;
  766|      4|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|      4|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (766:11): [True: 4, False: 0]
  |  Branch (766:39): [True: 4, False: 0]
  ------------------
  767|      4|		idp = &msg->msg_parent->msg_localid;
  768|      0|	else {
  769|      0|		ibuf_free(idb.id_buf);
  770|      0|		log_debug("%s: unexpected id payload", __func__);
  771|      0|		return (0);
  772|      0|	}
  773|       |
  774|     10|	if (idp->id_type) {
  ------------------
  |  Branch (774:6): [True: 2, False: 8]
  ------------------
  775|      2|		ibuf_free(idb.id_buf);
  776|      2|		log_debug("%s: duplicate id payload", __func__);
  777|      2|		return (-1);
  778|      2|	}
  779|       |
  780|      8|	idp->id_buf = idb.id_buf;
  781|      8|	idp->id_offset = idb.id_offset;
  782|      8|	idp->id_type = idb.id_type;
  783|       |
  784|      8|	return (0);
  785|     10|}
ikev2_validate_cert:
  790|    479|{
  791|    479|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  792|       |
  793|    479|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (793:6): [True: 37, False: 442]
  ------------------
  794|     37|		log_debug("%s: malformed payload: too short for header "
  795|     37|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  796|     37|		return (-1);
  797|     37|	}
  798|    442|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  799|       |
  800|    442|	return (0);
  801|    479|}
ikev2_pld_cert:
  806|    479|{
  807|    479|	struct ikev2_cert		 cert;
  808|    479|	uint8_t				*buf;
  809|    479|	size_t				 len;
  810|    479|	struct iked_id			*certid;
  811|    479|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  812|    479|	const struct iked_sa		*sa = msg->msg_sa;
  813|    479|	int				 i;
  814|       |
  815|    479|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (815:6): [True: 37, False: 442]
  ------------------
  816|     37|		return (-1);
  817|    442|	offset += sizeof(cert);
  818|       |
  819|    442|	buf = msgbuf + offset;
  820|    442|	len = left - sizeof(cert);
  821|       |
  822|    442|	log_debug("%s: type %s length %zu",
  823|    442|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  824|       |
  825|    442|	print_hex(buf, 0, len);
  826|       |
  827|    442|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (827:6): [True: 180, False: 262]
  ------------------
  828|    180|		return (0);
  829|       |
  830|       |	/* do not accept internal encoding in the wire */
  831|    262|	if (cert.cert_type == IKEV2_CERT_BUNDLE) {
  ------------------
  |  |  438|    262|#define IKEV2_CERT_BUNDLE		254	/* Private */
  ------------------
  |  Branch (831:6): [True: 10, False: 252]
  ------------------
  832|     10|		log_debug("%s: ignoring IKEV2_CERT_BUNDLE",
  833|     10|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1104|     10|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1103|     10|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  834|     10|		return (0);
  835|     10|	}
  836|       |
  837|    252|	certid = &msg->msg_parent->msg_cert;
  838|    252|	if (certid->id_type) {
  ------------------
  |  Branch (838:6): [True: 193, False: 59]
  ------------------
  839|       |		/* try to set supplemental certs */
  840|    502|		for (i = 0; i < IKED_SCERT_MAX; i++) {
  ------------------
  |  |  476|    502|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (840:15): [True: 432, False: 70]
  ------------------
  841|    432|			certid = &msg->msg_parent->msg_scert[i];
  842|    432|			if (!certid->id_type)
  ------------------
  |  Branch (842:8): [True: 123, False: 309]
  ------------------
  843|    123|				break;
  844|    432|		}
  845|    193|		if (certid->id_type) {
  ------------------
  |  Branch (845:7): [True: 70, False: 123]
  ------------------
  846|     70|			log_debug("%s: too many cert payloads, ignoring",
  847|     70|			   SPI_SA(sa, __func__));
  ------------------
  |  | 1104|     70|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1103|     70|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  848|     70|			return (0);
  849|     70|		}
  850|    193|	}
  851|       |
  852|    182|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (852:6): [True: 0, False: 182]
  ------------------
  853|      0|		log_debug("%s: failed to save cert", __func__);
  854|      0|		return (-1);
  855|      0|	}
  856|    182|	certid->id_type = cert.cert_type;
  857|    182|	certid->id_offset = 0;
  858|       |
  859|    182|	return (0);
  860|    182|}
ikev2_validate_certreq:
  865|  1.73k|{
  866|  1.73k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  867|       |
  868|  1.73k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (868:6): [True: 423, False: 1.31k]
  ------------------
  869|    423|		log_debug("%s: malformed payload: too short for header "
  870|    423|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  871|    423|		return (-1);
  872|    423|	}
  873|  1.31k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  874|       |
  875|  1.31k|	return (0);
  876|  1.73k|}
ikev2_pld_certreq:
  881|  1.73k|{
  882|  1.73k|	struct ikev2_cert		 cert;
  883|  1.73k|	struct iked_certreq		*cr;
  884|  1.73k|	uint8_t				*buf;
  885|  1.73k|	ssize_t				 len;
  886|  1.73k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  887|       |
  888|  1.73k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (888:6): [True: 423, False: 1.31k]
  ------------------
  889|    423|		return (-1);
  890|  1.31k|	offset += sizeof(cert);
  891|       |
  892|  1.31k|	buf = msgbuf + offset;
  893|  1.31k|	len = left - sizeof(cert);
  894|       |
  895|  1.31k|	log_debug("%s: type %s length %zd",
  896|  1.31k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  897|       |
  898|  1.31k|	print_hex(buf, 0, len);
  899|       |
  900|  1.31k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (900:6): [True: 1.21k, False: 95]
  ------------------
  901|  1.21k|		return (0);
  902|       |
  903|     95|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|     95|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (903:6): [True: 31, False: 64]
  ------------------
  904|     31|		if (len == 0) {
  ------------------
  |  Branch (904:7): [True: 20, False: 11]
  ------------------
  905|     20|			log_info("%s: invalid length 0", __func__);
  906|     20|			return (0);
  907|     20|		}
  908|     11|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (908:7): [True: 1, False: 10]
  ------------------
  909|      1|			log_info("%s: invalid certificate request",
  910|      1|			    __func__);
  911|      1|			return (-1);
  912|      1|		}
  913|     11|	}
  914|       |
  915|     74|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (915:6): [True: 0, False: 74]
  ------------------
  916|      0|		log_info("%s: failed to allocate certreq.", __func__);
  917|      0|		return (-1);
  918|      0|	}
  919|     74|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (919:6): [True: 0, False: 74]
  ------------------
  920|      0|		log_info("%s: failed to allocate buffer.", __func__);
  921|      0|		free(cr);
  922|      0|		return (-1);
  923|      0|	}
  924|     74|	cr->cr_type = cert.cert_type;
  925|     74|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|     74|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|     74|	(elm)->field.sqe_next = NULL;					\
  |  |  298|     74|	*(head)->sqh_last = (elm);					\
  |  |  299|     74|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|     74|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  926|       |
  927|     74|	return (0);
  928|     74|}
ikev2_validate_auth:
  933|    724|{
  934|    724|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  935|       |
  936|    724|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (936:6): [True: 119, False: 605]
  ------------------
  937|    119|		log_debug("%s: malformed payload: too short for header "
  938|    119|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  939|    119|		return (-1);
  940|    119|	}
  941|    605|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  942|       |
  943|    605|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (943:6): [True: 329, False: 276]
  ------------------
  944|    329|		log_info("%s: malformed payload: invalid auth method",
  945|    329|		    __func__);
  946|    329|		return (-1);
  947|    329|	}
  948|       |
  949|    276|	return (0);
  950|    605|}
ikev2_pld_auth:
  955|    724|{
  956|    724|	struct ikev2_auth		 auth;
  957|    724|	struct iked_id			*idp;
  958|    724|	uint8_t				*buf;
  959|    724|	size_t				 len;
  960|    724|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  961|       |
  962|    724|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (962:6): [True: 448, False: 276]
  ------------------
  963|    448|		return (-1);
  964|    276|	offset += sizeof(auth);
  965|       |
  966|    276|	buf = msgbuf + offset;
  967|    276|	len = left - sizeof(auth);
  968|       |
  969|    276|	log_debug("%s: method %s length %zu",
  970|    276|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  971|       |
  972|    276|	print_hex(buf, 0, len);
  973|       |
  974|    276|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (974:6): [True: 273, False: 3]
  ------------------
  975|    273|		return (0);
  976|       |
  977|      3|	idp = &msg->msg_parent->msg_auth;
  978|      3|	if (idp->id_type) {
  ------------------
  |  Branch (978:6): [True: 1, False: 2]
  ------------------
  979|      1|		log_debug("%s: duplicate auth payload", __func__);
  980|      1|		return (-1);
  981|      1|	}
  982|       |
  983|      2|	ibuf_free(idp->id_buf);
  984|      2|	idp->id_type = auth.auth_method;
  985|      2|	idp->id_offset = 0;
  986|      2|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (986:6): [True: 0, False: 2]
  ------------------
  987|      0|		return (-1);
  988|       |
  989|      2|	return (0);
  990|      2|}
ikev2_pld_nonce:
  995|     59|{
  996|     59|	size_t		 len;
  997|     59|	uint8_t		*buf;
  998|     59|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  999|       |
 1000|     59|	buf = msgbuf + offset;
 1001|     59|	len = left;
 1002|       |
 1003|     59|	if (len == 0) {
  ------------------
  |  Branch (1003:6): [True: 18, False: 41]
  ------------------
 1004|     18|		log_debug("%s: malformed payload: no NONCE given", __func__);
 1005|     18|		return (-1);
 1006|     18|	}
 1007|       |
 1008|     41|	print_hex(buf, 0, len);
 1009|       |
 1010|     41|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (1010:6): [True: 5, False: 36]
  ------------------
 1011|      5|		if (ibuf_length(msg->msg_parent->msg_nonce)) {
  ------------------
  |  Branch (1011:7): [True: 2, False: 3]
  ------------------
 1012|      2|			log_info("%s: duplicate NONCE payload", __func__);
 1013|      2|			return (-1);
 1014|      2|		}
 1015|      3|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (1015:7): [True: 0, False: 3]
  ------------------
 1016|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1017|      0|			return (-1);
 1018|      0|		}
 1019|      3|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1020|      3|	}
 1021|       |
 1022|     39|	return (0);
 1023|     41|}
ikev2_validate_notify:
 1028|  1.04k|{
 1029|  1.04k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1030|       |
 1031|  1.04k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1031:6): [True: 511, False: 531]
  ------------------
 1032|    511|		log_debug("%s: malformed payload: too short for header "
 1033|    511|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1034|    511|		return (-1);
 1035|    511|	}
 1036|    531|	memcpy(n, msgbuf + offset, sizeof(*n));
 1037|       |
 1038|    531|	return (0);
 1039|  1.04k|}
ikev2_pld_notify:
 1044|  1.04k|{
 1045|  1.04k|	struct ikev2_notify	 n;
 1046|  1.04k|	const struct iked_sa	*sa = msg->msg_sa;
 1047|  1.04k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1048|  1.04k|	uint32_t		 spi32;
 1049|  1.04k|	uint64_t		 spi64;
 1050|  1.04k|	struct iked_spi		*rekey;
 1051|  1.04k|	uint16_t		 type;
 1052|  1.04k|	uint16_t		 signature_hash;
 1053|       |
 1054|  1.04k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1054:6): [True: 511, False: 531]
  ------------------
 1055|    511|		return (-1);
 1056|    531|	type = betoh16(n.n_type);
 1057|       |
 1058|    531|	log_debug("%s: protoid %s spisize %d type %s",
 1059|    531|	    __func__,
 1060|    531|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1061|    531|	    print_map(type, ikev2_n_map));
 1062|       |
 1063|    531|	left -= sizeof(n);
 1064|    531|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1064:6): [True: 0, False: 531]
  ------------------
 1065|      0|		return (-1);
 1066|       |
 1067|    531|	print_hex(buf, 0, left);
 1068|       |
 1069|    531|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1069:6): [True: 265, False: 266]
  ------------------
 1070|    265|		return (0);
 1071|       |
 1072|    266|	switch (type) {
  ------------------
  |  Branch (1072:10): [True: 70, False: 196]
  ------------------
 1073|     13|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|     13|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1073:2): [True: 13, False: 253]
  ------------------
 1074|     32|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|     32|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1074:2): [True: 19, False: 247]
  ------------------
 1075|     32|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1075:7): [True: 2, False: 30]
  ------------------
 1076|      2|			log_debug("%s: malformed payload: hash size mismatch"
 1077|      2|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1078|      2|			return (-1);
 1079|      2|		}
 1080|     30|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1080:7): [True: 0, False: 30]
  ------------------
 1081|     30|		    ikev2_msg_frompeer(msg)) == -1)
 1082|      0|			return (-1);
 1083|     30|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1083:7): [True: 30, False: 0]
  ------------------
 1084|     30|			log_debug("%s: %s detected NAT", __func__,
 1085|     30|			    print_map(type, ikev2_n_map));
 1086|     30|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|     30|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1086:8): [True: 12, False: 18]
  ------------------
 1087|     12|				msg->msg_parent->msg_nat_detected
 1088|     12|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  686|     12|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1089|     18|			else
 1090|     18|				msg->msg_parent->msg_nat_detected
 1091|     18|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  687|     18|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1092|     30|		}
 1093|     30|		print_hex(md, 0, sizeof(md));
 1094|       |		/* remember for MOBIKE */
 1095|     30|		msg->msg_parent->msg_natt_rcvd = 1;
 1096|     30|		break;
 1097|      1|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      1|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1097:2): [True: 1, False: 265]
  ------------------
 1098|      1|		if (!msg->msg_e) {
  ------------------
  |  Branch (1098:7): [True: 0, False: 1]
  ------------------
 1099|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1100|      0|			    __func__);
 1101|      0|			return (-1);
 1102|      0|		}
 1103|       |		/*
 1104|       |		 * If we are the responder, then we only accept
 1105|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1106|       |		 * If we are the initiator, the peer cannot be authenticated.
 1107|       |		 */
 1108|      1|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1108:7): [True: 1, False: 0]
  ------------------
 1109|      1|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      1|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1109:8): [True: 1, False: 0]
  ------------------
 1110|      1|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1111|      1|				    " from unauthenticated initiator",
 1112|      1|				    __func__);
 1113|      1|				return (-1);
 1114|      1|			}
 1115|      1|		} else {
 1116|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1116:8): [True: 0, False: 0]
  ------------------
 1117|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1118|      0|				    " from authenticated responder",
 1119|      0|				    __func__);
 1120|      0|				return (-1);
 1121|      0|			}
 1122|      0|		}
 1123|      0|		msg->msg_parent->msg_flags
 1124|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  694|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1125|      0|		break;
 1126|     11|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|     11|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1126:2): [True: 11, False: 255]
  ------------------
 1127|     11|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|     11|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1127:7): [True: 0, False: 11]
  ------------------
 1128|     11|		    !msg->msg_e) {
  ------------------
  |  Branch (1128:7): [True: 0, False: 0]
  ------------------
 1129|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1130|      0|			    __func__);
 1131|      0|			return (-1);
 1132|      0|		}
 1133|     11|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1133:7): [True: 1, False: 10]
  ------------------
 1134|      1|			log_debug("%s: malformed payload: group size mismatch"
 1135|      1|			    " (%zu != %zu)", __func__, left,
 1136|      1|			    sizeof(msg->msg_parent->msg_group));
 1137|      1|			return (-1);
 1138|      1|		}
 1139|     10|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1140|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  695|     10|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1141|     10|		break;
 1142|     10|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|     10|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1142:2): [True: 10, False: 256]
  ------------------
 1143|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1143:7): [True: 0, False: 10]
  ------------------
 1144|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1145|      0|			    __func__);
 1146|      0|			return (-1);
 1147|      0|		}
 1148|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  693|     10|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1149|     10|		break;
 1150|     17|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|     17|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1150:2): [True: 17, False: 249]
  ------------------
 1151|     17|		if (!msg->msg_e) {
  ------------------
  |  Branch (1151:7): [True: 0, False: 17]
  ------------------
 1152|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1153|      0|			return (-1);
 1154|      0|		}
 1155|     17|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1155:7): [True: 1, False: 16]
  ------------------
 1156|      1|			log_debug("%s: malformed notification", __func__);
 1157|      1|			return (-1);
 1158|      1|		}
 1159|     16|		rekey = &msg->msg_parent->msg_rekey;
 1160|     16|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1160:7): [True: 1, False: 15]
  ------------------
 1161|      1|			log_debug("%s: rekeying of multiple SAs not supported",
 1162|      1|			    __func__);
 1163|      1|			return (-1);
 1164|      1|		}
 1165|     15|		switch (n.n_spisize) {
 1166|     13|		case 4:
  ------------------
  |  Branch (1166:3): [True: 13, False: 2]
  ------------------
 1167|     13|			memcpy(&spi32, buf, left);
 1168|     13|			rekey->spi = betoh32(spi32);
 1169|     13|			break;
 1170|      1|		case 8:
  ------------------
  |  Branch (1170:3): [True: 1, False: 14]
  ------------------
 1171|      1|			memcpy(&spi64, buf, left);
 1172|      1|			rekey->spi = betoh64(spi64);
 1173|      1|			break;
 1174|      1|		default:
  ------------------
  |  Branch (1174:3): [True: 1, False: 14]
  ------------------
 1175|      1|			log_debug("%s: invalid spi size %d", __func__,
 1176|      1|			    n.n_spisize);
 1177|      1|			return (-1);
 1178|     15|		}
 1179|     14|		rekey->spi_size = n.n_spisize;
 1180|     14|		rekey->spi_protoid = n.n_protoid;
 1181|       |
 1182|     14|		log_debug("%s: rekey %s spi %s", __func__,
 1183|     14|		    print_map(n.n_protoid, ikev2_saproto_map),
 1184|     14|		    print_spi(rekey->spi, n.n_spisize));
 1185|     14|		break;
 1186|     10|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|     10|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1186:2): [True: 10, False: 256]
  ------------------
 1187|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1187:7): [True: 0, False: 10]
  ------------------
 1188|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1189|      0|			    __func__);
 1190|      0|			return (-1);
 1191|      0|		}
 1192|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  698|     10|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1193|     10|		break;
 1194|     20|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|     20|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1194:2): [True: 20, False: 246]
  ------------------
 1195|     20|		if (!msg->msg_e) {
  ------------------
  |  Branch (1195:7): [True: 0, False: 20]
  ------------------
 1196|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1197|      0|			    __func__);
 1198|      0|			return (-1);
 1199|      0|		}
 1200|     20|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1200:7): [True: 10, False: 10]
  ------------------
 1201|     20|		    sizeof(msg->msg_parent->msg_transform)) {
 1202|     10|			log_debug("%s: ignoring malformed ipcomp notification",
 1203|     10|			    __func__);
 1204|     10|			return (0);
 1205|     10|		}
 1206|     10|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1207|     10|		    sizeof(msg->msg_parent->msg_cpi));
 1208|     10|		memcpy(&msg->msg_parent->msg_transform,
 1209|     10|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1210|     10|		    sizeof(msg->msg_parent->msg_transform));
 1211|       |
 1212|     10|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1213|     10|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1213:7): [True: 0, False: 10]
  ------------------
 1214|     10|		    betoh16(msg->msg_parent->msg_cpi),
 1215|     10|		    print_map(msg->msg_parent->msg_transform,
 1216|     10|		    ikev2_ipcomp_map), left);
 1217|       |
 1218|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  696|     10|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1219|     10|		break;
 1220|     13|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|     13|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1220:2): [True: 13, False: 253]
  ------------------
 1221|     13|		if (!msg->msg_e) {
  ------------------
  |  Branch (1221:7): [True: 0, False: 13]
  ------------------
 1222|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1223|      0|			    __func__);
 1224|      0|			return (-1);
 1225|      0|		}
 1226|     13|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  692|     13|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1227|     13|		break;
 1228|      3|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|      3|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1228:2): [True: 3, False: 263]
  ------------------
 1229|      3|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  699|      3|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1230|      3|		break;
 1231|     28|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|     28|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1231:2): [True: 28, False: 238]
  ------------------
 1232|     28|		if (!msg->msg_e) {
  ------------------
  |  Branch (1232:7): [True: 0, False: 28]
  ------------------
 1233|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1234|      0|			    __func__);
 1235|      0|			return (-1);
 1236|      0|		}
 1237|     28|		if (left != 0) {
  ------------------
  |  Branch (1237:7): [True: 18, False: 10]
  ------------------
 1238|     18|			log_debug("%s: ignoring malformed mobike"
 1239|     18|			    " notification: %zu", __func__, left);
 1240|     18|			return (0);
 1241|     18|		}
 1242|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  690|     10|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1243|     10|		break;
 1244|     28|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|     28|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1244:2): [True: 28, False: 238]
  ------------------
 1245|     28|		if (!msg->msg_e) {
  ------------------
  |  Branch (1245:7): [True: 0, False: 28]
  ------------------
 1246|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1247|      0|			    __func__);
 1248|      0|			return (-1);
 1249|      0|		}
 1250|     28|		if (left != 0) {
  ------------------
  |  Branch (1250:7): [True: 10, False: 18]
  ------------------
 1251|     10|			log_debug("%s: ignoring malformed transport mode"
 1252|     10|			    " notification: %zu", __func__, left);
 1253|     10|			return (0);
 1254|     10|		}
 1255|     18|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1255:7): [True: 0, False: 18]
  ------------------
 1256|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1256:8): [True: 0, False: 0]
  ------------------
 1257|      0|				log_debug("%s: ignoring transport mode"
 1258|      0|				    " notification (policy)", __func__);
 1259|      0|				return (0);
 1260|      0|			}
 1261|      0|		}
 1262|     18|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  697|     18|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1263|     18|		break;
 1264|     10|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|     10|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1264:2): [True: 10, False: 256]
  ------------------
 1265|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1265:7): [True: 0, False: 10]
  ------------------
 1266|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1267|      0|			    __func__);
 1268|      0|			return (-1);
 1269|      0|		}
 1270|     10|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1270:7): [True: 10, False: 0]
  ------------------
 1271|     10|			log_debug("%s: ignoring update sa addresses"
 1272|     10|			    " notification w/o mobike: %zu", __func__, left);
 1273|     10|			return (0);
 1274|     10|		}
 1275|      0|		if (left != 0) {
  ------------------
  |  Branch (1275:7): [True: 0, False: 0]
  ------------------
 1276|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1277|      0|			    " notification: %zu", __func__, left);
 1278|      0|			return (0);
 1279|      0|		}
 1280|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1281|      0|		break;
 1282|     10|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|     10|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1282:2): [True: 10, False: 256]
  ------------------
 1283|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1283:7): [True: 0, False: 10]
  ------------------
 1284|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1285|      0|			    __func__);
 1286|      0|			return (-1);
 1287|      0|		}
 1288|     10|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1288:7): [True: 10, False: 0]
  ------------------
 1289|     10|			log_debug("%s: ignoring cookie2 notification"
 1290|     10|			    " w/o mobike: %zu", __func__, left);
 1291|     10|			return (0);
 1292|     10|		}
 1293|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1293:7): [True: 0, False: 0]
  |  Branch (1293:34): [True: 0, False: 0]
  ------------------
 1294|      0|			log_debug("%s: ignoring malformed cookie2"
 1295|      0|			    " notification: %zu", __func__, left);
 1296|      0|			return (0);
 1297|      0|		}
 1298|      0|		ibuf_free(msg->msg_cookie2);	/* should not happen */
 1299|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1299:7): [True: 0, False: 0]
  ------------------
 1300|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1301|      0|			return (-1);
 1302|      0|		}
 1303|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1304|      0|		break;
 1305|      1|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      1|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1305:2): [True: 1, False: 265]
  ------------------
 1306|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1306:7): [True: 1, False: 0]
  ------------------
 1307|      1|			log_debug("%s: N_COOKIE encrypted",
 1308|      1|			    __func__);
 1309|      1|			return (-1);
 1310|      1|		}
 1311|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1311:7): [True: 0, False: 0]
  |  Branch (1311:33): [True: 0, False: 0]
  ------------------
 1312|      0|			log_debug("%s: ignoring malformed cookie"
 1313|      0|			    " notification: %zu", __func__, left);
 1314|      0|			return (0);
 1315|      0|		}
 1316|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1317|      0|		print_hex(buf, 0, left);
 1318|       |
 1319|      0|		ibuf_free(msg->msg_cookie);
 1320|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1320:7): [True: 0, False: 0]
  ------------------
 1321|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1322|      0|			return (-1);
 1323|      0|		}
 1324|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1325|      0|		break;
 1326|      1|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|      1|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1326:2): [True: 1, False: 265]
  ------------------
 1327|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1327:7): [True: 1, False: 0]
  ------------------
 1328|      1|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1329|      1|			    __func__);
 1330|      1|			return (-1);
 1331|      1|		}
 1332|      0|		if (left != 0) {
  ------------------
  |  Branch (1332:7): [True: 0, False: 0]
  ------------------
 1333|      0|			log_debug("%s: ignoring malformed fragmentation"
 1334|      0|			    " notification: %zu", __func__, left);
 1335|      0|			return (0);
 1336|      0|		}
 1337|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  689|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1338|      0|		break;
 1339|      1|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      1|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1339:2): [True: 1, False: 265]
  ------------------
 1340|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1340:7): [True: 1, False: 0]
  ------------------
 1341|      1|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1342|      1|			    __func__);
 1343|      1|			return (-1);
 1344|      1|		}
 1345|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1345:7): [True: 0, False: 0]
  ------------------
 1346|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1347|      0|			    __func__);
 1348|      0|			return (-1);
 1349|      0|		}
 1350|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1350:7): [True: 0, False: 0]
  ------------------
 1351|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1352|      0|			    "duplicate notify", __func__);
 1353|      0|			return (0);
 1354|      0|		}
 1355|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1355:7): [True: 0, False: 0]
  ------------------
 1356|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1356:7): [True: 0, False: 0]
  ------------------
 1357|      0|			log_debug("%s: malformed signature hash notification"
 1358|      0|			    "(%zu bytes)", __func__, left);
 1359|      0|			return (0);
 1360|      0|		}
 1361|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1361:10): [True: 0, False: 0]
  ------------------
 1362|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1363|      0|			signature_hash = betoh16(signature_hash);
 1364|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1365|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1366|      0|			    signature_hash);
 1367|      0|			left -= sizeof(signature_hash);
 1368|      0|			buf += sizeof(signature_hash);
 1369|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  499|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1369:8): [True: 0, False: 0]
  ------------------
 1370|      0|				msg->msg_parent->msg_flags
 1371|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  691|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1372|      0|		}
 1373|      0|		break;
 1374|    266|	}
 1375|       |
 1376|    198|	return (0);
 1377|    266|}
ikev2_validate_delete:
 1382|    784|{
 1383|    784|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1384|       |
 1385|    784|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1385:6): [True: 106, False: 678]
  ------------------
 1386|    106|		log_debug("%s: malformed payload: too short for header "
 1387|    106|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1388|    106|		return (-1);
 1389|    106|	}
 1390|    678|	memcpy(del, msgbuf + offset, sizeof(*del));
 1391|       |
 1392|    678|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1392:6): [True: 21, False: 657]
  ------------------
 1393|     21|		log_info("%s: malformed payload: invalid protoid", __func__);
 1394|     21|		return (-1);
 1395|     21|	}
 1396|       |
 1397|    657|	return (0);
 1398|    678|}
ikev2_pld_delete:
 1403|    784|{
 1404|    784|	struct ikev2_delete	 del;
 1405|    784|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1406|    784|	size_t			 cnt, sz, len;
 1407|       |
 1408|    784|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1408:6): [True: 127, False: 657]
  ------------------
 1409|    127|		return (-1);
 1410|       |
 1411|       |	/* Skip if it's a response, then we don't have to deal with it */
 1412|    657|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1412:6): [True: 44, False: 613]
  ------------------
 1413|    657|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1413:6): [True: 0, False: 44]
  ------------------
 1414|      0|		return (0);
 1415|       |
 1416|    657|	cnt = betoh16(del.del_nspi);
 1417|    657|	sz = del.del_spisize;
 1418|       |
 1419|    657|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1420|    657|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1421|    657|	    sz, cnt);
 1422|       |
 1423|    657|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1423:6): [True: 617, False: 40]
  ------------------
 1424|    617|		log_debug("%s: duplicate delete payload", __func__);
 1425|    617|		return (0);
 1426|    617|	}
 1427|       |
 1428|     40|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1429|     40|	msg->msg_parent->msg_del_cnt = cnt;
 1430|     40|	msg->msg_parent->msg_del_spisize = sz;
 1431|       |
 1432|     40|	buf = msgbuf + offset + sizeof(del);
 1433|     40|	len = left - sizeof(del);
 1434|     40|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1434:6): [True: 4, False: 36]
  |  Branch (1434:18): [True: 23, False: 13]
  |  Branch (1434:29): [True: 6, False: 7]
  ------------------
 1435|     33|		return (0);
 1436|       |
 1437|      7|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1437:6): [True: 6, False: 1]
  ------------------
 1438|      6|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1439|      6|		    __func__, len, sz, cnt);
 1440|      6|		return (-1);
 1441|      6|	}
 1442|       |
 1443|      1|	print_hex(buf, 0, len);
 1444|       |
 1445|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1446|       |
 1447|      1|	return (0);
 1448|      7|}
ikev2_validate_tss:
 1453|  1.19k|{
 1454|  1.19k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1455|       |
 1456|  1.19k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1456:6): [True: 137, False: 1.06k]
  ------------------
 1457|    137|		log_debug("%s: malformed payload: too short for header "
 1458|    137|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1459|    137|		return (-1);
 1460|    137|	}
 1461|  1.06k|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1462|       |
 1463|  1.06k|	return (0);
 1464|  1.19k|}
ikev2_pld_tss:
 1469|  1.19k|{
 1470|  1.19k|	struct ikev2_tsp		 tsp;
 1471|  1.19k|	struct ikev2_ts			 ts;
 1472|  1.19k|	size_t				 ts_len, i;
 1473|       |
 1474|  1.19k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1474:6): [True: 137, False: 1.06k]
  ------------------
 1475|    137|		return (-1);
 1476|       |
 1477|  1.06k|	offset += sizeof(tsp);
 1478|  1.06k|	left -= sizeof(tsp);
 1479|       |
 1480|  1.06k|	log_debug("%s: count %d length %zu", __func__,
 1481|  1.06k|	    tsp.tsp_count, left);
 1482|       |
 1483|  1.86k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1483:14): [True: 1.77k, False: 87]
  ------------------
 1484|  1.77k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1484:7): [True: 845, False: 931]
  ------------------
 1485|    845|			return (-1);
 1486|       |
 1487|    931|		log_debug("%s: type %s protoid %u length %d "
 1488|    931|		    "startport %u endport %u", __func__,
 1489|    931|		    print_map(ts.ts_type, ikev2_ts_map),
 1490|    931|		    ts.ts_protoid, betoh16(ts.ts_length),
 1491|    931|		    betoh16(ts.ts_startport),
 1492|    931|		    betoh16(ts.ts_endport));
 1493|       |
 1494|    931|		offset += sizeof(ts);
 1495|    931|		left -= sizeof(ts);
 1496|       |
 1497|    931|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1498|    931|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1498:7): [True: 128, False: 803]
  ------------------
 1499|    128|			return (-1);
 1500|       |
 1501|    803|		offset += ts_len;
 1502|    803|		left -= ts_len;
 1503|    803|	}
 1504|       |
 1505|     87|	return (0);
 1506|  1.06k|}
ikev2_validate_ts:
 1511|  1.77k|{
 1512|  1.77k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1513|  1.77k|	size_t		 ts_length;
 1514|       |
 1515|  1.77k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1515:6): [True: 751, False: 1.02k]
  ------------------
 1516|    751|		log_debug("%s: malformed payload: too short for header "
 1517|    751|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1518|    751|		return (-1);
 1519|    751|	}
 1520|  1.02k|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1521|       |
 1522|  1.02k|	ts_length = betoh16(ts->ts_length);
 1523|  1.02k|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1523:6): [True: 42, False: 983]
  ------------------
 1524|     42|		log_debug("%s: malformed payload: shorter than minimum header "
 1525|     42|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1526|     42|		return (-1);
 1527|     42|	}
 1528|    983|	if (left < ts_length) {
  ------------------
  |  Branch (1528:6): [True: 52, False: 931]
  ------------------
 1529|     52|		log_debug("%s: malformed payload: too long for payload size "
 1530|     52|		    "(%zu < %zu)", __func__, left, ts_length);
 1531|     52|		return (-1);
 1532|     52|	}
 1533|       |
 1534|    931|	return (0);
 1535|    983|}
ikev2_pld_ts:
 1540|    931|{
 1541|    931|	struct sockaddr_in		 start4, end4;
 1542|    931|	struct sockaddr_in6		 start6, end6;
 1543|    931|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
 1544|    931|	uint8_t				*ptr;
 1545|       |
 1546|    931|	ptr = msgbuf + offset;
 1547|       |
 1548|    931|	switch (type) {
 1549|    105|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  460|    105|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1549:2): [True: 105, False: 826]
  ------------------
 1550|    105|		if (left < 2 * 4) {
  ------------------
  |  Branch (1550:7): [True: 18, False: 87]
  ------------------
 1551|     18|			log_debug("%s: malformed payload: too short "
 1552|     18|			    "for ipv4 addr range (%zu < %u)",
 1553|     18|			    __func__, left, 2 * 4);
 1554|     18|			return (-1);
 1555|     18|		}
 1556|       |
 1557|     87|		bzero(&start4, sizeof(start4));
 1558|     87|		start4.sin_family = AF_INET;
 1559|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1560|       |		start4.sin_len = sizeof(start4);
 1561|       |#endif
 1562|     87|		memcpy(&start4.sin_addr.s_addr, ptr, 4);
 1563|     87|		ptr += 4;
 1564|     87|		left -= 4;
 1565|       |
 1566|     87|		bzero(&end4, sizeof(end4));
 1567|     87|		end4.sin_family = AF_INET;
 1568|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1569|       |		end4.sin_len = sizeof(end4);
 1570|       |#endif
 1571|     87|		memcpy(&end4.sin_addr.s_addr, ptr, 4);
 1572|     87|		left -= 4;
 1573|       |
 1574|     87|		log_debug("%s: start %s end %s", __func__,
 1575|     87|		    print_addr(&start4), print_addr(&end4));
 1576|     87|		break;
 1577|    100|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  461|    100|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1577:2): [True: 100, False: 831]
  ------------------
 1578|    100|		if (left < 2 * 16) {
  ------------------
  |  Branch (1578:7): [True: 18, False: 82]
  ------------------
 1579|     18|			log_debug("%s: malformed payload: too short "
 1580|     18|			    "for ipv6 addr range (%zu < %u)",
 1581|     18|			    __func__, left, 2 * 16);
 1582|     18|			return (-1);
 1583|     18|		}
 1584|     82|		bzero(&start6, sizeof(start6));
 1585|     82|		start6.sin6_family = AF_INET6;
 1586|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1587|       |		start6.sin6_len = sizeof(start6);
 1588|       |#endif
 1589|     82|		memcpy(&start6.sin6_addr, ptr, 16);
 1590|     82|		ptr += 16;
 1591|     82|		left -= 16;
 1592|       |
 1593|     82|		bzero(&end6, sizeof(end6));
 1594|     82|		end6.sin6_family = AF_INET6;
 1595|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1596|       |		end6.sin6_len = sizeof(end6);
 1597|       |#endif
 1598|     82|		memcpy(&end6.sin6_addr, ptr, 16);
 1599|     82|		left -= 16;
 1600|       |
 1601|     82|		log_debug("%s: start %s end %s", __func__,
 1602|     82|		    print_addr(&start6), print_addr(&end6));
 1603|     82|		break;
 1604|    726|	default:
  ------------------
  |  Branch (1604:2): [True: 726, False: 205]
  ------------------
 1605|    726|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1606|    726|		return (0);
 1607|    931|	}
 1608|       |
 1609|    169|	if (left > 0) {
  ------------------
  |  Branch (1609:6): [True: 92, False: 77]
  ------------------
 1610|     92|		log_debug("%s: malformed payload: left (%zu) > 0",
 1611|     92|		    __func__, left);
 1612|     92|		return (-1);
 1613|     92|	}
 1614|       |
 1615|     77|	return (0);
 1616|    169|}
ikev2_validate_cp:
 1871|  1.15k|{
 1872|  1.15k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1873|       |
 1874|  1.15k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1874:6): [True: 235, False: 918]
  ------------------
 1875|    235|		log_debug("%s: malformed payload: too short for header "
 1876|    235|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1877|    235|		return (-1);
 1878|    235|	}
 1879|    918|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1880|       |
 1881|    918|	return (0);
 1882|  1.15k|}
ikev2_pld_cp:
 1887|  1.15k|{
 1888|  1.15k|	struct ikev2_cp		 cp;
 1889|  1.15k|	struct ikev2_cfg	*cfg;
 1890|  1.15k|	struct iked_addr	*addr;
 1891|  1.15k|	struct sockaddr_in	*in4;
 1892|  1.15k|	struct sockaddr_in6	*in6;
 1893|  1.15k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
 1894|  1.15k|	uint8_t			*ptr;
 1895|  1.15k|	size_t			 len;
 1896|  1.15k|	int			 cfg_type;
 1897|       |
 1898|  1.15k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1898:6): [True: 235, False: 918]
  ------------------
 1899|    235|		return (-1);
 1900|       |
 1901|    918|	ptr = msgbuf + offset + sizeof(cp);
 1902|    918|	len = left - sizeof(cp);
 1903|       |
 1904|    918|	log_debug("%s: type %s length %zu",
 1905|    918|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1906|    918|	print_hex(ptr, 0, len);
 1907|       |
 1908|  1.77k|	while (len > 0) {
  ------------------
  |  Branch (1908:9): [True: 1.03k, False: 742]
  ------------------
 1909|  1.03k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1909:7): [True: 105, False: 930]
  ------------------
 1910|    105|			log_debug("%s: malformed payload: too short for cfg "
 1911|    105|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1912|    105|			return (-1);
 1913|    105|		}
 1914|    930|		cfg = (struct ikev2_cfg *)ptr;
 1915|       |
 1916|    930|		log_debug("%s: %s 0x%04x length %d", __func__,
 1917|    930|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1918|    930|		    betoh16(cfg->cfg_type),
 1919|    930|		    betoh16(cfg->cfg_length));
 1920|       |
 1921|    930|		ptr += sizeof(*cfg);
 1922|    930|		len -= sizeof(*cfg);
 1923|       |
 1924|    930|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  Branch (1924:7): [True: 69, False: 861]
  ------------------
 1925|     69|			log_debug("%s: malformed payload: too short for "
 1926|     69|			    "cfg_length (%zu < %u)", __func__, len,
 1927|     69|			    betoh16(cfg->cfg_length));
 1928|     69|			return (-1);
 1929|     69|		}
 1930|       |
 1931|    861|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1932|       |
 1933|    861|		cfg_type = betoh16(cfg->cfg_type);
 1934|    861|		switch (cfg_type) {
  ------------------
  |  Branch (1934:11): [True: 431, False: 430]
  ------------------
 1935|    156|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|    156|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1935:3): [True: 156, False: 705]
  ------------------
 1936|    235|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|    235|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1936:3): [True: 79, False: 782]
  ------------------
 1937|    235|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1937:8): [True: 104, False: 131]
  ------------------
 1938|    104|				break;
 1939|    131|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1939:8): [True: 77, False: 54]
  ------------------
 1940|     77|				break;
 1941|       |			/* XXX multiple-valued */
 1942|     54|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  Branch (1942:8): [True: 1, False: 53]
  ------------------
 1943|      1|				log_debug("%s: malformed payload: too short "
 1944|      1|				    "for ipv4 addr (%u < %u)",
 1945|      1|				    __func__, betoh16(cfg->cfg_length), 4);
 1946|      1|				return (-1);
 1947|      1|			}
 1948|     53|			switch(cfg_type) {
 1949|     34|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|     34|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1949:4): [True: 34, False: 19]
  ------------------
 1950|     34|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1950:9): [True: 21, False: 13]
  ------------------
 1951|     21|					log_debug("%s: address already set", __func__);
 1952|     21|					goto skip;
 1953|     21|				}
 1954|     13|				break;
 1955|     19|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|     19|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1955:4): [True: 19, False: 34]
  ------------------
 1956|     19|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1956:9): [True: 10, False: 9]
  ------------------
 1957|     10|					log_debug("%s: dns already set", __func__);
 1958|     10|					goto skip;
 1959|     10|				}
 1960|      9|				break;
 1961|      9|			default:
  ------------------
  |  Branch (1961:4): [True: 0, False: 53]
  ------------------
 1962|      0|				break;
 1963|     53|			}
 1964|     22|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1964:8): [True: 0, False: 22]
  ------------------
 1965|      0|				log_debug("%s: malloc failed", __func__);
 1966|      0|				break;
 1967|      0|			}
 1968|     22|			addr->addr_af = AF_INET;
 1969|     22|			in4 = (struct sockaddr_in *)&addr->addr;
 1970|     22|			in4->sin_family = AF_INET;
 1971|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1972|       |			in4->sin_len = sizeof(*in4);
 1973|       |#endif
 1974|     22|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1975|     22|			switch(cfg_type) {
 1976|     13|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|     13|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1976:4): [True: 13, False: 9]
  ------------------
 1977|     13|				msg->msg_parent->msg_cp_addr = addr;
 1978|     13|				log_debug("%s: IP4_ADDRESS %s", __func__,
 1979|     13|				    print_addr(&addr->addr));
 1980|     13|				break;
 1981|      9|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|      9|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1981:4): [True: 9, False: 13]
  ------------------
 1982|      9|				msg->msg_parent->msg_cp_dns = addr;
 1983|      9|				log_debug("%s: IP4_DNS %s", __func__,
 1984|      9|				    print_addr(&addr->addr));
 1985|      9|				break;
 1986|      0|			default:
  ------------------
  |  Branch (1986:4): [True: 0, False: 22]
  ------------------
 1987|      0|				log_debug("%s: cfg %s", __func__,
 1988|      0|				    print_addr(&addr->addr));
 1989|      0|				break;
 1990|     22|			}
 1991|     22|			break;
 1992|    103|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|    103|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1992:3): [True: 103, False: 758]
  ------------------
 1993|    195|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|    195|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1993:3): [True: 92, False: 769]
  ------------------
 1994|    195|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1994:8): [True: 145, False: 50]
  ------------------
 1995|    145|				break;
 1996|     50|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1996:8): [True: 28, False: 22]
  ------------------
 1997|     28|				break;
 1998|       |			/* XXX multiple-valued */
 1999|     22|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  Branch (1999:8): [True: 1, False: 21]
  ------------------
 2000|      1|				log_debug("%s: malformed payload: too short "
 2001|      1|				    "for ipv6 addr w/prefixlen (%u < %u)",
 2002|      1|				    __func__, betoh16(cfg->cfg_length), 16);
 2003|      1|				return (-1);
 2004|      1|			}
 2005|     21|			switch(cfg_type) {
  ------------------
  |  Branch (2005:11): [True: 0, False: 21]
  ------------------
 2006|     10|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|     10|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2006:4): [True: 10, False: 11]
  ------------------
 2007|     10|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (2007:9): [True: 6, False: 4]
  ------------------
 2008|      6|					log_debug("%s: address6 already set", __func__);
 2009|      6|					goto skip;
 2010|      6|				}
 2011|      4|				break;
 2012|     11|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|     11|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2012:4): [True: 11, False: 10]
  ------------------
 2013|     11|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (2013:9): [True: 10, False: 1]
  ------------------
 2014|     10|					log_debug("%s: dns already set", __func__);
 2015|     10|					goto skip;
 2016|     10|				}
 2017|      1|				break;
 2018|     21|			}
 2019|      5|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (2019:8): [True: 0, False: 5]
  ------------------
 2020|      0|				log_debug("%s: malloc failed", __func__);
 2021|      0|				break;
 2022|      0|			}
 2023|      5|			addr->addr_af = AF_INET6;
 2024|      5|			in6 = (struct sockaddr_in6 *)&addr->addr;
 2025|      5|			in6->sin6_family = AF_INET6;
 2026|       |#ifdef HAVE_SOCKADDR_SA_LEN
 2027|       |			in6->sin6_len = sizeof(*in6);
 2028|       |#endif
 2029|      5|			memcpy(&in6->sin6_addr, ptr, 16);
 2030|      5|			switch(cfg_type) {
 2031|      4|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|      4|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2031:4): [True: 4, False: 1]
  ------------------
 2032|      4|				msg->msg_parent->msg_cp_addr6 = addr;
 2033|      4|				log_debug("%s: IP6_ADDRESS %s", __func__,
 2034|      4|				    print_addr(&addr->addr));
 2035|      4|				break;
 2036|      1|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|      1|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2036:4): [True: 1, False: 4]
  ------------------
 2037|      1|				msg->msg_parent->msg_cp_dns = addr;
 2038|      1|				log_debug("%s: IP6_DNS %s", __func__,
 2039|      1|				    print_addr(&addr->addr));
 2040|      1|				break;
 2041|      0|			default:
  ------------------
  |  Branch (2041:4): [True: 0, False: 5]
  ------------------
 2042|      0|				log_debug("%s: cfg %s/%d", __func__,
 2043|      0|				    print_addr(&addr->addr), ptr[16]);
 2044|      0|				break;
 2045|      5|			}
 2046|      5|			break;
 2047|    861|		}
 2048|       |
 2049|    859| skip:
 2050|    859|		ptr += betoh16(cfg->cfg_length);
 2051|    859|		len -= betoh16(cfg->cfg_length);
 2052|    859|	}
 2053|       |
 2054|    742|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2054:6): [True: 693, False: 49]
  ------------------
 2055|    693|		return (0);
 2056|       |
 2057|     49|	msg->msg_parent->msg_cp = cp.cp_type;
 2058|       |
 2059|     49|	return (0);
 2060|    742|}
ikev2_validate_eap:
 2065|  3.17k|{
 2066|  3.17k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2067|       |
 2068|  3.17k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2068:6): [True: 1.19k, False: 1.97k]
  ------------------
 2069|  1.19k|		log_debug("%s: malformed payload: too short for header "
 2070|  1.19k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2071|  1.19k|		return (-1);
 2072|  1.19k|	}
 2073|  1.97k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2074|       |
 2075|  1.97k|	return (0);
 2076|  3.17k|}
ikev2_pld_eap:
 2081|  3.17k|{
 2082|  3.17k|	struct eap_header		 hdr;
 2083|  3.17k|	struct eap_message		*eap = NULL;
 2084|  3.17k|	const struct iked_sa		*sa = msg->msg_sa;
 2085|  3.17k|	size_t				 len;
 2086|       |
 2087|  3.17k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2087:6): [True: 1.19k, False: 1.97k]
  ------------------
 2088|  1.19k|		return (-1);
 2089|  1.97k|	len = betoh16(hdr.eap_length);
 2090|       |
 2091|  1.97k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2091:6): [True: 842, False: 1.13k]
  ------------------
 2092|    842|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1104|    842|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1103|    842|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2093|    842|		    print_map(hdr.eap_code, eap_code_map),
 2094|    842|		    hdr.eap_id, betoh16(hdr.eap_length));
 2095|  1.13k|	} else {
 2096|       |		/* Now try to get the indicated length */
 2097|  1.13k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2097:7): [True: 432, False: 705]
  ------------------
 2098|    432|			log_debug("%s: invalid EAP length", __func__);
 2099|    432|			return (-1);
 2100|    432|		}
 2101|       |
 2102|    705|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1104|    705|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1103|    705|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2103|    705|		    print_map(eap->eap_code, eap_code_map),
 2104|    705|		    eap->eap_id, betoh16(eap->eap_length),
 2105|    705|		    print_map(eap->eap_type, eap_type_map));
 2106|       |
 2107|    705|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2107:7): [True: 0, False: 705]
  ------------------
 2108|      0|			return (-1);
 2109|    705|		msg->msg_parent->msg_eap.eam_found = 1;
 2110|    705|	}
 2111|       |
 2112|  1.54k|	return (0);
 2113|  1.97k|}

ibuf_new:
   47|  1.27k|{
   48|  1.27k|	struct ibuf	*buf;
   49|       |
   50|  1.27k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (50:6): [True: 0, False: 1.27k]
  ------------------
   51|  1.27k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  1.27k|#define IKED_MSGBUF_MAX		8192
  ------------------
   52|      0|		return (NULL);
   53|       |
   54|  1.27k|	if (len == 0)
  ------------------
  |  Branch (54:6): [True: 145, False: 1.12k]
  ------------------
   55|    145|		return (buf);
   56|       |
   57|  1.12k|	if (data == NULL) {
  ------------------
  |  Branch (57:6): [True: 0, False: 1.12k]
  ------------------
   58|      0|		if (ibuf_reserve(buf, len) == NULL) {
  ------------------
  |  Branch (58:7): [True: 0, False: 0]
  ------------------
   59|      0|			ibuf_free(buf);
   60|      0|			return (NULL);
   61|      0|		}
   62|  1.12k|	} else {
   63|  1.12k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 1.12k]
  ------------------
   64|      0|			ibuf_free(buf);
   65|      0|			return (NULL);
   66|      0|		}
   67|  1.12k|	}
   68|       |
   69|  1.12k|	return (buf);
   70|  1.12k|}
ibuf_length:
   80|     10|{
   81|     10|	if (buf == NULL || buf->buf == NULL)
  ------------------
  |  Branch (81:6): [True: 7, False: 3]
  |  Branch (81:21): [True: 0, False: 3]
  ------------------
   82|      7|		return (0);
   83|      3|	return (ibuf_size(buf));
   84|     10|}

log_getverbose:
   82|  8.78k|{
   83|  8.78k|	return (verbose);
   84|  8.78k|}
vlog:
   98|  1.92k|{
   99|  1.92k|	char	*nfmt;
  100|  1.92k|	int	 saved_errno = errno;
  101|       |
  102|  1.92k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 1.92k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  1.92k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  1.92k|	errno = saved_errno;
  116|  1.92k|}
log_info:
  158|  1.92k|{
  159|  1.92k|	va_list	 ap;
  160|       |
  161|  1.92k|	va_start(ap, emsg);
  162|  1.92k|	vlog(LOG_INFO, emsg, ap);
  163|  1.92k|	va_end(ap);
  164|  1.92k|}
log_debug:
  168|  46.8k|{
  169|  46.8k|	va_list	 ap;
  170|       |
  171|  46.8k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 46.8k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|  46.8k|}

socket_getport:
   71|    365|{
   72|    365|	switch (sa->sa_family) {
   73|    196|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 196, False: 169]
  ------------------
   74|    196|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|    169|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 169, False: 196]
  ------------------
   76|    169|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 365]
  ------------------
   78|      0|		return (0);
   79|    365|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|    365|}
print_spi:
  499|  3.74k|{
  500|  3.74k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  3.74k|	static int		 i = 0;
  502|  3.74k|	char			*ptr;
  503|       |
  504|  3.74k|	ptr = buf[i];
  505|       |
  506|  3.74k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 3.74k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|     93|	case 4:
  ------------------
  |  Branch (510:2): [True: 93, False: 3.65k]
  ------------------
  511|     93|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|     93|		break;
  513|  1.49k|	case 8:
  ------------------
  |  Branch (513:2): [True: 1.49k, False: 2.24k]
  ------------------
  514|  1.49k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  1.49k|		break;
  516|  2.15k|	default:
  ------------------
  |  Branch (516:2): [True: 2.15k, False: 1.59k]
  ------------------
  517|  2.15k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  2.15k|		break;
  519|  3.74k|	}
  520|       |
  521|  3.74k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  3.74k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 468, False: 3.28k]
  ------------------
  522|    468|		i = 0;
  523|       |
  524|  3.74k|	return (ptr);
  525|  3.74k|}
print_map:
  529|  57.5k|{
  530|  57.5k|	unsigned int		 i;
  531|  57.5k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|  57.5k|	static int		 idx = 0;
  533|  57.5k|	const char		*name = NULL;
  534|       |
  535|  57.5k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  57.5k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 7.19k, False: 50.3k]
  ------------------
  536|  7.19k|		idx = 0;
  537|  57.5k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  1.03M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 978k, False: 57.5k]
  ------------------
  540|   978k|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 42.3k, False: 936k]
  ------------------
  541|  42.3k|			name = map[i].cm_name;
  542|   978k|	}
  543|       |
  544|  57.5k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 15.2k, False: 42.3k]
  ------------------
  545|  15.2k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|  42.3k|	else
  547|  42.3k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|  57.5k|	return (buf[idx++]);
  550|  57.5k|}
print_hex:
  561|  8.78k|{
  562|  8.78k|	unsigned int	 i;
  563|       |
  564|  8.78k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 8.78k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|  8.78k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_addr:
  731|    365|{
  732|    365|	static char	 sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  733|    365|	static int	 idx;
  734|    365|	struct sockaddr	*sa = addr;
  735|    365|	char		*buf;
  736|    365|	size_t		 len;
  737|    365|	char		 pbuf[7];
  738|    365|	in_port_t	 port;
  739|       |
  740|    365|	buf = sbuf[idx];
  741|    365|	len = sizeof(sbuf[idx]);
  742|    365|	if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|    365|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (742:6): [True: 45, False: 320]
  ------------------
  743|     45|		idx = 0;
  744|       |
  745|    365|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (745:6): [True: 0, False: 365]
  ------------------
  746|      0|		strlcpy(buf, "any", len);
  747|      0|		return (buf);
  748|      0|	}
  749|       |
  750|    365|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  113|    365|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (113:3): [True: 196, False: 169]
  |  |  ------------------
  |  |  114|    365|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (114:2): [True: 169, False: 0]
  |  |  ------------------
  |  |  115|    169|	sizeof(struct sockaddr))
  ------------------
  |  Branch (750:6): [True: 0, False: 365]
  ------------------
  751|    365|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  752|      0|		strlcpy(buf, "unknown", len);
  753|      0|		return (buf);
  754|      0|	}
  755|       |
  756|    365|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (756:6): [True: 0, False: 365]
  ------------------
  757|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  758|      0|		(void)strlcat(buf, pbuf, len);
  759|      0|	}
  760|       |
  761|    365|	return (buf);
  762|    365|}

eap_parse:
   60|    705|{
   61|    705|	return (0);
   62|    705|}
ikev2_msg_frompeer:
   67|  18.1k|{
   68|  18.1k|	struct iked_sa		*sa = msg->msg_sa;
   69|  18.1k|	struct ike_header	*hdr;
   70|       |
   71|  18.1k|	msg = msg->msg_parent;
   72|       |
   73|  18.1k|	if (sa == NULL ||
  ------------------
  |  Branch (73:6): [True: 0, False: 18.1k]
  ------------------
   74|  18.1k|	    (hdr = ibuf_seek(msg->msg_data, 0, sizeof(*hdr))) == NULL)
  ------------------
  |  Branch (74:6): [True: 0, False: 18.1k]
  ------------------
   75|      0|		return (0);
   76|       |
   77|  18.1k|	if (!sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (77:6): [True: 18.1k, False: 0]
  ------------------
   78|  18.1k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR))
  ------------------
  |  |   19|  18.1k|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (78:6): [True: 1.01k, False: 17.1k]
  ------------------
   79|  1.01k|		return (1);
   80|  17.1k|	else if (sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (80:11): [True: 0, False: 17.1k]
  ------------------
   81|  17.1k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR) == 0)
  ------------------
  |  |   19|      0|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (81:6): [True: 0, False: 0]
  ------------------
   82|      0|		return (1);
   83|       |
   84|  17.1k|	return (0);
   85|  18.1k|}
ikev2_ikesa_info:
  101|  1.62k|{
  102|  1.62k|	return "";
  103|  1.62k|}
sa_stateok:
  120|     12|{
  121|     12|	return (0);
  122|     12|}
ikev2_nat_detection:
  164|     30|{
  165|     30|	return (0);
  166|     30|}
ikev2_print_id:
  178|    303|{
  179|    303|	return (0);
  180|    303|}
config_add_proposal:
  191|      2|{
  192|      2|	return (NULL);
  193|      2|}
ikev2_send_informational:
  208|     67|{
  209|     67|	return (0);
  210|     67|}
ikev2_msg_cleanup:
  249|    700|{
  250|    700|	struct iked_certreq *cr;
  251|    700|	struct iked_proposal *prop, *proptmp;
  252|       |
  253|    700|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (253:6): [True: 700, False: 0]
  ------------------
  254|    700|		ibuf_free(msg->msg_nonce);
  255|    700|		ibuf_free(msg->msg_ke);
  256|    700|		ibuf_free(msg->msg_auth.id_buf);
  257|    700|		ibuf_free(msg->msg_peerid.id_buf);
  258|    700|		ibuf_free(msg->msg_localid.id_buf);
  259|    700|		ibuf_free(msg->msg_cert.id_buf);
  260|    700|		ibuf_free(msg->msg_cookie);
  261|    700|		ibuf_free(msg->msg_cookie2);
  262|    700|		ibuf_free(msg->msg_del_buf);
  263|    700|		free(msg->msg_eap.eam_user);
  264|    700|		free(msg->msg_cp_addr);
  265|    700|		free(msg->msg_cp_addr6);
  266|       |
  267|    700|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|    700|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|    700|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|    700|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  1.40k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 700]
  |  |  ------------------
  |  |  447|    700|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|    700|	    (var) = (tvar))
  ------------------
  268|    700|		    proptmp) {
  269|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  270|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (270:8): [True: 0, False: 0]
  ------------------
  271|      0|				free(prop->prop_xforms);
  272|      0|			free(prop);
  273|      0|		}
  274|       |
  275|    774|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|    774|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (275:10): [True: 74, False: 700]
  ------------------
  276|     74|			ibuf_free(cr->cr_data);
  277|     74|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|     74|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|     74|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 14, False: 60]
  |  |  ------------------
  |  |  310|     74|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|     74|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  278|     74|			free(cr);
  279|     74|		}
  280|    700|	}
  281|       |
  282|    700|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (282:6): [True: 700, False: 0]
  ------------------
  283|    700|		ibuf_free(msg->msg_data);
  284|    700|		msg->msg_data = NULL;
  285|    700|	}
  286|    700|}

LLVMFuzzerTestOneInput:
  107|    701|{
  108|    701|	struct ibuf		*fuzzed;
  109|    701|	struct ike_header	 hdr;
  110|    701|	struct iked_message	 msg;
  111|       |
  112|    701|	bzero(&hdr, sizeof(hdr));
  113|    701|	bzero(&msg, sizeof(msg));
  114|       |
  115|    701|	fuzzed = ibuf_new(data, size);
  116|    701|	if (fuzzed == NULL){
  ------------------
  |  Branch (116:6): [True: 0, False: 701]
  ------------------
  117|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  118|      0|		    "(hint: fuzz-input too long?)");
  119|      0|		return -1;
  120|      0|	}	
  121|       |	
  122|       |	/* size too small? */
  123|    701|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (123:6): [True: 1, False: 700]
  ------------------
  124|      1|		ibuf_free(fuzzed);
  125|      1|		return 0;
  126|      1|	}	       
  127|       |
  128|    700|	prepare_header(&hdr, fuzzed);
  129|    700|	prepare_message(&msg, fuzzed);
  130|       |
  131|    700|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  132|       |
  133|    700|	ikev2_msg_cleanup(NULL, &msg);
  134|       |
  135|    700|	return 0;
  136|    701|}
test_parser_fuzz.c:prepare_header:
   75|    700|{
   76|    700|	bzero(hdr, sizeof(*hdr));
   77|    700|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|    700|	    sizeof(hdr->ike_ispi));
   79|    700|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|    700|	    sizeof(hdr->ike_rspi));
   81|    700|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|    700|	hdr->ike_version = get_version(ibuf_data(data));
   83|    700|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|    700|	hdr->ike_length = get_length(ibuf_data(data));
   85|    700|}
test_parser_fuzz.c:get_icookie:
   39|    700|{
   40|    700|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|    700|#define OFFSET_ICOOKIE		0
  ------------------
   41|    700|}
test_parser_fuzz.c:get_rcookie:
   45|    700|{
   46|    700|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|    700|#define OFFSET_RCOOKIE		8
  ------------------
   47|    700|}
test_parser_fuzz.c:get_nextpayload:
   51|    700|{
   52|    700|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|    700|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|    700|}
test_parser_fuzz.c:get_version:
   57|    700|{
   58|    700|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|    700|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|    700|}
test_parser_fuzz.c:get_exchange:
   63|    700|{
   64|    700|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|    700|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|    700|}
test_parser_fuzz.c:get_length:
   69|    700|{
   70|    700|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|    700|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|    700|}
test_parser_fuzz.c:prepare_message:
   89|    700|{
   90|    700|	static struct iked_sa	sa;
   91|       |
   92|    700|	bzero(&sa, sizeof(sa));
   93|    700|	bzero(msg, sizeof(*msg));
   94|       |
   95|    700|	msg->msg_sa = &sa;
   96|    700|	msg->msg_data = data;
   97|    700|	msg->msg_e = 1;
   98|    700|	msg->msg_parent = msg;
   99|       |
  100|    700|	TAILQ_INIT(&msg->msg_proposals);
  ------------------
  |  |  465|    700|#define	TAILQ_INIT(head) do {						\
  |  |  466|    700|	(head)->tqh_first = NULL;					\
  |  |  467|    700|	(head)->tqh_last = &(head)->tqh_first;				\
  |  |  468|    700|} while (0)
  |  |  ------------------
  |  |  |  Branch (468:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  101|    700|	SIMPLEQ_INIT(&msg->msg_certreqs);
  ------------------
  |  |  285|    700|#define	SIMPLEQ_INIT(head) do {						\
  |  |  286|    700|	(head)->sqh_first = NULL;					\
  |  |  287|    700|	(head)->sqh_last = &(head)->sqh_first;				\
  |  |  288|    700|} while (0)
  |  |  ------------------
  |  |  |  Branch (288:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  102|    700|}

