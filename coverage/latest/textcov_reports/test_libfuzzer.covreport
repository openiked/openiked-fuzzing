freezero:
   25|      1|{
   26|       |	/* This is legal. */
   27|      1|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 0, False: 1]
  ------------------
   28|      0|		return;
   29|       |
   30|      1|	explicit_bzero(ptr, sz);
   31|      1|	free(ptr);
   32|      1|}

ibuf_open:
   39|  4.85k|{
   40|  4.85k|	struct ibuf	*buf;
   41|       |
   42|  4.85k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (42:6): [True: 0, False: 4.85k]
  ------------------
   43|      0|		return (NULL);
   44|  4.85k|	if ((buf->buf = malloc(len)) == NULL) {
  ------------------
  |  Branch (44:6): [True: 0, False: 4.85k]
  ------------------
   45|      0|		free(buf);
   46|      0|		return (NULL);
   47|      0|	}
   48|  4.85k|	buf->size = buf->max = len;
   49|  4.85k|	buf->fd = -1;
   50|       |
   51|  4.85k|	return (buf);
   52|  4.85k|}
ibuf_dynamic:
   56|  4.85k|{
   57|  4.85k|	struct ibuf	*buf;
   58|       |
   59|  4.85k|	if (max < len)
  ------------------
  |  Branch (59:6): [True: 0, False: 4.85k]
  ------------------
   60|      0|		return (NULL);
   61|       |
   62|  4.85k|	if ((buf = ibuf_open(len)) == NULL)
  ------------------
  |  Branch (62:6): [True: 0, False: 4.85k]
  ------------------
   63|      0|		return (NULL);
   64|       |
   65|  4.85k|	if (max > 0)
  ------------------
  |  Branch (65:6): [True: 4.85k, False: 0]
  ------------------
   66|  4.85k|		buf->max = max;
   67|       |
   68|  4.85k|	return (buf);
   69|  4.85k|}
ibuf_add:
   93|  4.85k|{
   94|  4.85k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (94:6): [True: 0, False: 4.85k]
  ------------------
   95|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (95:7): [True: 0, False: 0]
  ------------------
   96|      0|			return (-1);
   97|       |
   98|  4.85k|	memcpy(buf->buf + buf->wpos, data, len);
   99|  4.85k|	buf->wpos += len;
  100|  4.85k|	return (0);
  101|  4.85k|}
ibuf_seek:
  119|   503k|{
  120|       |	/* only allowed to seek in already written parts */
  121|   503k|	if (pos + len > buf->wpos)
  ------------------
  |  Branch (121:6): [True: 4.23k, False: 499k]
  ------------------
  122|  4.23k|		return (NULL);
  123|       |
  124|   499k|	return (buf->buf + pos);
  125|   503k|}
ibuf_size:
  129|  2.32k|{
  130|  2.32k|	return (buf->wpos);
  131|  2.32k|}
ibuf_free:
  218|      1|{
  219|      1|	if (buf == NULL)
  ------------------
  |  Branch (219:6): [True: 0, False: 1]
  ------------------
  220|      0|		return;
  221|      1|	freezero(buf->buf, buf->size);
  222|      1|	free(buf);
  223|      1|}

strlcpy:
   29|   294k|{
   30|   294k|	const char *osrc = src;
   31|   294k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|   294k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 294k, False: 0]
  ------------------
   35|  1.52M|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 1.52M, False: 124]
  ------------------
   36|  1.52M|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 294k, False: 1.22M]
  ------------------
   37|   294k|				break;
   38|  1.52M|		}
   39|   294k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|   294k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 124, False: 294k]
  ------------------
   43|    124|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 124, False: 0]
  ------------------
   44|    124|			*dst = '\0';		/* NUL-terminate dst */
   45|    124|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 124]
  ------------------
   46|      0|			;
   47|    124|	}
   48|       |
   49|   294k|	return(src - osrc - 1);	/* count does not include NUL */
   50|   294k|}

ikev2_pld_parse:
  117|  2.32k|{
  118|  2.32k|	log_debug("%s: header ispi %s rspi %s"
  119|  2.32k|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  120|  2.32k|	    " msgid %d length %u response %d", __func__,
  121|  2.32k|	    print_spi(betoh64(hdr->ike_ispi), 8),
  ------------------
  |  |   46|  2.32k|#define betoh64	be64toh
  ------------------
  122|  2.32k|	    print_spi(betoh64(hdr->ike_rspi), 8),
  ------------------
  |  |   46|  2.32k|#define betoh64	be64toh
  ------------------
  123|  2.32k|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  124|  2.32k|	    hdr->ike_version,
  125|  2.32k|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  126|  2.32k|	    hdr->ike_flags,
  127|  2.32k|	    betoh32(hdr->ike_msgid),
  ------------------
  |  |   43|  2.32k|#define betoh32	be32toh
  ------------------
  128|  2.32k|	    betoh32(hdr->ike_length),
  ------------------
  |  |   43|  2.32k|#define betoh32	be32toh
  ------------------
  129|  2.32k|	    msg->msg_response);
  130|       |
  131|  2.32k|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  |   43|  2.32k|#define betoh32	be32toh
  ------------------
  |  Branch (131:6): [True: 6, False: 2.32k]
  ------------------
  132|      6|		log_debug("%s: short message", __func__);
  133|      6|		return (-1);
  134|      6|	}
  135|       |
  136|  2.32k|	offset += sizeof(*hdr);
  137|       |
  138|  2.32k|	return (ikev2_pld_payloads(env, msg, offset,
  139|  2.32k|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  ------------------
  |  |   43|  2.32k|#define betoh32	be32toh
  ------------------
  140|  2.32k|}
ikev2_validate_pld:
  145|   145k|{
  146|   145k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  147|   145k|	size_t		 pld_length;
  148|       |
  149|       |	/* We need at least the generic header. */
  150|   145k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (150:6): [True: 305, False: 145k]
  ------------------
  151|    305|		log_debug("%s: malformed payload: too short for generic "
  152|    305|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  153|    305|		return (-1);
  154|    305|	}
  155|   145k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  156|       |
  157|       |	/*
  158|       |	 * We need at least the specified number of bytes.
  159|       |	 * pld_length is the full size of the payload including
  160|       |	 * the generic payload header.
  161|       |	 */
  162|   145k|	pld_length = betoh16(pld->pld_length);
  ------------------
  |  |   40|   145k|#define betoh16	be16toh
  ------------------
  163|   145k|	if (left < pld_length) {
  ------------------
  |  Branch (163:6): [True: 990, False: 144k]
  ------------------
  164|    990|		log_debug("%s: malformed payload: shorter than specified "
  165|    990|		    "(%zu < %zu)", __func__, left, pld_length);
  166|    990|		return (-1);
  167|    990|	}
  168|       |	/*
  169|       |	 * Sanity check the specified payload size, it must
  170|       |	 * be at least the size of the generic payload header.
  171|       |	 */
  172|   144k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (172:6): [True: 280, False: 144k]
  ------------------
  173|    280|		log_debug("%s: malformed payload: shorter than minimum "
  174|    280|		    "header size (%zu < %zu)", __func__, pld_length,
  175|    280|		    sizeof(*pld));
  176|    280|		return (-1);
  177|    280|	}
  178|       |
  179|   144k|	return (0);
  180|   144k|}
ikev2_pld_payloads:
  185|  2.32k|{
  186|  2.32k|	struct ikev2_payload	 pld;
  187|  2.32k|	unsigned int		 e;
  188|  2.32k|	int			 ret;
  189|  2.32k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  190|  2.32k|	size_t			 total, left;
  191|       |
  192|       |	/* Check if message was decrypted in an E payload */
  193|  2.32k|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|  2.32k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (193:6): [True: 2.32k, False: 0]
  ------------------
  194|       |
  195|       |	/* Bytes left in datagram. */
  196|  2.32k|	total = length - offset;
  197|       |
  198|   146k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (198:9): [True: 146k, False: 239]
  |  Branch (198:25): [True: 145k, False: 505]
  ------------------
  199|   145k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (199:7): [True: 1.57k, False: 144k]
  ------------------
  200|  1.57k|			return (-1);
  201|       |
  202|   144k|		log_debug("%s: %spayload %s"
  203|   144k|		    " nextpayload %s critical 0x%02x length %d",
  204|   144k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (204:17): [True: 144k, False: 0]
  ------------------
  205|   144k|		    print_map(payload, ikev2_payload_map),
  206|   144k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  207|   144k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|   144k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  208|   144k|		    betoh16(pld.pld_length));
  ------------------
  |  |   40|   144k|#define betoh16	be16toh
  ------------------
  209|       |
  210|       |		/* Skip over generic payload header. */
  211|   144k|		offset += sizeof(pld);
  212|   144k|		total -= sizeof(pld);
  213|   144k|		left = betoh16(pld.pld_length) - sizeof(pld);
  ------------------
  |  |   40|   144k|#define betoh16	be16toh
  ------------------
  214|   144k|		ret = 0;
  215|       |
  216|   144k|		switch (payload | e) {
  217|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (217:3): [True: 0, False: 144k]
  ------------------
  218|  26.2k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  26.2k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  26.2k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (218:3): [True: 26.2k, False: 117k]
  ------------------
  219|  26.2k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  220|  26.2k|			break;
  221|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (221:3): [True: 0, False: 144k]
  ------------------
  222|  3.64k|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|  3.64k|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|  3.64k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (222:3): [True: 3.64k, False: 140k]
  ------------------
  223|  3.64k|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  224|  3.64k|			break;
  225|  5.80k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|  5.80k|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|  5.80k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (225:3): [True: 5.80k, False: 138k]
  ------------------
  226|  7.51k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  7.51k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  7.51k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 1.70k, False: 142k]
  ------------------
  227|  7.51k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  228|  7.51k|			    payload);
  229|  7.51k|			break;
  230|  2.06k|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|  2.06k|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|  2.06k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (230:3): [True: 2.06k, False: 142k]
  ------------------
  231|  2.06k|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  232|  2.06k|			break;
  233|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (233:3): [True: 0, False: 144k]
  ------------------
  234|  15.7k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  15.7k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  15.7k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (234:3): [True: 15.7k, False: 128k]
  ------------------
  235|  15.7k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  236|  15.7k|			break;
  237|  3.39k|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|  3.39k|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|  3.39k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (237:3): [True: 3.39k, False: 140k]
  ------------------
  238|  3.39k|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  239|  3.39k|			break;
  240|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (240:3): [True: 0, False: 144k]
  ------------------
  241|    559|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|    559|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|    559|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (241:3): [True: 559, False: 143k]
  ------------------
  242|    559|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  243|    559|			break;
  244|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (244:3): [True: 0, False: 144k]
  ------------------
  245|  5.94k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  5.94k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  5.94k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (245:3): [True: 5.94k, False: 138k]
  ------------------
  246|  5.94k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  247|  5.94k|			break;
  248|  4.52k|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|  4.52k|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|  4.52k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (248:3): [True: 4.52k, False: 139k]
  ------------------
  249|  4.52k|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  250|  4.52k|			break;
  251|  3.86k|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|  3.86k|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|  3.86k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (251:3): [True: 3.86k, False: 140k]
  ------------------
  252|  11.2k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  11.2k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  11.2k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 7.37k, False: 136k]
  ------------------
  253|  11.2k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  254|  11.2k|			break;
  255|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (255:3): [True: 0, False: 144k]
  ------------------
  256|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  257|      0|			break;
  258|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (258:3): [True: 0, False: 144k]
  ------------------
  259|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  260|      0|			break;
  261|  12.5k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  12.5k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  12.5k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (261:3): [True: 12.5k, False: 131k]
  ------------------
  262|  12.5k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  263|  12.5k|			break;
  264|  25.8k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  25.8k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  25.8k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (264:3): [True: 25.8k, False: 118k]
  ------------------
  265|  25.8k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  266|  25.8k|			break;
  267|  24.8k|		default:
  ------------------
  |  Branch (267:3): [True: 24.8k, False: 119k]
  ------------------
  268|  24.8k|			print_hex(msgbuf, offset,
  269|  24.8k|			    betoh16(pld.pld_length) - sizeof(pld));
  ------------------
  |  |   40|  24.8k|#define betoh16	be16toh
  ------------------
  270|  24.8k|			break;
  271|   144k|		}
  272|       |
  273|   144k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (273:7): [True: 73.6k, False: 70.4k]
  |  Branch (273:19): [True: 0, False: 73.6k]
  ------------------
  274|      0|			(void)ikev2_send_informational(env, msg);
  275|      0|			return (-1);
  276|      0|		}
  277|       |
  278|       |		/* Encrypted payloads must appear last */
  279|   144k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|   144k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (279:7): [True: 1, False: 144k]
  ------------------
  280|   144k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|   144k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (280:7): [True: 1, False: 144k]
  ------------------
  281|      2|			return (0);
  282|       |
  283|   144k|		payload = pld.pld_nextpayload;
  284|   144k|		offset += left;
  285|   144k|		total -= left;
  286|   144k|	}
  287|       |
  288|    744|	return (0);
  289|  2.32k|}
ikev2_validate_sa:
  294|  29.4k|{
  295|  29.4k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  296|  29.4k|	size_t		 sap_length;
  297|       |
  298|  29.4k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (298:6): [True: 13.5k, False: 15.9k]
  ------------------
  299|  13.5k|		log_debug("%s: malformed payload: too short for header "
  300|  13.5k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  301|  13.5k|		return (-1);
  302|  13.5k|	}
  303|  15.9k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  304|       |
  305|  15.9k|	sap_length = betoh16(sap->sap_length);
  ------------------
  |  |   40|  15.9k|#define betoh16	be16toh
  ------------------
  306|  15.9k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (306:6): [True: 3.39k, False: 12.5k]
  ------------------
  307|  3.39k|		log_debug("%s: malformed payload: shorter than minimum header "
  308|  3.39k|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  309|  3.39k|		return (-1);
  310|  3.39k|	}
  311|  12.5k|	if (left < sap_length) {
  ------------------
  |  Branch (311:6): [True: 3.03k, False: 9.47k]
  ------------------
  312|  3.03k|		log_debug("%s: malformed payload: too long for actual payload "
  313|  3.03k|		    "size (%zu < %zu)", __func__, left, sap_length);
  314|  3.03k|		return (-1);
  315|  3.03k|	}
  316|       |	/*
  317|       |	 * If there is only one proposal, sap_length must be the
  318|       |	 * total payload size.
  319|       |	 */
  320|  9.47k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (320:6): [True: 800, False: 8.67k]
  |  Branch (320:24): [True: 23, False: 777]
  ------------------
  321|     23|		log_debug("%s: malformed payload: SA payload length mismatches "
  322|     23|		    "single proposal substructure length (%lu != %zu)",
  323|     23|		    __func__, left, sap_length);
  324|     23|		return (-1);
  325|     23|	}
  326|       |	/*
  327|       |	 * If there are more than one proposal, there must be bytes
  328|       |	 * left in the payload.
  329|       |	 */
  330|  9.44k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (330:6): [True: 8.67k, False: 777]
  |  Branch (330:23): [True: 172, False: 8.49k]
  ------------------
  331|    172|		log_debug("%s: malformed payload: SA payload too small for "
  332|    172|		    "further proposals (%zu <= %zu)", __func__,
  333|    172|		    left, sap_length);
  334|    172|		return (-1);
  335|    172|	}
  336|  9.27k|	return (0);
  337|  9.44k|}
ikev2_pld_sa:
  342|  26.2k|{
  343|  26.2k|	struct ikev2_sa_proposal	 sap;
  344|  26.2k|	struct iked_proposal		*prop = NULL;
  345|  26.2k|	uint32_t			 spi32;
  346|  26.2k|	uint64_t			 spi = 0, spi64;
  347|  26.2k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  348|  26.2k|	int				 r;
  349|  26.2k|	struct iked_proposals		*props;
  350|  26.2k|	size_t				 total;
  351|       |
  352|  29.4k|	do {
  353|  29.4k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (353:7): [True: 20.1k, False: 9.27k]
  ------------------
  354|  20.1k|			return (-1);
  355|       |
  356|       |		/* Assumed size of the first proposals, including SPI if present. */
  357|  9.27k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  ------------------
  |  |   40|  9.27k|#define betoh16	be16toh
  ------------------
  358|       |
  359|  9.27k|		props = &msg->msg_parent->msg_proposals;
  360|       |
  361|  9.27k|		offset += sizeof(sap);
  362|  9.27k|		left -= sizeof(sap);
  363|       |
  364|  9.27k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (364:7): [True: 926, False: 8.34k]
  ------------------
  365|    926|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (365:8): [True: 107, False: 819]
  ------------------
  366|    107|				log_debug("%s: malformed payload: SPI larger than "
  367|    107|				    "actual payload (%zu < %d)", __func__, left,
  368|    107|				    sap.sap_spisize);
  369|    107|				return (-1);
  370|    107|			}
  371|    819|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (371:8): [True: 181, False: 638]
  ------------------
  372|    181|				log_debug("%s: malformed payload: SPI larger than "
  373|    181|				    "proposal (%zu < %d)", __func__, total,
  374|    181|				    sap.sap_spisize);
  375|    181|				return (-1);
  376|    181|			}
  377|    638|			switch (sap.sap_spisize) {
  378|    228|			case 4:
  ------------------
  |  Branch (378:4): [True: 228, False: 410]
  ------------------
  379|    228|				memcpy(&spi32, msgbuf + offset, 4);
  380|    228|				spi = betoh32(spi32);
  ------------------
  |  |   43|    228|#define betoh32	be32toh
  ------------------
  381|    228|				break;
  382|    150|			case 8:
  ------------------
  |  Branch (382:4): [True: 150, False: 488]
  ------------------
  383|    150|				memcpy(&spi64, msgbuf + offset, 8);
  384|    150|				spi = betoh64(spi64);
  ------------------
  |  |   46|    150|#define betoh64	be64toh
  ------------------
  385|    150|				break;
  386|    260|			default:
  ------------------
  |  Branch (386:4): [True: 260, False: 378]
  ------------------
  387|    260|				log_debug("%s: unsupported SPI size %d",
  388|    260|				    __func__, sap.sap_spisize);
  389|    260|				return (-1);
  390|    638|			}
  391|       |
  392|    378|			offset += sap.sap_spisize;
  393|    378|			left -= sap.sap_spisize;
  394|       |
  395|       |			/* Assumed size of the proposal, now without SPI. */
  396|    378|			total -= sap.sap_spisize;
  397|    378|		}
  398|       |
  399|       |		/*
  400|       |		 * As we verified sanity of packet headers, this check will
  401|       |		 * be always false, but just to be sure we keep it.
  402|       |		 */
  403|  8.72k|		if (left < total) {
  ------------------
  |  Branch (403:7): [True: 0, False: 8.72k]
  ------------------
  404|      0|			log_debug("%s: malformed payload: too long for payload "
  405|      0|			    "(%zu < %zu)", __func__, left, total);
  406|      0|			return (-1);
  407|      0|		}
  408|       |
  409|  8.72k|		log_debug("%s: more %d reserved %d length %d"
  410|  8.72k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  411|  8.72k|		    __func__, sap.sap_more, sap.sap_reserved,
  412|  8.72k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  ------------------
  |  |   40|  8.72k|#define betoh16	be16toh
  ------------------
  413|  8.72k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  414|  8.72k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  415|       |
  416|  8.72k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (416:7): [True: 0, False: 8.72k]
  ------------------
  417|      0|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (417:8): [True: 0, False: 0]
  ------------------
  418|      0|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  419|      0|				log_debug("%s: invalid proposal", __func__);
  420|      0|				return (-1);
  421|      0|			}
  422|      0|			prop = msg->msg_parent->msg_prop;
  423|      0|			prop->prop_peerspi.spi = spi;
  424|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  425|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  426|       |
  427|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  428|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  429|      0|		}
  430|       |
  431|       |		/*
  432|       |		 * Parse the attached transforms
  433|       |		 */
  434|  8.72k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (434:7): [True: 5.98k, False: 2.74k]
  ------------------
  435|  5.98k|			r = ikev2_pld_xform(env, msg, offset, total);
  436|  5.98k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (436:8): [True: 0, False: 5.98k]
  |  Branch (436:21): [True: 0, False: 0]
  ------------------
  437|      0|				log_debug("%s: invalid proposal transform",
  438|      0|				    __func__);
  439|       |
  440|       |				/* cleanup and ignore proposal */
  441|      0|				config_free_proposal(props, prop);
  442|      0|				prop = msg->msg_parent->msg_prop = NULL;
  443|  5.98k|			} else if (r != 0) {
  ------------------
  |  Branch (443:15): [True: 5.06k, False: 918]
  ------------------
  444|  5.06k|				log_debug("%s: invalid proposal transforms",
  445|  5.06k|				    __func__);
  446|  5.06k|				return (-1);
  447|  5.06k|			}
  448|  5.98k|		}
  449|       |
  450|  3.65k|		offset += total;
  451|  3.65k|		left -= total;
  452|  3.65k|	} while (sap.sap_more);
  ------------------
  |  Branch (452:11): [True: 3.17k, False: 482]
  ------------------
  453|       |
  454|    482|	return (0);
  455|  26.2k|}
ikev2_validate_xform:
  460|  8.52k|{
  461|  8.52k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  462|  8.52k|	size_t		 xfrm_length;
  463|       |
  464|  8.52k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (464:6): [True: 605, False: 7.92k]
  ------------------
  465|    605|		log_debug("%s: malformed payload: too short for header "
  466|    605|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  467|    605|		return (-1);
  468|    605|	}
  469|  7.92k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  470|       |
  471|  7.92k|	xfrm_length = betoh16(xfrm->xfrm_length);
  ------------------
  |  |   40|  7.92k|#define betoh16	be16toh
  ------------------
  472|  7.92k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (472:6): [True: 507, False: 7.41k]
  ------------------
  473|    507|		log_debug("%s: malformed payload: shorter than minimum header "
  474|    507|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  475|    507|		return (-1);
  476|    507|	}
  477|  7.41k|	if (total < xfrm_length) {
  ------------------
  |  Branch (477:6): [True: 505, False: 6.91k]
  ------------------
  478|    505|		log_debug("%s: malformed payload: too long for payload size "
  479|    505|		    "(%zu < %zu)", __func__, total, xfrm_length);
  480|    505|		return (-1);
  481|    505|	}
  482|       |
  483|  6.91k|	return (0);
  484|  7.41k|}
ikev2_pld_xform:
  489|  8.52k|{
  490|  8.52k|	struct ikev2_transform		 xfrm;
  491|  8.52k|	char				 id[BUFSIZ];
  492|  8.52k|	int				 ret = 0;
  493|  8.52k|	int				 r;
  494|  8.52k|	size_t				 xfrm_length;
  495|       |
  496|  8.52k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (496:6): [True: 1.61k, False: 6.91k]
  ------------------
  497|  1.61k|		return (-1);
  498|       |
  499|  6.91k|	xfrm_length = betoh16(xfrm.xfrm_length);
  ------------------
  |  |   40|  6.91k|#define betoh16	be16toh
  ------------------
  500|       |
  501|  6.91k|	switch (xfrm.xfrm_type) {
  502|    818|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|    818|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (502:2): [True: 818, False: 6.09k]
  ------------------
  503|    818|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|    818|#define betoh16	be16toh
  ------------------
  504|    818|		    ikev2_xformencr_map), sizeof(id));
  505|    818|		break;
  506|  2.53k|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|  2.53k|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (506:2): [True: 2.53k, False: 4.37k]
  ------------------
  507|  2.53k|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|  2.53k|#define betoh16	be16toh
  ------------------
  508|  2.53k|		    ikev2_xformprf_map), sizeof(id));
  509|  2.53k|		break;
  510|    362|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|    362|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (510:2): [True: 362, False: 6.54k]
  ------------------
  511|    362|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|    362|#define betoh16	be16toh
  ------------------
  512|    362|		    ikev2_xformauth_map), sizeof(id));
  513|    362|		break;
  514|    605|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|    605|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (514:2): [True: 605, False: 6.30k]
  ------------------
  515|    605|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|    605|#define betoh16	be16toh
  ------------------
  516|    605|		    ikev2_xformdh_map), sizeof(id));
  517|    605|		break;
  518|    526|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|    526|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (518:2): [True: 526, False: 6.38k]
  ------------------
  519|    526|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|    526|#define betoh16	be16toh
  ------------------
  520|    526|		    ikev2_xformesn_map), sizeof(id));
  521|    526|		break;
  522|  2.06k|	default:
  ------------------
  |  Branch (522:2): [True: 2.06k, False: 4.85k]
  ------------------
  523|  2.06k|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  524|  2.06k|		break;
  525|  6.91k|	}
  526|       |
  527|  6.91k|	log_debug("%s: more %d reserved %d length %zu"
  528|  6.91k|	    " type %s id %s",
  529|  6.91k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  530|  6.91k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  531|       |
  532|       |	/*
  533|       |	 * Parse transform attributes, if available
  534|       |	 */
  535|  6.91k|	msg->msg_attrlength = 0;
  536|  6.91k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (536:6): [True: 4.55k, False: 2.35k]
  ------------------
  537|  4.55k|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (537:7): [True: 3.34k, False: 1.21k]
  ------------------
  538|  4.55k|		    xfrm_length - sizeof(xfrm)) != 0) {
  539|  3.34k|			return (-1);
  540|  3.34k|		}
  541|  4.55k|	}
  542|       |
  543|  3.57k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (543:6): [True: 0, False: 3.57k]
  ------------------
  544|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  545|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  546|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  547|      0|		if (r == -1) {
  ------------------
  |  Branch (547:7): [True: 0, False: 0]
  ------------------
  548|      0|			log_debug("%s: failed to add transform: alloc error",
  549|      0|			    __func__);
  550|      0|			return (r);
  551|      0|		} else if (r == -2) {
  ------------------
  |  Branch (551:14): [True: 0, False: 0]
  ------------------
  552|      0|			log_debug("%s: failed to add transform: unknown type",
  553|      0|			    __func__);
  554|      0|			return (r);
  555|      0|		}
  556|      0|	}
  557|       |
  558|       |	/* Next transform */
  559|  3.57k|	offset += xfrm_length;
  560|  3.57k|	total -= xfrm_length;
  561|  3.57k|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|  3.57k|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (561:6): [True: 2.54k, False: 1.02k]
  ------------------
  562|  2.54k|		ret = ikev2_pld_xform(env, msg, offset, total);
  563|  1.02k|	else if (total != 0) {
  ------------------
  |  Branch (563:11): [True: 110, False: 918]
  ------------------
  564|       |		/* No more transforms but still some data left. */
  565|    110|		log_debug("%s: less data than specified, %zu bytes left",
  566|    110|		    __func__, total);
  567|    110|		ret = -1;
  568|    110|	}
  569|       |
  570|  3.57k|	return (ret);
  571|  3.57k|}
ikev2_validate_attr:
  576|  54.3k|{
  577|  54.3k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  578|       |
  579|  54.3k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (579:6): [True: 650, False: 53.7k]
  ------------------
  580|    650|		log_debug("%s: malformed payload: too short for header "
  581|    650|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  582|    650|		return (-1);
  583|    650|	}
  584|  53.7k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  585|       |
  586|  53.7k|	return (0);
  587|  54.3k|}
ikev2_pld_attr:
  592|  54.3k|{
  593|  54.3k|	struct ikev2_attribute		 attr;
  594|  54.3k|	unsigned int			 type;
  595|  54.3k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  596|  54.3k|	int				 ret = 0;
  597|  54.3k|	size_t				 attr_length;
  598|       |
  599|  54.3k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (599:6): [True: 650, False: 53.7k]
  ------------------
  600|    650|		return (-1);
  601|       |
  602|  53.7k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |   40|  53.7k|#define betoh16	be16toh
  ------------------
              	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  53.7k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  603|       |
  604|  53.7k|	log_debug("%s: attribute type %s length %d total %zu",
  605|  53.7k|	    __func__, print_map(type, ikev2_attrtype_map),
  606|  53.7k|	    betoh16(attr.attr_length), total);
  ------------------
  |  |   40|  53.7k|#define betoh16	be16toh
  ------------------
  607|       |
  608|  53.7k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |   40|  53.7k|#define betoh16	be16toh
  ------------------
              	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  53.7k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (608:6): [True: 18.5k, False: 35.2k]
  ------------------
  609|       |		/* Type-Value attribute */
  610|  18.5k|		offset += sizeof(attr);
  611|  18.5k|		total -= sizeof(attr);
  612|       |
  613|  18.5k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  18.5k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (613:7): [True: 53, False: 18.4k]
  ------------------
  614|     53|			msg->msg_attrlength = betoh16(attr.attr_length);
  ------------------
  |  |   40|     53|#define betoh16	be16toh
  ------------------
  615|  35.2k|	} else {
  616|       |		/* Type-Length-Value attribute */
  617|  35.2k|		attr_length = betoh16(attr.attr_length);
  ------------------
  |  |   40|  35.2k|#define betoh16	be16toh
  ------------------
  618|  35.2k|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (618:7): [True: 1.35k, False: 33.8k]
  ------------------
  619|  1.35k|			log_debug("%s: malformed payload: shorter than "
  620|  1.35k|			    "minimum header size (%zu < %zu)", __func__,
  621|  1.35k|			    attr_length, sizeof(attr));
  622|  1.35k|			return (-1);
  623|  1.35k|		}
  624|  33.8k|		if (total < attr_length) {
  ------------------
  |  Branch (624:7): [True: 1.33k, False: 32.5k]
  ------------------
  625|  1.33k|			log_debug("%s: malformed payload: attribute larger "
  626|  1.33k|			    "than actual payload (%zu < %zu)", __func__,
  627|  1.33k|			    total, attr_length);
  628|  1.33k|			return (-1);
  629|  1.33k|		}
  630|  32.5k|		print_hex(msgbuf, offset + sizeof(attr),
  631|  32.5k|		    attr_length - sizeof(attr));
  632|  32.5k|		offset += attr_length;
  633|  32.5k|		total -= attr_length;
  634|  32.5k|	}
  635|       |
  636|  51.0k|	if (total > 0) {
  ------------------
  |  Branch (636:6): [True: 49.8k, False: 1.21k]
  ------------------
  637|       |		/* Next attribute */
  638|  49.8k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  639|  49.8k|	}
  640|       |
  641|  51.0k|	return (ret);
  642|  53.7k|}
ikev2_validate_ke:
  647|  3.64k|{
  648|  3.64k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  649|       |
  650|  3.64k|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (650:6): [True: 2.66k, False: 972]
  ------------------
  651|  2.66k|		log_debug("%s: malformed payload: too short for header "
  652|  2.66k|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  653|  2.66k|		return (-1);
  654|  2.66k|	}
  655|    972|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  656|       |
  657|    972|	return (0);
  658|  3.64k|}
ikev2_pld_ke:
  663|  3.64k|{
  664|  3.64k|	struct ikev2_keyexchange	 kex;
  665|  3.64k|	uint8_t				*buf;
  666|  3.64k|	size_t				 len;
  667|  3.64k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  668|       |
  669|  3.64k|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (669:6): [True: 2.66k, False: 972]
  ------------------
  670|  2.66k|		return (-1);
  671|       |
  672|    972|	log_debug("%s: dh group %s reserved %d", __func__,
  673|    972|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  ------------------
  |  |   40|    972|#define betoh16	be16toh
  ------------------
  674|    972|	    betoh16(kex.kex_reserved));
  ------------------
  |  |   40|    972|#define betoh16	be16toh
  ------------------
  675|       |
  676|    972|	buf = msgbuf + offset + sizeof(kex);
  677|    972|	len = left - sizeof(kex);
  678|       |
  679|    972|	if (len == 0) {
  ------------------
  |  Branch (679:6): [True: 69, False: 903]
  ------------------
  680|     69|		log_debug("%s: malformed payload: no KE data given", __func__);
  681|     69|		return (-1);
  682|     69|	}
  683|       |
  684|    903|	print_hex(buf, 0, len);
  685|       |
  686|    903|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (686:6): [True: 0, False: 903]
  ------------------
  687|      0|		if (ibuf_length(msg->msg_parent->msg_ke)) {
  ------------------
  |  Branch (687:7): [True: 0, False: 0]
  ------------------
  688|      0|			log_info("%s: duplicate KE payload", __func__);
  689|      0|			return (-1);
  690|      0|		}
  691|      0|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (691:7): [True: 0, False: 0]
  ------------------
  692|      0|			log_debug("%s: failed to get exchange", __func__);
  693|      0|			return (-1);
  694|      0|		}
  695|      0|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  696|      0|	}
  697|       |
  698|    903|	return (0);
  699|    903|}
ikev2_validate_id:
  704|  7.51k|{
  705|  7.51k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  706|       |
  707|  7.51k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (707:6): [True: 4.56k, False: 2.94k]
  ------------------
  708|  4.56k|		log_debug("%s: malformed payload: too short for header "
  709|  4.56k|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  710|  4.56k|		return (-1);
  711|  4.56k|	}
  712|  2.94k|	memcpy(id, msgbuf + offset, sizeof(*id));
  713|       |
  714|  2.94k|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|  2.94k|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (714:6): [True: 418, False: 2.52k]
  ------------------
  715|    418|		log_debug("%s: malformed payload: invalid ID type.",
  716|    418|		    __func__);
  717|    418|		return (-1);
  718|    418|	}
  719|       |
  720|  2.52k|	return (0);
  721|  2.94k|}
ikev2_pld_id:
  726|  7.51k|{
  727|  7.51k|	uint8_t				*ptr;
  728|  7.51k|	struct ikev2_id			 id;
  729|  7.51k|	size_t				 len;
  730|  7.51k|	struct iked_id			*idp, idb;
  731|  7.51k|	const struct iked_sa		*sa = msg->msg_sa;
  732|  7.51k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  733|  7.51k|	char				 idstr[IKED_ID_SIZE];
  734|       |
  735|  7.51k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (735:6): [True: 4.98k, False: 2.52k]
  ------------------
  736|  4.98k|		return (-1);
  737|       |
  738|  2.52k|	bzero(&idb, sizeof(idb));
  739|       |
  740|       |	/* Don't strip the Id payload header */
  741|  2.52k|	ptr = msgbuf + offset;
  742|  2.52k|	len = left;
  743|       |
  744|  2.52k|	idb.id_type = id.id_type;
  745|  2.52k|	idb.id_offset = sizeof(id);
  746|  2.52k|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (746:6): [True: 0, False: 2.52k]
  ------------------
  747|      0|		return (-1);
  748|       |
  749|  2.52k|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (749:6): [True: 0, False: 2.52k]
  ------------------
  750|      0|		ibuf_release(idb.id_buf);
  751|      0|		log_debug("%s: malformed id", __func__);
  752|      0|		return (-1);
  753|      0|	}
  754|       |
  755|  2.52k|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  756|       |
  757|  2.52k|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (757:6): [True: 2.52k, False: 0]
  ------------------
  758|  2.52k|		ibuf_release(idb.id_buf);
  759|  2.52k|		return (0);
  760|  2.52k|	}
  761|       |
  762|      0|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (762:8): [True: 0, False: 0]
  |  Branch (762:35): [True: 0, False: 0]
  ------------------
  763|      0|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|      0|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (763:7): [True: 0, False: 0]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|      0|		idp = &msg->msg_parent->msg_peerid;
  765|      0|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (765:11): [True: 0, False: 0]
  |  Branch (765:39): [True: 0, False: 0]
  ------------------
  766|      0|		idp = &msg->msg_parent->msg_localid;
  767|      0|	else {
  768|      0|		ibuf_release(idb.id_buf);
  769|      0|		log_debug("%s: unexpected id payload", __func__);
  770|      0|		return (0);
  771|      0|	}
  772|       |
  773|      0|	if (idp->id_type) {
  ------------------
  |  Branch (773:6): [True: 0, False: 0]
  ------------------
  774|      0|		ibuf_release(idb.id_buf);
  775|      0|		log_debug("%s: duplicate id payload", __func__);
  776|      0|		return (-1);
  777|      0|	}
  778|       |
  779|      0|	idp->id_buf = idb.id_buf;
  780|      0|	idp->id_offset = idb.id_offset;
  781|      0|	idp->id_type = idb.id_type;
  782|       |
  783|      0|	return (0);
  784|      0|}
ikev2_validate_cert:
  789|  2.06k|{
  790|  2.06k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  791|       |
  792|  2.06k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (792:6): [True: 135, False: 1.92k]
  ------------------
  793|    135|		log_debug("%s: malformed payload: too short for header "
  794|    135|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  795|    135|		return (-1);
  796|    135|	}
  797|  1.92k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  798|       |
  799|  1.92k|	return (0);
  800|  2.06k|}
ikev2_pld_cert:
  805|  2.06k|{
  806|  2.06k|	struct ikev2_cert		 cert;
  807|  2.06k|	uint8_t				*buf;
  808|  2.06k|	size_t				 len;
  809|  2.06k|	struct iked_id			*certid;
  810|  2.06k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  811|  2.06k|	const struct iked_sa		*sa = msg->msg_sa;
  812|       |
  813|  2.06k|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (813:6): [True: 135, False: 1.92k]
  ------------------
  814|    135|		return (-1);
  815|  1.92k|	offset += sizeof(cert);
  816|       |
  817|  1.92k|	buf = msgbuf + offset;
  818|  1.92k|	len = left - sizeof(cert);
  819|       |
  820|  1.92k|	log_debug("%s: type %s length %zu",
  821|  1.92k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  822|       |
  823|  1.92k|	print_hex(buf, 0, len);
  824|       |
  825|  1.92k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (825:6): [True: 1.92k, False: 0]
  ------------------
  826|  1.92k|		return (0);
  827|       |
  828|      0|	certid = &msg->msg_parent->msg_cert;
  829|      0|	if (certid->id_type) {
  ------------------
  |  Branch (829:6): [True: 0, False: 0]
  ------------------
  830|      0|		log_debug("%s: multiple cert payloads, ignoring",
  831|      0|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1054|      0|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1053|      0|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  832|      0|		return (0);
  833|      0|	}
  834|       |
  835|      0|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (835:6): [True: 0, False: 0]
  ------------------
  836|      0|		log_debug("%s: failed to save cert", __func__);
  837|      0|		return (-1);
  838|      0|	}
  839|      0|	certid->id_type = cert.cert_type;
  840|      0|	certid->id_offset = 0;
  841|       |
  842|      0|	return (0);
  843|      0|}
ikev2_validate_certreq:
  848|  15.7k|{
  849|  15.7k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  850|       |
  851|  15.7k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (851:6): [True: 3.70k, False: 12.0k]
  ------------------
  852|  3.70k|		log_debug("%s: malformed payload: too short for header "
  853|  3.70k|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  854|  3.70k|		return (-1);
  855|  3.70k|	}
  856|  12.0k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  857|       |
  858|  12.0k|	return (0);
  859|  15.7k|}
ikev2_pld_certreq:
  864|  15.7k|{
  865|  15.7k|	struct ikev2_cert		 cert;
  866|  15.7k|	struct iked_certreq		*cr;
  867|  15.7k|	uint8_t				*buf;
  868|  15.7k|	ssize_t				 len;
  869|  15.7k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  870|       |
  871|  15.7k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (871:6): [True: 3.70k, False: 12.0k]
  ------------------
  872|  3.70k|		return (-1);
  873|  12.0k|	offset += sizeof(cert);
  874|       |
  875|  12.0k|	buf = msgbuf + offset;
  876|  12.0k|	len = left - sizeof(cert);
  877|       |
  878|  12.0k|	log_debug("%s: type %s length %zd",
  879|  12.0k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  880|       |
  881|  12.0k|	print_hex(buf, 0, len);
  882|       |
  883|  12.0k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (883:6): [True: 12.0k, False: 0]
  ------------------
  884|  12.0k|		return (0);
  885|       |
  886|      0|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|      0|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (886:6): [True: 0, False: 0]
  ------------------
  887|      0|		if (len == 0) {
  ------------------
  |  Branch (887:7): [True: 0, False: 0]
  ------------------
  888|      0|			log_info("%s: invalid length 0", __func__);
  889|      0|			return (0);
  890|      0|		}
  891|      0|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (891:7): [True: 0, False: 0]
  ------------------
  892|      0|			log_info("%s: invalid certificate request",
  893|      0|			    __func__);
  894|      0|			return (-1);
  895|      0|		}
  896|      0|	}
  897|       |
  898|      0|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (898:6): [True: 0, False: 0]
  ------------------
  899|      0|		log_info("%s: failed to allocate certreq.", __func__);
  900|      0|		return (-1);
  901|      0|	}
  902|      0|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (902:6): [True: 0, False: 0]
  ------------------
  903|      0|		log_info("%s: failed to allocate buffer.", __func__);
  904|      0|		free(cr);
  905|      0|		return (-1);
  906|      0|	}
  907|      0|	cr->cr_type = cert.cert_type;
  908|      0|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|      0|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|      0|	(elm)->field.sqe_next = NULL;					\
  |  |  298|      0|	*(head)->sqh_last = (elm);					\
  |  |  299|      0|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  909|       |
  910|      0|	return (0);
  911|      0|}
ikev2_validate_auth:
  916|  3.39k|{
  917|  3.39k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  918|       |
  919|  3.39k|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (919:6): [True: 1.47k, False: 1.91k]
  ------------------
  920|  1.47k|		log_debug("%s: malformed payload: too short for header "
  921|  1.47k|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  922|  1.47k|		return (-1);
  923|  1.47k|	}
  924|  1.91k|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  925|       |
  926|  1.91k|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (926:6): [True: 668, False: 1.24k]
  ------------------
  927|    668|		log_info("%s: malformed payload: invalid auth method",
  928|    668|		    __func__);
  929|    668|		return (-1);
  930|    668|	}
  931|       |
  932|  1.24k|	return (0);
  933|  1.91k|}
ikev2_pld_auth:
  938|  3.39k|{
  939|  3.39k|	struct ikev2_auth		 auth;
  940|  3.39k|	struct iked_id			*idp;
  941|  3.39k|	uint8_t				*buf;
  942|  3.39k|	size_t				 len;
  943|  3.39k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  944|       |
  945|  3.39k|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (945:6): [True: 2.14k, False: 1.24k]
  ------------------
  946|  2.14k|		return (-1);
  947|  1.24k|	offset += sizeof(auth);
  948|       |
  949|  1.24k|	buf = msgbuf + offset;
  950|  1.24k|	len = left - sizeof(auth);
  951|       |
  952|  1.24k|	log_debug("%s: method %s length %zu",
  953|  1.24k|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  954|       |
  955|  1.24k|	print_hex(buf, 0, len);
  956|       |
  957|  1.24k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (957:6): [True: 1.24k, False: 0]
  ------------------
  958|  1.24k|		return (0);
  959|       |
  960|      0|	idp = &msg->msg_parent->msg_auth;
  961|      0|	if (idp->id_type) {
  ------------------
  |  Branch (961:6): [True: 0, False: 0]
  ------------------
  962|      0|		log_debug("%s: duplicate auth payload", __func__);
  963|      0|		return (-1);
  964|      0|	}
  965|       |
  966|      0|	ibuf_release(idp->id_buf);
  967|      0|	idp->id_type = auth.auth_method;
  968|      0|	idp->id_offset = 0;
  969|      0|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (969:6): [True: 0, False: 0]
  ------------------
  970|      0|		return (-1);
  971|       |
  972|      0|	return (0);
  973|      0|}
ikev2_pld_nonce:
  978|    559|{
  979|    559|	size_t		 len;
  980|    559|	uint8_t		*buf;
  981|    559|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  982|       |
  983|    559|	buf = msgbuf + offset;
  984|    559|	len = left;
  985|       |
  986|    559|	if (len == 0) {
  ------------------
  |  Branch (986:6): [True: 478, False: 81]
  ------------------
  987|    478|		log_debug("%s: malformed payload: no NONCE given", __func__);
  988|    478|		return (-1);
  989|    478|	}
  990|       |
  991|     81|	print_hex(buf, 0, len);
  992|       |
  993|     81|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (993:6): [True: 0, False: 81]
  ------------------
  994|      0|		if (ibuf_length(msg->msg_parent->msg_nonce)) {
  ------------------
  |  Branch (994:7): [True: 0, False: 0]
  ------------------
  995|      0|			log_info("%s: duplicate NONCE payload", __func__);
  996|      0|			return (-1);
  997|      0|		}
  998|      0|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (998:7): [True: 0, False: 0]
  ------------------
  999|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1000|      0|			return (-1);
 1001|      0|		}
 1002|      0|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1003|      0|	}
 1004|       |
 1005|     81|	return (0);
 1006|     81|}
ikev2_validate_notify:
 1011|  5.94k|{
 1012|  5.94k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1013|       |
 1014|  5.94k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1014:6): [True: 3.61k, False: 2.32k]
  ------------------
 1015|  3.61k|		log_debug("%s: malformed payload: too short for header "
 1016|  3.61k|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1017|  3.61k|		return (-1);
 1018|  3.61k|	}
 1019|  2.32k|	memcpy(n, msgbuf + offset, sizeof(*n));
 1020|       |
 1021|  2.32k|	return (0);
 1022|  5.94k|}
ikev2_pld_notify:
 1027|  5.94k|{
 1028|  5.94k|	struct ikev2_notify	 n;
 1029|  5.94k|	const struct iked_sa	*sa = msg->msg_sa;
 1030|  5.94k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1031|  5.94k|	uint32_t		 spi32;
 1032|  5.94k|	uint64_t		 spi64;
 1033|  5.94k|	struct iked_spi		*rekey;
 1034|  5.94k|	uint16_t		 type;
 1035|  5.94k|	uint16_t		 signature_hash;
 1036|       |
 1037|  5.94k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1037:6): [True: 3.61k, False: 2.32k]
  ------------------
 1038|  3.61k|		return (-1);
 1039|  2.32k|	type = betoh16(n.n_type);
  ------------------
  |  |   40|  2.32k|#define betoh16	be16toh
  ------------------
 1040|       |
 1041|  2.32k|	log_debug("%s: protoid %s spisize %d type %s",
 1042|  2.32k|	    __func__,
 1043|  2.32k|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1044|  2.32k|	    print_map(type, ikev2_n_map));
 1045|       |
 1046|  2.32k|	left -= sizeof(n);
 1047|  2.32k|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1047:6): [True: 0, False: 2.32k]
  ------------------
 1048|      0|		return (-1);
 1049|       |
 1050|  2.32k|	print_hex(buf, 0, left);
 1051|       |
 1052|  2.32k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1052:6): [True: 2.32k, False: 0]
  ------------------
 1053|  2.32k|		return (0);
 1054|       |
 1055|      0|	switch (type) {
  ------------------
  |  Branch (1055:10): [True: 0, False: 0]
  ------------------
 1056|      0|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|      0|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1056:2): [True: 0, False: 0]
  ------------------
 1057|      0|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|      0|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1057:2): [True: 0, False: 0]
  ------------------
 1058|      0|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1058:7): [True: 0, False: 0]
  ------------------
 1059|      0|			log_debug("%s: malformed payload: hash size mismatch"
 1060|      0|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1061|      0|			return (-1);
 1062|      0|		}
 1063|      0|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1063:7): [True: 0, False: 0]
  ------------------
 1064|      0|		    ikev2_msg_frompeer(msg)) == -1)
 1065|      0|			return (-1);
 1066|      0|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1066:7): [True: 0, False: 0]
  ------------------
 1067|      0|			log_debug("%s: %s detected NAT", __func__,
 1068|      0|			    print_map(type, ikev2_n_map));
 1069|      0|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|      0|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1069:8): [True: 0, False: 0]
  ------------------
 1070|      0|				msg->msg_parent->msg_nat_detected
 1071|      0|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  650|      0|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1072|      0|			else
 1073|      0|				msg->msg_parent->msg_nat_detected
 1074|      0|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  651|      0|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1075|      0|		}
 1076|      0|		print_hex(md, 0, sizeof(md));
 1077|       |		/* remember for MOBIKE */
 1078|      0|		msg->msg_parent->msg_natt_rcvd = 1;
 1079|      0|		break;
 1080|      0|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      0|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1080:2): [True: 0, False: 0]
  ------------------
 1081|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1081:7): [True: 0, False: 0]
  ------------------
 1082|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1083|      0|			    __func__);
 1084|      0|			return (-1);
 1085|      0|		}
 1086|       |		/*
 1087|       |		 * If we are the responder, then we only accept
 1088|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1089|       |		 * If we are the initiator, the peer cannot be authenticated.
 1090|       |		 */
 1091|      0|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1091:7): [True: 0, False: 0]
  ------------------
 1092|      0|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1092:8): [True: 0, False: 0]
  ------------------
 1093|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1094|      0|				    " from unauthenticated initiator",
 1095|      0|				    __func__);
 1096|      0|				return (-1);
 1097|      0|			}
 1098|      0|		} else {
 1099|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1099:8): [True: 0, False: 0]
  ------------------
 1100|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1101|      0|				    " from authenticated responder",
 1102|      0|				    __func__);
 1103|      0|				return (-1);
 1104|      0|			}
 1105|      0|		}
 1106|      0|		msg->msg_parent->msg_flags
 1107|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  658|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1108|      0|		break;
 1109|      0|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|      0|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1109:2): [True: 0, False: 0]
  ------------------
 1110|      0|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1110:7): [True: 0, False: 0]
  ------------------
 1111|      0|		    !msg->msg_e) {
  ------------------
  |  Branch (1111:7): [True: 0, False: 0]
  ------------------
 1112|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1113|      0|			    __func__);
 1114|      0|			return (-1);
 1115|      0|		}
 1116|      0|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1116:7): [True: 0, False: 0]
  ------------------
 1117|      0|			log_debug("%s: malformed payload: group size mismatch"
 1118|      0|			    " (%zu != %zu)", __func__, left,
 1119|      0|			    sizeof(msg->msg_parent->msg_group));
 1120|      0|			return (-1);
 1121|      0|		}
 1122|      0|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1123|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  659|      0|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1124|      0|		break;
 1125|      0|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|      0|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1125:2): [True: 0, False: 0]
  ------------------
 1126|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1126:7): [True: 0, False: 0]
  ------------------
 1127|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1128|      0|			    __func__);
 1129|      0|			return (-1);
 1130|      0|		}
 1131|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  657|      0|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1132|      0|		break;
 1133|      0|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|      0|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1133:2): [True: 0, False: 0]
  ------------------
 1134|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1134:7): [True: 0, False: 0]
  ------------------
 1135|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1136|      0|			return (-1);
 1137|      0|		}
 1138|      0|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1138:7): [True: 0, False: 0]
  ------------------
 1139|      0|			log_debug("%s: malformed notification", __func__);
 1140|      0|			return (-1);
 1141|      0|		}
 1142|      0|		rekey = &msg->msg_parent->msg_rekey;
 1143|      0|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1143:7): [True: 0, False: 0]
  ------------------
 1144|      0|			log_debug("%s: rekeying of multiple SAs not supported",
 1145|      0|			    __func__);
 1146|      0|			return (-1);
 1147|      0|		}
 1148|      0|		switch (n.n_spisize) {
 1149|      0|		case 4:
  ------------------
  |  Branch (1149:3): [True: 0, False: 0]
  ------------------
 1150|      0|			memcpy(&spi32, buf, left);
 1151|      0|			rekey->spi = betoh32(spi32);
  ------------------
  |  |   43|      0|#define betoh32	be32toh
  ------------------
 1152|      0|			break;
 1153|      0|		case 8:
  ------------------
  |  Branch (1153:3): [True: 0, False: 0]
  ------------------
 1154|      0|			memcpy(&spi64, buf, left);
 1155|      0|			rekey->spi = betoh64(spi64);
  ------------------
  |  |   46|      0|#define betoh64	be64toh
  ------------------
 1156|      0|			break;
 1157|      0|		default:
  ------------------
  |  Branch (1157:3): [True: 0, False: 0]
  ------------------
 1158|      0|			log_debug("%s: invalid spi size %d", __func__,
 1159|      0|			    n.n_spisize);
 1160|      0|			return (-1);
 1161|      0|		}
 1162|      0|		rekey->spi_size = n.n_spisize;
 1163|      0|		rekey->spi_protoid = n.n_protoid;
 1164|       |
 1165|      0|		log_debug("%s: rekey %s spi %s", __func__,
 1166|      0|		    print_map(n.n_protoid, ikev2_saproto_map),
 1167|      0|		    print_spi(rekey->spi, n.n_spisize));
 1168|      0|		break;
 1169|      0|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|      0|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1169:2): [True: 0, False: 0]
  ------------------
 1170|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1170:7): [True: 0, False: 0]
  ------------------
 1171|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1172|      0|			    __func__);
 1173|      0|			return (-1);
 1174|      0|		}
 1175|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  662|      0|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1176|      0|		break;
 1177|      0|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|      0|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1177:2): [True: 0, False: 0]
  ------------------
 1178|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1178:7): [True: 0, False: 0]
  ------------------
 1179|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1180|      0|			    __func__);
 1181|      0|			return (-1);
 1182|      0|		}
 1183|      0|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1183:7): [True: 0, False: 0]
  ------------------
 1184|      0|		    sizeof(msg->msg_parent->msg_transform)) {
 1185|      0|			log_debug("%s: ignoring malformed ipcomp notification",
 1186|      0|			    __func__);
 1187|      0|			return (0);
 1188|      0|		}
 1189|      0|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1190|      0|		    sizeof(msg->msg_parent->msg_cpi));
 1191|      0|		memcpy(&msg->msg_parent->msg_transform,
 1192|      0|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1193|      0|		    sizeof(msg->msg_parent->msg_transform));
 1194|       |
 1195|      0|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1196|      0|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1196:7): [True: 0, False: 0]
  ------------------
 1197|      0|		    betoh16(msg->msg_parent->msg_cpi),
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
 1198|      0|		    print_map(msg->msg_parent->msg_transform,
 1199|      0|		    ikev2_ipcomp_map), left);
 1200|       |
 1201|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  660|      0|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1202|      0|		break;
 1203|      0|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|      0|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1203:2): [True: 0, False: 0]
  ------------------
 1204|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1204:7): [True: 0, False: 0]
  ------------------
 1205|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1206|      0|			    __func__);
 1207|      0|			return (-1);
 1208|      0|		}
 1209|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  656|      0|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1210|      0|		break;
 1211|      0|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|      0|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1211:2): [True: 0, False: 0]
  ------------------
 1212|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  663|      0|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1213|      0|		break;
 1214|      0|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|      0|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1214:2): [True: 0, False: 0]
  ------------------
 1215|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1215:7): [True: 0, False: 0]
  ------------------
 1216|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1217|      0|			    __func__);
 1218|      0|			return (-1);
 1219|      0|		}
 1220|      0|		if (left != 0) {
  ------------------
  |  Branch (1220:7): [True: 0, False: 0]
  ------------------
 1221|      0|			log_debug("%s: ignoring malformed mobike"
 1222|      0|			    " notification: %zu", __func__, left);
 1223|      0|			return (0);
 1224|      0|		}
 1225|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  654|      0|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1226|      0|		break;
 1227|      0|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|      0|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1227:2): [True: 0, False: 0]
  ------------------
 1228|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1228:7): [True: 0, False: 0]
  ------------------
 1229|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1230|      0|			    __func__);
 1231|      0|			return (-1);
 1232|      0|		}
 1233|      0|		if (left != 0) {
  ------------------
  |  Branch (1233:7): [True: 0, False: 0]
  ------------------
 1234|      0|			log_debug("%s: ignoring malformed transport mode"
 1235|      0|			    " notification: %zu", __func__, left);
 1236|      0|			return (0);
 1237|      0|		}
 1238|      0|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1238:7): [True: 0, False: 0]
  ------------------
 1239|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1239:8): [True: 0, False: 0]
  ------------------
 1240|      0|				log_debug("%s: ignoring transport mode"
 1241|      0|				    " notification (policy)", __func__);
 1242|      0|				return (0);
 1243|      0|			}
 1244|      0|		}
 1245|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  661|      0|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1246|      0|		break;
 1247|      0|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|      0|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1247:2): [True: 0, False: 0]
  ------------------
 1248|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1248:7): [True: 0, False: 0]
  ------------------
 1249|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1250|      0|			    __func__);
 1251|      0|			return (-1);
 1252|      0|		}
 1253|      0|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1253:7): [True: 0, False: 0]
  ------------------
 1254|      0|			log_debug("%s: ignoring update sa addresses"
 1255|      0|			    " notification w/o mobike: %zu", __func__, left);
 1256|      0|			return (0);
 1257|      0|		}
 1258|      0|		if (left != 0) {
  ------------------
  |  Branch (1258:7): [True: 0, False: 0]
  ------------------
 1259|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1260|      0|			    " notification: %zu", __func__, left);
 1261|      0|			return (0);
 1262|      0|		}
 1263|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1264|      0|		break;
 1265|      0|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|      0|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1265:2): [True: 0, False: 0]
  ------------------
 1266|      0|		if (!msg->msg_e) {
  ------------------
  |  Branch (1266:7): [True: 0, False: 0]
  ------------------
 1267|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1268|      0|			    __func__);
 1269|      0|			return (-1);
 1270|      0|		}
 1271|      0|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1271:7): [True: 0, False: 0]
  ------------------
 1272|      0|			log_debug("%s: ignoring cookie2 notification"
 1273|      0|			    " w/o mobike: %zu", __func__, left);
 1274|      0|			return (0);
 1275|      0|		}
 1276|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1276:7): [True: 0, False: 0]
  |  Branch (1276:34): [True: 0, False: 0]
  ------------------
 1277|      0|			log_debug("%s: ignoring malformed cookie2"
 1278|      0|			    " notification: %zu", __func__, left);
 1279|      0|			return (0);
 1280|      0|		}
 1281|      0|		ibuf_release(msg->msg_cookie2);	/* should not happen */
 1282|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1282:7): [True: 0, False: 0]
  ------------------
 1283|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1284|      0|			return (-1);
 1285|      0|		}
 1286|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1287|      0|		break;
 1288|      0|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      0|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1288:2): [True: 0, False: 0]
  ------------------
 1289|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1289:7): [True: 0, False: 0]
  ------------------
 1290|      0|			log_debug("%s: N_COOKIE encrypted",
 1291|      0|			    __func__);
 1292|      0|			return (-1);
 1293|      0|		}
 1294|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1294:7): [True: 0, False: 0]
  |  Branch (1294:33): [True: 0, False: 0]
  ------------------
 1295|      0|			log_debug("%s: ignoring malformed cookie"
 1296|      0|			    " notification: %zu", __func__, left);
 1297|      0|			return (0);
 1298|      0|		}
 1299|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1300|      0|		print_hex(buf, 0, left);
 1301|       |
 1302|      0|		ibuf_release(msg->msg_cookie);
 1303|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1303:7): [True: 0, False: 0]
  ------------------
 1304|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1305|      0|			return (-1);
 1306|      0|		}
 1307|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1308|      0|		break;
 1309|      0|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|      0|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1309:2): [True: 0, False: 0]
  ------------------
 1310|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1310:7): [True: 0, False: 0]
  ------------------
 1311|      0|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1312|      0|			    __func__);
 1313|      0|			return (-1);
 1314|      0|		}
 1315|      0|		if (left != 0) {
  ------------------
  |  Branch (1315:7): [True: 0, False: 0]
  ------------------
 1316|      0|			log_debug("%s: ignoring malformed fragmentation"
 1317|      0|			    " notification: %zu", __func__, left);
 1318|      0|			return (0);
 1319|      0|		}
 1320|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  653|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1321|      0|		break;
 1322|      0|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      0|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1322:2): [True: 0, False: 0]
  ------------------
 1323|      0|		if (msg->msg_e) {
  ------------------
  |  Branch (1323:7): [True: 0, False: 0]
  ------------------
 1324|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1325|      0|			    __func__);
 1326|      0|			return (-1);
 1327|      0|		}
 1328|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1328:7): [True: 0, False: 0]
  ------------------
 1329|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1330|      0|			    __func__);
 1331|      0|			return (-1);
 1332|      0|		}
 1333|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1333:7): [True: 0, False: 0]
  ------------------
 1334|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1335|      0|			    "duplicate notify", __func__);
 1336|      0|			return (0);
 1337|      0|		}
 1338|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1338:7): [True: 0, False: 0]
  ------------------
 1339|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1339:7): [True: 0, False: 0]
  ------------------
 1340|      0|			log_debug("%s: malformed signature hash notification"
 1341|      0|			    "(%zu bytes)", __func__, left);
 1342|      0|			return (0);
 1343|      0|		}
 1344|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1344:10): [True: 0, False: 0]
  ------------------
 1345|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1346|      0|			signature_hash = betoh16(signature_hash);
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
 1347|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1348|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1349|      0|			    signature_hash);
 1350|      0|			left -= sizeof(signature_hash);
 1351|      0|			buf += sizeof(signature_hash);
 1352|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  498|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1352:8): [True: 0, False: 0]
  ------------------
 1353|      0|				msg->msg_parent->msg_flags
 1354|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  655|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1355|      0|		}
 1356|      0|		break;
 1357|      0|	}
 1358|       |
 1359|      0|	return (0);
 1360|      0|}
ikev2_validate_delete:
 1365|  4.52k|{
 1366|  4.52k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1367|       |
 1368|  4.52k|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1368:6): [True: 435, False: 4.08k]
  ------------------
 1369|    435|		log_debug("%s: malformed payload: too short for header "
 1370|    435|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1371|    435|		return (-1);
 1372|    435|	}
 1373|  4.08k|	memcpy(del, msgbuf + offset, sizeof(*del));
 1374|       |
 1375|  4.08k|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1375:6): [True: 83, False: 4.00k]
  ------------------
 1376|     83|		log_info("%s: malformed payload: invalid protoid", __func__);
 1377|     83|		return (-1);
 1378|     83|	}
 1379|       |
 1380|  4.00k|	return (0);
 1381|  4.08k|}
ikev2_pld_delete:
 1386|  4.52k|{
 1387|  4.52k|	struct ikev2_delete	 del;
 1388|  4.52k|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1389|  4.52k|	size_t			 cnt, sz, len;
 1390|       |
 1391|  4.52k|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1391:6): [True: 518, False: 4.00k]
  ------------------
 1392|    518|		return (-1);
 1393|       |
 1394|       |	/* Skip if it's a response, then we don't have to deal with it */
 1395|  4.00k|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1395:6): [True: 0, False: 4.00k]
  ------------------
 1396|  4.00k|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1396:6): [True: 0, False: 0]
  ------------------
 1397|      0|		return (0);
 1398|       |
 1399|  4.00k|	cnt = betoh16(del.del_nspi);
  ------------------
  |  |   40|  4.00k|#define betoh16	be16toh
  ------------------
 1400|  4.00k|	sz = del.del_spisize;
 1401|       |
 1402|  4.00k|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1403|  4.00k|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1404|  4.00k|	    sz, cnt);
 1405|       |
 1406|  4.00k|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1406:6): [True: 3.79k, False: 210]
  ------------------
 1407|  3.79k|		log_debug("%s: duplicate delete payload", __func__);
 1408|  3.79k|		return (0);
 1409|  3.79k|	}
 1410|       |
 1411|    210|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1412|    210|	msg->msg_parent->msg_del_cnt = cnt;
 1413|    210|	msg->msg_parent->msg_del_spisize = sz;
 1414|       |
 1415|    210|	buf = msgbuf + offset + sizeof(del);
 1416|    210|	len = left - sizeof(del);
 1417|    210|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1417:6): [True: 2, False: 208]
  |  Branch (1417:18): [True: 189, False: 19]
  |  Branch (1417:29): [True: 3, False: 16]
  ------------------
 1418|    194|		return (0);
 1419|       |
 1420|     16|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1420:6): [True: 15, False: 1]
  ------------------
 1421|     15|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1422|     15|		    __func__, len, sz, cnt);
 1423|     15|		return (-1);
 1424|     15|	}
 1425|       |
 1426|      1|	print_hex(buf, 0, len);
 1427|       |
 1428|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1429|       |
 1430|      1|	return (0);
 1431|     16|}
ikev2_validate_tss:
 1436|  11.2k|{
 1437|  11.2k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1438|       |
 1439|  11.2k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1439:6): [True: 1.59k, False: 9.63k]
  ------------------
 1440|  1.59k|		log_debug("%s: malformed payload: too short for header "
 1441|  1.59k|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1442|  1.59k|		return (-1);
 1443|  1.59k|	}
 1444|  9.63k|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1445|       |
 1446|  9.63k|	return (0);
 1447|  11.2k|}
ikev2_pld_tss:
 1452|  11.2k|{
 1453|  11.2k|	struct ikev2_tsp		 tsp;
 1454|  11.2k|	struct ikev2_ts			 ts;
 1455|  11.2k|	size_t				 ts_len, i;
 1456|       |
 1457|  11.2k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1457:6): [True: 1.59k, False: 9.63k]
  ------------------
 1458|  1.59k|		return (-1);
 1459|       |
 1460|  9.63k|	offset += sizeof(tsp);
 1461|  9.63k|	left -= sizeof(tsp);
 1462|       |
 1463|  9.63k|	log_debug("%s: count %d length %zu", __func__,
 1464|  9.63k|	    tsp.tsp_count, left);
 1465|       |
 1466|  13.3k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1466:14): [True: 13.2k, False: 101]
  ------------------
 1467|  13.2k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1467:7): [True: 9.06k, False: 4.22k]
  ------------------
 1468|  9.06k|			return (-1);
 1469|       |
 1470|  4.22k|		log_debug("%s: type %s protoid %u length %d "
 1471|  4.22k|		    "startport %u endport %u", __func__,
 1472|  4.22k|		    print_map(ts.ts_type, ikev2_ts_map),
 1473|  4.22k|		    ts.ts_protoid, betoh16(ts.ts_length),
  ------------------
  |  |   40|  4.22k|#define betoh16	be16toh
  ------------------
 1474|  4.22k|		    betoh16(ts.ts_startport),
  ------------------
  |  |   40|  4.22k|#define betoh16	be16toh
  ------------------
 1475|  4.22k|		    betoh16(ts.ts_endport));
  ------------------
  |  |   40|  4.22k|#define betoh16	be16toh
  ------------------
 1476|       |
 1477|  4.22k|		offset += sizeof(ts);
 1478|  4.22k|		left -= sizeof(ts);
 1479|       |
 1480|  4.22k|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
  ------------------
  |  |   40|  4.22k|#define betoh16	be16toh
  ------------------
 1481|  4.22k|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1481:7): [True: 471, False: 3.75k]
  ------------------
 1482|    471|			return (-1);
 1483|       |
 1484|  3.75k|		offset += ts_len;
 1485|  3.75k|		left -= ts_len;
 1486|  3.75k|	}
 1487|       |
 1488|    101|	return (0);
 1489|  9.63k|}
ikev2_validate_ts:
 1494|  13.2k|{
 1495|  13.2k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1496|  13.2k|	size_t		 ts_length;
 1497|       |
 1498|  13.2k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1498:6): [True: 8.30k, False: 4.99k]
  ------------------
 1499|  8.30k|		log_debug("%s: malformed payload: too short for header "
 1500|  8.30k|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1501|  8.30k|		return (-1);
 1502|  8.30k|	}
 1503|  4.99k|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1504|       |
 1505|  4.99k|	ts_length = betoh16(ts->ts_length);
  ------------------
  |  |   40|  4.99k|#define betoh16	be16toh
  ------------------
 1506|  4.99k|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1506:6): [True: 404, False: 4.58k]
  ------------------
 1507|    404|		log_debug("%s: malformed payload: shorter than minimum header "
 1508|    404|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1509|    404|		return (-1);
 1510|    404|	}
 1511|  4.58k|	if (left < ts_length) {
  ------------------
  |  Branch (1511:6): [True: 361, False: 4.22k]
  ------------------
 1512|    361|		log_debug("%s: malformed payload: too long for payload size "
 1513|    361|		    "(%zu < %zu)", __func__, left, ts_length);
 1514|    361|		return (-1);
 1515|    361|	}
 1516|       |
 1517|  4.22k|	return (0);
 1518|  4.58k|}
ikev2_pld_ts:
 1523|  4.22k|{
 1524|  4.22k|	struct sockaddr_in		 s4;
 1525|  4.22k|	struct sockaddr_in6		 s6;
 1526|  4.22k|	uint8_t				 buf[2][128];
 1527|  4.22k|	uint8_t				*ptr;
 1528|       |
 1529|  4.22k|	ptr = ibuf_data(msg->msg_data) + offset;
 1530|       |
 1531|  4.22k|	switch (type) {
 1532|    158|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  459|    158|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1532:2): [True: 158, False: 4.06k]
  ------------------
 1533|    158|		if (left < 2 * 4) {
  ------------------
  |  Branch (1533:7): [True: 50, False: 108]
  ------------------
 1534|     50|			log_debug("%s: malformed payload: too short "
 1535|     50|			    "for ipv4 addr range (%zu < %u)",
 1536|     50|			    __func__, left, 2 * 4);
 1537|     50|			return (-1);
 1538|     50|		}
 1539|       |
 1540|    108|		bzero(&s4, sizeof(s4));
 1541|    108|		s4.sin_family = AF_INET;
 1542|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1543|       |		s4.sin_len = sizeof(s4);
 1544|       |#endif
 1545|    108|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1546|    108|		ptr += 4;
 1547|    108|		left -= 4;
 1548|    108|		print_host((struct sockaddr *)&s4,
 1549|    108|		    (char *)buf[0], sizeof(buf[0]));
 1550|       |
 1551|    108|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1552|    108|		left -= 4;
 1553|    108|		print_host((struct sockaddr *)&s4,
 1554|    108|		    (char *)buf[1], sizeof(buf[1]));
 1555|       |
 1556|    108|		log_debug("%s: start %s end %s", __func__,
 1557|    108|		    buf[0], buf[1]);
 1558|    108|		break;
 1559|    411|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  460|    411|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1559:2): [True: 411, False: 3.81k]
  ------------------
 1560|    411|		if (left < 2 * 16) {
  ------------------
  |  Branch (1560:7): [True: 26, False: 385]
  ------------------
 1561|     26|			log_debug("%s: malformed payload: too short "
 1562|     26|			    "for ipv6 addr range (%zu < %u)",
 1563|     26|			    __func__, left, 2 * 16);
 1564|     26|			return (-1);
 1565|     26|		}
 1566|    385|		bzero(&s6, sizeof(s6));
 1567|    385|		s6.sin6_family = AF_INET6;
 1568|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1569|       |		s6.sin6_len = sizeof(s6);
 1570|       |#endif
 1571|    385|		memcpy(&s6.sin6_addr, ptr, 16);
 1572|    385|		ptr += 16;
 1573|    385|		left -= 16;
 1574|    385|		print_host((struct sockaddr *)&s6,
 1575|    385|		    (char *)buf[0], sizeof(buf[0]));
 1576|       |
 1577|    385|		memcpy(&s6.sin6_addr, ptr, 16);
 1578|    385|		left -= 16;
 1579|    385|		print_host((struct sockaddr *)&s6,
 1580|    385|		    (char *)buf[1], sizeof(buf[1]));
 1581|    385|		log_debug("%s: start %s end %s", __func__,
 1582|    385|		    buf[0], buf[1]);
 1583|    385|		break;
 1584|  3.65k|	default:
  ------------------
  |  Branch (1584:2): [True: 3.65k, False: 569]
  ------------------
 1585|  3.65k|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1586|  3.65k|		return (0);
 1587|  4.22k|	}
 1588|       |
 1589|    493|	if (left > 0) {
  ------------------
  |  Branch (1589:6): [True: 395, False: 98]
  ------------------
 1590|    395|		log_debug("%s: malformed payload: left (%zu) > 0",
 1591|    395|		    __func__, left);
 1592|    395|		return (-1);
 1593|    395|	}
 1594|       |
 1595|     98|	return (0);
 1596|    493|}
ikev2_validate_cp:
 1837|  12.5k|{
 1838|  12.5k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1839|       |
 1840|  12.5k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1840:6): [True: 3.31k, False: 9.20k]
  ------------------
 1841|  3.31k|		log_debug("%s: malformed payload: too short for header "
 1842|  3.31k|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1843|  3.31k|		return (-1);
 1844|  3.31k|	}
 1845|  9.20k|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1846|       |
 1847|  9.20k|	return (0);
 1848|  12.5k|}
ikev2_pld_cp:
 1853|  12.5k|{
 1854|  12.5k|	struct ikev2_cp		 cp;
 1855|  12.5k|	struct ikev2_cfg	*cfg;
 1856|  12.5k|	struct iked_addr	*addr;
 1857|  12.5k|	struct sockaddr_in	*in4;
 1858|  12.5k|	struct sockaddr_in6	*in6;
 1859|  12.5k|	uint8_t			*ptr;
 1860|  12.5k|	size_t			 len;
 1861|  12.5k|	uint8_t			 buf[128];
 1862|  12.5k|	int			 cfg_type;
 1863|       |
 1864|  12.5k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1864:6): [True: 3.31k, False: 9.20k]
  ------------------
 1865|  3.31k|		return (-1);
 1866|       |
 1867|  9.20k|	ptr = ibuf_data(msg->msg_data) + offset + sizeof(cp);
 1868|  9.20k|	len = left - sizeof(cp);
 1869|       |
 1870|  9.20k|	log_debug("%s: type %s length %zu",
 1871|  9.20k|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1872|  9.20k|	print_hex(ptr, 0, len);
 1873|       |
 1874|  11.5k|	while (len > 0) {
  ------------------
  |  Branch (1874:9): [True: 3.53k, False: 8.03k]
  ------------------
 1875|  3.53k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1875:7): [True: 925, False: 2.61k]
  ------------------
 1876|    925|			log_debug("%s: malformed payload: too short for cfg "
 1877|    925|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1878|    925|			return (-1);
 1879|    925|		}
 1880|  2.61k|		cfg = (struct ikev2_cfg *)ptr;
 1881|       |
 1882|  2.61k|		log_debug("%s: %s 0x%04x length %d", __func__,
 1883|  2.61k|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
  ------------------
  |  |   40|  2.61k|#define betoh16	be16toh
  ------------------
 1884|  2.61k|		    betoh16(cfg->cfg_type),
  ------------------
  |  |   40|  2.61k|#define betoh16	be16toh
  ------------------
 1885|  2.61k|		    betoh16(cfg->cfg_length));
  ------------------
  |  |   40|  2.61k|#define betoh16	be16toh
  ------------------
 1886|       |
 1887|  2.61k|		ptr += sizeof(*cfg);
 1888|  2.61k|		len -= sizeof(*cfg);
 1889|       |
 1890|  2.61k|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  |   40|  2.61k|#define betoh16	be16toh
  ------------------
  |  Branch (1890:7): [True: 243, False: 2.37k]
  ------------------
 1891|    243|			log_debug("%s: malformed payload: too short for "
 1892|    243|			    "cfg_length (%zu < %u)", __func__, len,
 1893|    243|			    betoh16(cfg->cfg_length));
  ------------------
  |  |   40|    243|#define betoh16	be16toh
  ------------------
 1894|    243|			return (-1);
 1895|    243|		}
 1896|       |
 1897|  2.37k|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
  ------------------
  |  |   40|  2.37k|#define betoh16	be16toh
  ------------------
 1898|       |
 1899|  2.37k|		cfg_type = betoh16(cfg->cfg_type);
  ------------------
  |  |   40|  2.37k|#define betoh16	be16toh
  ------------------
 1900|  2.37k|		switch (cfg_type) {
  ------------------
  |  Branch (1900:11): [True: 1.93k, False: 432]
  ------------------
 1901|    157|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|    157|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1901:3): [True: 157, False: 2.21k]
  ------------------
 1902|    294|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|    294|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1902:3): [True: 137, False: 2.23k]
  ------------------
 1903|    294|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1903:8): [True: 294, False: 0]
  ------------------
 1904|    294|				break;
 1905|      0|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  |  Branch (1905:8): [True: 0, False: 0]
  ------------------
 1906|      0|				break;
 1907|       |			/* XXX multiple-valued */
 1908|      0|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  |  Branch (1908:8): [True: 0, False: 0]
  ------------------
 1909|      0|				log_debug("%s: malformed payload: too short "
 1910|      0|				    "for ipv4 addr (%u < %u)",
 1911|      0|				    __func__, betoh16(cfg->cfg_length), 4);
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
 1912|      0|				return (-1);
 1913|      0|			}
 1914|      0|			switch(cfg_type) {
 1915|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|      0|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1915:4): [True: 0, False: 0]
  ------------------
 1916|      0|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1916:9): [True: 0, False: 0]
  ------------------
 1917|      0|					log_debug("%s: address already set", __func__);
 1918|      0|					goto skip;
 1919|      0|				}
 1920|      0|				break;
 1921|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|      0|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1921:4): [True: 0, False: 0]
  ------------------
 1922|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1922:9): [True: 0, False: 0]
  ------------------
 1923|      0|					log_debug("%s: dns already set", __func__);
 1924|      0|					goto skip;
 1925|      0|				}
 1926|      0|				break;
 1927|      0|			default:
  ------------------
  |  Branch (1927:4): [True: 0, False: 0]
  ------------------
 1928|      0|				break;
 1929|      0|			}
 1930|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1930:8): [True: 0, False: 0]
  ------------------
 1931|      0|				log_debug("%s: malloc failed", __func__);
 1932|      0|				break;
 1933|      0|			}
 1934|      0|			addr->addr_af = AF_INET;
 1935|      0|			in4 = (struct sockaddr_in *)&addr->addr;
 1936|      0|			in4->sin_family = AF_INET;
 1937|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1938|       |			in4->sin_len = sizeof(*in4);
 1939|       |#endif
 1940|      0|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1941|      0|			print_host((struct sockaddr *)in4, (char *)buf,
 1942|      0|			    sizeof(buf));
 1943|      0|			log_debug("%s: cfg %s", __func__, buf);
 1944|      0|			switch(cfg_type) {
  ------------------
  |  Branch (1944:11): [True: 0, False: 0]
  ------------------
 1945|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  527|      0|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1945:4): [True: 0, False: 0]
  ------------------
 1946|      0|				msg->msg_parent->msg_cp_addr = addr;
 1947|      0|				log_debug("%s: IP4_ADDRESS %s", __func__, buf);
 1948|      0|				break;
 1949|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  529|      0|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1949:4): [True: 0, False: 0]
  ------------------
 1950|      0|				msg->msg_parent->msg_cp_dns = addr;
 1951|      0|				log_debug("%s: IP4_DNS %s", __func__, buf);
 1952|      0|				break;
 1953|      0|			}
 1954|      0|			break;
 1955|     58|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|     58|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1955:3): [True: 58, False: 2.31k]
  ------------------
 1956|    138|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|    138|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1956:3): [True: 80, False: 2.29k]
  ------------------
 1957|    138|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1957:8): [True: 138, False: 0]
  ------------------
 1958|    138|				break;
 1959|      0|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  |  Branch (1959:8): [True: 0, False: 0]
  ------------------
 1960|      0|				break;
 1961|       |			/* XXX multiple-valued */
 1962|      0|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
  |  Branch (1962:8): [True: 0, False: 0]
  ------------------
 1963|      0|				log_debug("%s: malformed payload: too short "
 1964|      0|				    "for ipv6 addr w/prefixlen (%u < %u)",
 1965|      0|				    __func__, betoh16(cfg->cfg_length), 16);
  ------------------
  |  |   40|      0|#define betoh16	be16toh
  ------------------
 1966|      0|				return (-1);
 1967|      0|			}
 1968|      0|			switch(cfg_type) {
  ------------------
  |  Branch (1968:11): [True: 0, False: 0]
  ------------------
 1969|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|      0|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1969:4): [True: 0, False: 0]
  ------------------
 1970|      0|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (1970:9): [True: 0, False: 0]
  ------------------
 1971|      0|					log_debug("%s: address6 already set", __func__);
 1972|      0|					goto skip;
 1973|      0|				}
 1974|      0|				break;
 1975|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      0|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1975:4): [True: 0, False: 0]
  ------------------
 1976|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1976:9): [True: 0, False: 0]
  ------------------
 1977|      0|					log_debug("%s: dns already set", __func__);
 1978|      0|					goto skip;
 1979|      0|				}
 1980|      0|				break;
 1981|      0|			}
 1982|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1982:8): [True: 0, False: 0]
  ------------------
 1983|      0|				log_debug("%s: malloc failed", __func__);
 1984|      0|				break;
 1985|      0|			}
 1986|      0|			addr->addr_af = AF_INET6;
 1987|      0|			in6 = (struct sockaddr_in6 *)&addr->addr;
 1988|      0|			in6->sin6_family = AF_INET6;
 1989|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1990|       |			in6->sin6_len = sizeof(*in6);
 1991|       |#endif
 1992|      0|			memcpy(&in6->sin6_addr, ptr, 16);
 1993|      0|			print_host((struct sockaddr *)in6, (char *)buf,
 1994|      0|			    sizeof(buf));
 1995|      0|			log_debug("%s: cfg %s/%d", __func__, buf, ptr[16]);
 1996|      0|			switch(cfg_type) {
  ------------------
  |  Branch (1996:11): [True: 0, False: 0]
  ------------------
 1997|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  534|      0|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1997:4): [True: 0, False: 0]
  ------------------
 1998|      0|				msg->msg_parent->msg_cp_addr6 = addr;
 1999|      0|				log_debug("%s: IP6_ADDRESS %s", __func__, buf);
 2000|      0|				break;
 2001|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  535|      0|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2001:4): [True: 0, False: 0]
  ------------------
 2002|      0|				msg->msg_parent->msg_cp_dns = addr;
 2003|      0|				log_debug("%s: IP6_DNS %s", __func__, buf);
 2004|      0|				break;
 2005|      0|			}
 2006|      0|			break;
 2007|  2.37k|		}
 2008|       |
 2009|  2.37k| skip:
 2010|  2.37k|		ptr += betoh16(cfg->cfg_length);
  ------------------
  |  |   40|  2.37k|#define betoh16	be16toh
  ------------------
 2011|  2.37k|		len -= betoh16(cfg->cfg_length);
  ------------------
  |  |   40|  2.37k|#define betoh16	be16toh
  ------------------
 2012|  2.37k|	}
 2013|       |
 2014|  8.03k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2014:6): [True: 8.03k, False: 0]
  ------------------
 2015|  8.03k|		return (0);
 2016|       |
 2017|      0|	msg->msg_parent->msg_cp = cp.cp_type;
 2018|       |
 2019|      0|	return (0);
 2020|  8.03k|}
ikev2_validate_eap:
 2025|  25.8k|{
 2026|  25.8k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2027|       |
 2028|  25.8k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2028:6): [True: 9.67k, False: 16.1k]
  ------------------
 2029|  9.67k|		log_debug("%s: malformed payload: too short for header "
 2030|  9.67k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2031|  9.67k|		return (-1);
 2032|  9.67k|	}
 2033|  16.1k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2034|       |
 2035|  16.1k|	return (0);
 2036|  25.8k|}
ikev2_pld_eap:
 2041|  25.8k|{
 2042|  25.8k|	struct eap_header		 hdr;
 2043|  25.8k|	struct eap_message		*eap = NULL;
 2044|  25.8k|	const struct iked_sa		*sa = msg->msg_sa;
 2045|  25.8k|	size_t				 len;
 2046|       |
 2047|  25.8k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2047:6): [True: 9.67k, False: 16.1k]
  ------------------
 2048|  9.67k|		return (-1);
 2049|  16.1k|	len = betoh16(hdr.eap_length);
  ------------------
  |  |   40|  16.1k|#define betoh16	be16toh
  ------------------
 2050|       |
 2051|  16.1k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2051:6): [True: 6.75k, False: 9.38k]
  ------------------
 2052|  6.75k|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1054|  6.75k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1053|  6.75k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2053|  6.75k|		    print_map(hdr.eap_code, eap_code_map),
 2054|  6.75k|		    hdr.eap_id, betoh16(hdr.eap_length));
  ------------------
  |  |   40|  6.75k|#define betoh16	be16toh
  ------------------
 2055|  9.38k|	} else {
 2056|       |		/* Now try to get the indicated length */
 2057|  9.38k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2057:7): [True: 4.23k, False: 5.15k]
  ------------------
 2058|  4.23k|			log_debug("%s: invalid EAP length", __func__);
 2059|  4.23k|			return (-1);
 2060|  4.23k|		}
 2061|       |
 2062|  5.15k|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1054|  5.15k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1053|  5.15k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2063|  5.15k|		    print_map(eap->eap_code, eap_code_map),
 2064|  5.15k|		    eap->eap_id, betoh16(eap->eap_length),
  ------------------
  |  |   40|  5.15k|#define betoh16	be16toh
  ------------------
 2065|  5.15k|		    print_map(eap->eap_type, eap_type_map));
 2066|       |
 2067|  5.15k|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2067:7): [True: 0, False: 5.15k]
  ------------------
 2068|      0|			return (-1);
 2069|  5.15k|		msg->msg_parent->msg_eap.eam_found = 1;
 2070|  5.15k|	}
 2071|       |
 2072|  11.9k|	return (0);
 2073|  16.1k|}

ibuf_zero:
   47|  9.71k|{
   48|  9.71k|	explicit_bzero(buf->buf, buf->wpos);
   49|  9.71k|}
ibuf_new:
   53|  4.85k|{
   54|  4.85k|	struct ibuf	*buf;
   55|       |
   56|  4.85k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (56:6): [True: 0, False: 4.85k]
  ------------------
   57|  4.85k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  4.85k|#define IKED_MSGBUF_MAX		8192
  ------------------
   58|      0|		return (NULL);
   59|       |
   60|  4.85k|	ibuf_zero(buf);
   61|       |
   62|  4.85k|	if (len == 0)
  ------------------
  |  Branch (62:6): [True: 0, False: 4.85k]
  ------------------
   63|      0|		return (buf);
   64|       |
   65|  4.85k|	if (data == NULL) {
  ------------------
  |  Branch (65:6): [True: 0, False: 4.85k]
  ------------------
   66|      0|		if (ibuf_advance(buf, len) == NULL) {
  ------------------
  |  Branch (66:7): [True: 0, False: 0]
  ------------------
   67|      0|			ibuf_free(buf);
   68|      0|			return (NULL);
   69|      0|		}
   70|  4.85k|	} else {
   71|  4.85k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (71:7): [True: 0, False: 4.85k]
  ------------------
   72|      0|			ibuf_free(buf);
   73|      0|			return (NULL);
   74|      0|		}
   75|  4.85k|	}
   76|       |
   77|  4.85k|	return (buf);
   78|  4.85k|}
ibuf_release:
  106|  25.7k|{
  107|  25.7k|	if (buf == NULL)
  ------------------
  |  Branch (107:6): [True: 20.9k, False: 4.85k]
  ------------------
  108|  20.9k|		return;
  109|  4.85k|	if (buf->buf != NULL) {
  ------------------
  |  Branch (109:6): [True: 4.85k, False: 0]
  ------------------
  110|  4.85k|		ibuf_zero(buf);
  111|  4.85k|		free(buf->buf);
  112|  4.85k|	}
  113|  4.85k|	free(buf);
  114|  4.85k|}
ibuf_data:
  126|   491k|{
  127|   491k|	return (ibuf_seek(buf, 0, 0));
  128|   491k|}

log_getverbose:
   82|  87.5k|{
   83|  87.5k|	return (verbose);
   84|  87.5k|}
vlog:
   98|  12.6k|{
   99|  12.6k|	char	*nfmt;
  100|  12.6k|	int	 saved_errno = errno;
  101|       |
  102|  12.6k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 12.6k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  12.6k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  12.6k|	errno = saved_errno;
  116|  12.6k|}
log_info:
  158|  12.6k|{
  159|  12.6k|	va_list	 ap;
  160|       |
  161|  12.6k|	va_start(ap, emsg);
  162|  12.6k|	vlog(LOG_INFO, emsg, ap);
  163|  12.6k|	va_end(ap);
  164|  12.6k|}
log_debug:
  168|   354k|{
  169|   354k|	va_list	 ap;
  170|       |
  171|   354k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 354k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|   354k|}

socket_getport:
   71|    986|{
   72|    986|	switch (sa->sa_family) {
   73|    216|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 216, False: 770]
  ------------------
   74|    216|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|    770|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 770, False: 216]
  ------------------
   76|    770|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 986]
  ------------------
   78|      0|		return (0);
   79|    986|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|    986|}
print_spi:
  499|  13.3k|{
  500|  13.3k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  13.3k|	static int		 i = 0;
  502|  13.3k|	char			*ptr;
  503|       |
  504|  13.3k|	ptr = buf[i];
  505|       |
  506|  13.3k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 13.3k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|    228|	case 4:
  ------------------
  |  Branch (510:2): [True: 228, False: 13.1k]
  ------------------
  511|    228|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|    228|		break;
  513|  4.80k|	case 8:
  ------------------
  |  Branch (513:2): [True: 4.80k, False: 8.57k]
  ------------------
  514|  4.80k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  4.80k|		break;
  516|  8.34k|	default:
  ------------------
  |  Branch (516:2): [True: 8.34k, False: 5.03k]
  ------------------
  517|  8.34k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  8.34k|		break;
  519|  13.3k|	}
  520|       |
  521|  13.3k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  13.3k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 1.67k, False: 11.7k]
  ------------------
  522|  1.67k|		i = 0;
  523|       |
  524|  13.3k|	return (ptr);
  525|  13.3k|}
print_map:
  529|   425k|{
  530|   425k|	unsigned int		 i;
  531|   425k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|   425k|	static int		 idx = 0;
  533|   425k|	const char		*name = NULL;
  534|       |
  535|   425k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|   425k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 53.1k, False: 371k]
  ------------------
  536|  53.1k|		idx = 0;
  537|   425k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  7.02M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 6.60M, False: 425k]
  ------------------
  540|  6.60M|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 289k, False: 6.31M]
  ------------------
  541|   289k|			name = map[i].cm_name;
  542|  6.60M|	}
  543|       |
  544|   425k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 135k, False: 289k]
  ------------------
  545|   135k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|   289k|	else
  547|   289k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|   425k|	return (buf[idx++]);
  550|   425k|}
print_hex:
  561|  87.5k|{
  562|  87.5k|	unsigned int	 i;
  563|       |
  564|  87.5k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 87.5k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|  87.5k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_host:
  731|    986|{
  732|    986|	static char	sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  733|    986|	static int	idx = 0;
  734|    986|	char		pbuf[7];
  735|    986|	in_port_t	port;
  736|       |
  737|    986|	if (buf == NULL) {
  ------------------
  |  Branch (737:6): [True: 0, False: 986]
  ------------------
  738|      0|		buf = sbuf[idx];
  739|      0|		len = sizeof(sbuf[idx]);
  740|      0|		if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|      0|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (740:7): [True: 0, False: 0]
  ------------------
  741|      0|			idx = 0;
  742|      0|	}
  743|       |
  744|    986|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (744:6): [True: 0, False: 986]
  ------------------
  745|      0|		strlcpy(buf, "any", len);
  746|      0|		return (buf);
  747|      0|	}
  748|       |
  749|    986|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  177|    986|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (177:3): [True: 216, False: 770]
  |  |  ------------------
  |  |  178|    986|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (178:2): [True: 770, False: 0]
  |  |  ------------------
  |  |  179|    770|	sizeof(struct sockaddr))
  ------------------
  |  Branch (749:6): [True: 0, False: 986]
  ------------------
  750|    986|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  751|      0|		strlcpy(buf, "unknown", len);
  752|      0|		return (buf);
  753|      0|	}
  754|       |
  755|    986|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (755:6): [True: 0, False: 986]
  ------------------
  756|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  757|      0|		(void)strlcat(buf, pbuf, len);
  758|      0|	}
  759|       |
  760|    986|	return (buf);
  761|    986|}

eap_parse:
   58|  5.15k|{
   59|  5.15k|	return (0);
   60|  5.15k|}
ikev2_msg_frompeer:
   64|   119k|{
   65|   119k|	return (0);
   66|   119k|}
ikev2_ikesa_info:
   82|  11.9k|{
   83|  11.9k|	return "";
   84|  11.9k|}
ikev2_print_id:
  159|  2.52k|{
  160|  2.52k|	return (0);
  161|  2.52k|}
ikev2_msg_cleanup:
  230|  2.32k|{
  231|  2.32k|	struct iked_certreq *cr;
  232|  2.32k|	struct iked_proposal *prop, *proptmp;
  233|       |
  234|  2.32k|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (234:6): [True: 2.32k, False: 0]
  ------------------
  235|  2.32k|		ibuf_release(msg->msg_nonce);
  236|  2.32k|		ibuf_release(msg->msg_ke);
  237|  2.32k|		ibuf_release(msg->msg_auth.id_buf);
  238|  2.32k|		ibuf_release(msg->msg_peerid.id_buf);
  239|  2.32k|		ibuf_release(msg->msg_localid.id_buf);
  240|  2.32k|		ibuf_release(msg->msg_cert.id_buf);
  241|  2.32k|		ibuf_release(msg->msg_cookie);
  242|  2.32k|		ibuf_release(msg->msg_cookie2);
  243|  2.32k|		ibuf_release(msg->msg_del_buf);
  244|  2.32k|		free(msg->msg_eap.eam_user);
  245|  2.32k|		free(msg->msg_cp_addr);
  246|  2.32k|		free(msg->msg_cp_addr6);
  247|       |
  248|  2.32k|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|  2.32k|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|  2.32k|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|  2.32k|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  4.65k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 2.32k]
  |  |  ------------------
  |  |  447|  2.32k|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|  2.32k|	    (var) = (tvar))
  ------------------
  249|  2.32k|		    proptmp) {
  250|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  251|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (251:8): [True: 0, False: 0]
  ------------------
  252|      0|				free(prop->prop_xforms);
  253|      0|			free(prop);
  254|      0|		}
  255|       |
  256|  2.32k|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|  2.32k|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (256:10): [True: 0, False: 2.32k]
  ------------------
  257|      0|			ibuf_release(cr->cr_data);
  258|      0|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|      0|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|      0|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  310|      0|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  259|      0|			free(cr);
  260|      0|		}
  261|  2.32k|	}
  262|       |
  263|  2.32k|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (263:6): [True: 2.32k, False: 0]
  ------------------
  264|  2.32k|		ibuf_release(msg->msg_data);
  265|  2.32k|		msg->msg_data = NULL;
  266|  2.32k|	}
  267|  2.32k|}

LLVMFuzzerTestOneInput:
  104|  2.32k|{
  105|  2.32k|	struct ibuf		*fuzzed;
  106|  2.32k|	struct ike_header	 hdr;
  107|  2.32k|	struct iked_message	 msg;
  108|       |
  109|  2.32k|	bzero(&hdr, sizeof(hdr));
  110|  2.32k|	bzero(&msg, sizeof(msg));
  111|       |
  112|  2.32k|	fuzzed = ibuf_new(data, size);
  113|  2.32k|	if (fuzzed == NULL){
  ------------------
  |  Branch (113:6): [True: 0, False: 2.32k]
  ------------------
  114|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  115|      0|		    "(hint: fuzz-input too long?)");
  116|      0|		return -1;
  117|      0|	}	
  118|       |	
  119|       |	/* size too small? */
  120|  2.32k|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (120:6): [True: 1, False: 2.32k]
  ------------------
  121|      1|		ibuf_free(fuzzed);
  122|      1|		return 0;
  123|      1|	}	       
  124|       |
  125|  2.32k|	prepare_header(&hdr, fuzzed);
  126|  2.32k|	prepare_message(&msg, fuzzed);
  127|       |
  128|  2.32k|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  129|       |
  130|  2.32k|	ikev2_msg_cleanup(NULL, &msg);
  131|       |
  132|  2.32k|	return 0;
  133|  2.32k|}
test_parser_fuzz.c:prepare_header:
   75|  2.32k|{
   76|  2.32k|	bzero(hdr, sizeof(*hdr));
   77|  2.32k|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|  2.32k|	    sizeof(hdr->ike_ispi));
   79|  2.32k|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|  2.32k|	    sizeof(hdr->ike_rspi));
   81|  2.32k|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|  2.32k|	hdr->ike_version = get_version(ibuf_data(data));
   83|  2.32k|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|  2.32k|	hdr->ike_length = get_length(ibuf_data(data));
   85|  2.32k|}
test_parser_fuzz.c:get_icookie:
   39|  2.32k|{
   40|  2.32k|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|  2.32k|#define OFFSET_ICOOKIE		0
  ------------------
   41|  2.32k|}
test_parser_fuzz.c:get_rcookie:
   45|  2.32k|{
   46|  2.32k|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|  2.32k|#define OFFSET_RCOOKIE		8
  ------------------
   47|  2.32k|}
test_parser_fuzz.c:get_nextpayload:
   51|  2.32k|{
   52|  2.32k|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|  2.32k|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|  2.32k|}
test_parser_fuzz.c:get_version:
   57|  2.32k|{
   58|  2.32k|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|  2.32k|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|  2.32k|}
test_parser_fuzz.c:get_exchange:
   63|  2.32k|{
   64|  2.32k|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|  2.32k|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|  2.32k|}
test_parser_fuzz.c:get_length:
   69|  2.32k|{
   70|  2.32k|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|  2.32k|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|  2.32k|}
test_parser_fuzz.c:prepare_message:
   89|  2.32k|{
   90|  2.32k|	static struct iked_sa	sa;
   91|       |
   92|  2.32k|	bzero(&sa, sizeof(sa));
   93|  2.32k|	bzero(msg, sizeof(*msg));
   94|       |
   95|  2.32k|	msg->msg_sa = &sa;
   96|  2.32k|	msg->msg_data = data;
   97|  2.32k|	msg->msg_e = 1;
   98|  2.32k|	msg->msg_parent = msg;
   99|  2.32k|}

