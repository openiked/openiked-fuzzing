freezero:
   25|  1.51k|{
   26|       |	/* This is legal. */
   27|  1.51k|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 117, False: 1.39k]
  ------------------
   28|    117|		return;
   29|       |
   30|  1.39k|	explicit_bzero(ptr, sz);
   31|  1.39k|	free(ptr);
   32|  1.39k|}

ibuf_dynamic:
   62|  1.51k|{
   63|  1.51k|	struct ibuf	*buf;
   64|       |
   65|  1.51k|	if (max < len) {
  ------------------
  |  Branch (65:6): [True: 0, False: 1.51k]
  ------------------
   66|      0|		errno = EINVAL;
   67|      0|		return (NULL);
   68|      0|	}
   69|       |
   70|  1.51k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (70:6): [True: 0, False: 1.51k]
  ------------------
   71|      0|		return (NULL);
   72|  1.51k|	if (len > 0) {
  ------------------
  |  Branch (72:6): [True: 1.39k, False: 117]
  ------------------
   73|  1.39k|		if ((buf->buf = calloc(len, 1)) == NULL) {
  ------------------
  |  Branch (73:7): [True: 0, False: 1.39k]
  ------------------
   74|      0|			free(buf);
   75|      0|			return (NULL);
   76|      0|		}
   77|  1.39k|	}
   78|  1.51k|	buf->size = len;
   79|  1.51k|	buf->max = max;
   80|  1.51k|	buf->fd = -1;
   81|       |
   82|  1.51k|	return (buf);
   83|  1.51k|}
ibuf_reserve:
  107|  1.39k|{
  108|  1.39k|	void	*b;
  109|       |
  110|  1.39k|	if (len > SIZE_MAX - buf->wpos) {
  ------------------
  |  Branch (110:6): [True: 0, False: 1.39k]
  ------------------
  111|      0|		errno = ERANGE;
  112|      0|		return (NULL);
  113|      0|	}
  114|       |
  115|  1.39k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (115:6): [True: 0, False: 1.39k]
  ------------------
  116|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (116:7): [True: 0, False: 0]
  ------------------
  117|      0|			return (NULL);
  118|       |
  119|  1.39k|	b = buf->buf + buf->wpos;
  120|  1.39k|	buf->wpos += len;
  121|  1.39k|	memset(b, 0, len);
  122|  1.39k|	return (b);
  123|  1.39k|}
ibuf_add:
  127|  1.39k|{
  128|  1.39k|	void *b;
  129|       |
  130|  1.39k|	if ((b = ibuf_reserve(buf, len)) == NULL)
  ------------------
  |  Branch (130:6): [True: 0, False: 1.39k]
  ------------------
  131|      0|		return (-1);
  132|       |
  133|  1.39k|	memcpy(b, data, len);
  134|  1.39k|	return (0);
  135|  1.39k|}
ibuf_seek:
  202|  21.0k|{
  203|       |	/* only allowed to seek in already written parts */
  204|  21.0k|	if (len > SIZE_MAX - pos || pos + len > buf->wpos) {
  ------------------
  |  Branch (204:6): [True: 0, False: 21.0k]
  |  Branch (204:30): [True: 459, False: 20.5k]
  ------------------
  205|    459|		errno = ERANGE;
  206|    459|		return (NULL);
  207|    459|	}
  208|       |
  209|  20.5k|	return (buf->buf + pos);
  210|  21.0k|}
ibuf_data:
  272|  65.5k|{
  273|  65.5k|	return (buf->buf);
  274|  65.5k|}
ibuf_size:
  278|    704|{
  279|    704|	return (buf->wpos);
  280|    704|}
ibuf_free:
  296|  9.89k|{
  297|  9.89k|	if (buf == NULL)
  ------------------
  |  Branch (297:6): [True: 8.38k, False: 1.51k]
  ------------------
  298|  8.38k|		return;
  299|       |#ifdef NOTYET
  300|       |	if (buf->fd != -1)
  301|       |		close(buf->fd);
  302|       |#endif
  303|  1.51k|	freezero(buf->buf, buf->size);
  304|  1.51k|	free(buf);
  305|  1.51k|}

strlcpy:
   29|  45.8k|{
   30|  45.8k|	const char *osrc = src;
   31|  45.8k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|  45.8k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 45.8k, False: 0]
  ------------------
   35|   250k|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 250k, False: 120]
  ------------------
   36|   250k|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 45.6k, False: 204k]
  ------------------
   37|  45.6k|				break;
   38|   250k|		}
   39|  45.8k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|  45.8k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 120, False: 45.6k]
  ------------------
   43|    120|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 120, False: 0]
  ------------------
   44|    120|			*dst = '\0';		/* NUL-terminate dst */
   45|    120|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 120]
  ------------------
   46|      0|			;
   47|    120|	}
   48|       |
   49|  45.8k|	return(src - osrc - 1);	/* count does not include NUL */
   50|  45.8k|}

ikev2_pld_parse:
  118|    704|{
  119|    704|	log_debug("%s: header ispi %s rspi %s"
  120|    704|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  121|    704|	    " msgid %d length %u response %d", __func__,
  122|    704|	    print_spi(betoh64(hdr->ike_ispi), 8),
  123|    704|	    print_spi(betoh64(hdr->ike_rspi), 8),
  124|    704|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  125|    704|	    hdr->ike_version,
  126|    704|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  127|    704|	    hdr->ike_flags,
  128|    704|	    betoh32(hdr->ike_msgid),
  129|    704|	    betoh32(hdr->ike_length),
  130|    704|	    msg->msg_response);
  131|       |
  132|    704|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  Branch (132:6): [True: 4, False: 700]
  ------------------
  133|      4|		log_debug("%s: short message", __func__);
  134|      4|		return (-1);
  135|      4|	}
  136|       |
  137|    700|	offset += sizeof(*hdr);
  138|       |
  139|    700|	return (ikev2_pld_payloads(env, msg, offset,
  140|    700|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  141|    704|}
ikev2_validate_pld:
  146|  21.7k|{
  147|  21.7k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  148|  21.7k|	size_t		 pld_length;
  149|       |
  150|       |	/* We need at least the generic header. */
  151|  21.7k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (151:6): [True: 69, False: 21.6k]
  ------------------
  152|     69|		log_debug("%s: malformed payload: too short for generic "
  153|     69|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  154|     69|		return (-1);
  155|     69|	}
  156|  21.6k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  157|       |
  158|       |	/*
  159|       |	 * We need at least the specified number of bytes.
  160|       |	 * pld_length is the full size of the payload including
  161|       |	 * the generic payload header.
  162|       |	 */
  163|  21.6k|	pld_length = betoh16(pld->pld_length);
  164|  21.6k|	if (left < pld_length) {
  ------------------
  |  Branch (164:6): [True: 80, False: 21.5k]
  ------------------
  165|     80|		log_debug("%s: malformed payload: shorter than specified "
  166|     80|		    "(%zu < %zu)", __func__, left, pld_length);
  167|     80|		return (-1);
  168|     80|	}
  169|       |	/*
  170|       |	 * Sanity check the specified payload size, it must
  171|       |	 * be at least the size of the generic payload header.
  172|       |	 */
  173|  21.5k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (173:6): [True: 34, False: 21.5k]
  ------------------
  174|     34|		log_debug("%s: malformed payload: shorter than minimum "
  175|     34|		    "header size (%zu < %zu)", __func__, pld_length,
  176|     34|		    sizeof(*pld));
  177|     34|		return (-1);
  178|     34|	}
  179|       |
  180|  21.5k|	return (0);
  181|  21.5k|}
ikev2_pld_payloads:
  186|    700|{
  187|    700|	struct ikev2_payload	 pld;
  188|    700|	unsigned int		 e;
  189|    700|	int			 ret;
  190|    700|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  191|    700|	size_t			 total, left;
  192|       |
  193|       |	/* Check if message was decrypted in an E payload */
  194|    700|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|    700|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (194:6): [True: 700, False: 0]
  ------------------
  195|       |
  196|       |	/* Bytes left in datagram. */
  197|    700|	total = length - offset;
  198|       |
  199|  22.1k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (199:9): [True: 22.0k, False: 93]
  |  Branch (199:25): [True: 21.7k, False: 355]
  ------------------
  200|  21.7k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (200:7): [True: 183, False: 21.5k]
  ------------------
  201|    183|			return (-1);
  202|       |
  203|  21.5k|		log_debug("%s: %spayload %s"
  204|  21.5k|		    " nextpayload %s critical 0x%02x length %d",
  205|  21.5k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (205:17): [True: 21.5k, False: 0]
  ------------------
  206|  21.5k|		    print_map(payload, ikev2_payload_map),
  207|  21.5k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  208|  21.5k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|  21.5k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  209|  21.5k|		    betoh16(pld.pld_length));
  210|       |
  211|       |		/* Skip over generic payload header. */
  212|  21.5k|		offset += sizeof(pld);
  213|  21.5k|		total -= sizeof(pld);
  214|  21.5k|		left = betoh16(pld.pld_length) - sizeof(pld);
  215|  21.5k|		ret = 0;
  216|       |
  217|  21.5k|		switch (payload | e) {
  218|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (218:3): [True: 0, False: 21.5k]
  ------------------
  219|  4.39k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  4.39k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  4.39k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (219:3): [True: 4.39k, False: 17.1k]
  ------------------
  220|  4.39k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  221|  4.39k|			break;
  222|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (222:3): [True: 0, False: 21.5k]
  ------------------
  223|    644|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|    644|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|    644|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (223:3): [True: 644, False: 20.9k]
  ------------------
  224|    644|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  225|    644|			break;
  226|  1.01k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|  1.01k|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|  1.01k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 1.01k, False: 20.5k]
  ------------------
  227|  1.81k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  1.81k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  1.81k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (227:3): [True: 800, False: 20.7k]
  ------------------
  228|  1.81k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  229|  1.81k|			    payload);
  230|  1.81k|			break;
  231|    382|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|    382|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|    382|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (231:3): [True: 382, False: 21.1k]
  ------------------
  232|    382|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  233|    382|			break;
  234|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (234:3): [True: 0, False: 21.5k]
  ------------------
  235|  1.80k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  1.80k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  1.80k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (235:3): [True: 1.80k, False: 19.7k]
  ------------------
  236|  1.80k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  237|  1.80k|			break;
  238|    714|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|    714|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|    714|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (238:3): [True: 714, False: 20.8k]
  ------------------
  239|    714|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  240|    714|			break;
  241|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (241:3): [True: 0, False: 21.5k]
  ------------------
  242|     56|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|     56|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|     56|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (242:3): [True: 56, False: 21.4k]
  ------------------
  243|     56|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  244|     56|			break;
  245|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (245:3): [True: 0, False: 21.5k]
  ------------------
  246|  1.11k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  1.11k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  1.11k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (246:3): [True: 1.11k, False: 20.4k]
  ------------------
  247|  1.11k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  248|  1.11k|			break;
  249|    814|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|    814|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|    814|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (249:3): [True: 814, False: 20.7k]
  ------------------
  250|    814|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  251|    814|			break;
  252|    344|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|    344|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|    344|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 344, False: 21.2k]
  ------------------
  253|  1.25k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  1.25k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  1.25k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (253:3): [True: 912, False: 20.6k]
  ------------------
  254|  1.25k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  255|  1.25k|			break;
  256|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (256:3): [True: 0, False: 21.5k]
  ------------------
  257|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  258|      0|			break;
  259|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (259:3): [True: 0, False: 21.5k]
  ------------------
  260|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  261|      0|			break;
  262|  1.25k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  1.25k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  1.25k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (262:3): [True: 1.25k, False: 20.2k]
  ------------------
  263|  1.25k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  264|  1.25k|			break;
  265|  3.25k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  3.25k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  3.25k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (265:3): [True: 3.25k, False: 18.2k]
  ------------------
  266|  3.25k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  267|  3.25k|			break;
  268|  4.04k|		default:
  ------------------
  |  Branch (268:3): [True: 4.04k, False: 17.5k]
  ------------------
  269|  4.04k|			print_hex(msgbuf, offset,
  270|  4.04k|			    betoh16(pld.pld_length) - sizeof(pld));
  271|  4.04k|			break;
  272|  21.5k|		}
  273|       |
  274|  21.5k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (274:7): [True: 10.7k, False: 10.7k]
  |  Branch (274:19): [True: 67, False: 10.7k]
  ------------------
  275|     67|			(void)ikev2_send_informational(env, msg);
  276|     67|			return (-1);
  277|     67|		}
  278|       |
  279|       |		/* Encrypted payloads must appear last */
  280|  21.4k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|  21.4k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (280:7): [True: 1, False: 21.4k]
  ------------------
  281|  21.4k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|  21.4k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (281:7): [True: 1, False: 21.4k]
  ------------------
  282|      2|			return (0);
  283|       |
  284|  21.4k|		payload = pld.pld_nextpayload;
  285|  21.4k|		offset += left;
  286|  21.4k|		total -= left;
  287|  21.4k|	}
  288|       |
  289|    448|	return (0);
  290|    700|}
ikev2_validate_sa:
  295|  5.48k|{
  296|  5.48k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  297|  5.48k|	size_t		 sap_length;
  298|       |
  299|  5.48k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (299:6): [True: 1.97k, False: 3.50k]
  ------------------
  300|  1.97k|		log_debug("%s: malformed payload: too short for header "
  301|  1.97k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  302|  1.97k|		return (-1);
  303|  1.97k|	}
  304|  3.50k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  305|       |
  306|  3.50k|	sap_length = betoh16(sap->sap_length);
  307|  3.50k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (307:6): [True: 603, False: 2.90k]
  ------------------
  308|    603|		log_debug("%s: malformed payload: shorter than minimum header "
  309|    603|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  310|    603|		return (-1);
  311|    603|	}
  312|  2.90k|	if (left < sap_length) {
  ------------------
  |  Branch (312:6): [True: 296, False: 2.60k]
  ------------------
  313|    296|		log_debug("%s: malformed payload: too long for actual payload "
  314|    296|		    "size (%zu < %zu)", __func__, left, sap_length);
  315|    296|		return (-1);
  316|    296|	}
  317|       |	/*
  318|       |	 * If there is only one proposal, sap_length must be the
  319|       |	 * total payload size.
  320|       |	 */
  321|  2.60k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (321:6): [True: 305, False: 2.30k]
  |  Branch (321:24): [True: 10, False: 295]
  ------------------
  322|     10|		log_debug("%s: malformed payload: SA payload length mismatches "
  323|     10|		    "single proposal substructure length (%zu != %zu)",
  324|     10|		    __func__, left, sap_length);
  325|     10|		return (-1);
  326|     10|	}
  327|       |	/*
  328|       |	 * If there are more than one proposal, there must be bytes
  329|       |	 * left in the payload.
  330|       |	 */
  331|  2.59k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (331:6): [True: 2.30k, False: 295]
  |  Branch (331:23): [True: 66, False: 2.23k]
  ------------------
  332|     66|		log_debug("%s: malformed payload: SA payload too small for "
  333|     66|		    "further proposals (%zu <= %zu)", __func__,
  334|     66|		    left, sap_length);
  335|     66|		return (-1);
  336|     66|	}
  337|  2.53k|	return (0);
  338|  2.59k|}
ikev2_pld_sa:
  343|  4.39k|{
  344|  4.39k|	struct ikev2_sa_proposal	 sap;
  345|  4.39k|	struct iked_proposal		*prop = NULL;
  346|  4.39k|	uint32_t			 spi32;
  347|  4.39k|	uint64_t			 spi = 0, spi64;
  348|  4.39k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  349|  4.39k|	int				 r;
  350|  4.39k|	struct iked_proposals		*props;
  351|  4.39k|	size_t				 total;
  352|       |
  353|  5.48k|	do {
  354|  5.48k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (354:7): [True: 2.94k, False: 2.53k]
  ------------------
  355|  2.94k|			return (-1);
  356|       |
  357|       |		/* Assumed size of the first proposals, including SPI if present. */
  358|  2.53k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  359|       |
  360|  2.53k|		props = &msg->msg_parent->msg_proposals;
  361|       |
  362|  2.53k|		offset += sizeof(sap);
  363|  2.53k|		left -= sizeof(sap);
  364|       |
  365|  2.53k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (365:7): [True: 380, False: 2.15k]
  ------------------
  366|    380|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (366:8): [True: 68, False: 312]
  ------------------
  367|     68|				log_debug("%s: malformed payload: SPI larger than "
  368|     68|				    "actual payload (%zu < %d)", __func__, left,
  369|     68|				    sap.sap_spisize);
  370|     68|				return (-1);
  371|     68|			}
  372|    312|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (372:8): [True: 66, False: 246]
  ------------------
  373|     66|				log_debug("%s: malformed payload: SPI larger than "
  374|     66|				    "proposal (%zu < %d)", __func__, total,
  375|     66|				    sap.sap_spisize);
  376|     66|				return (-1);
  377|     66|			}
  378|    246|			switch (sap.sap_spisize) {
  379|     80|			case 4:
  ------------------
  |  Branch (379:4): [True: 80, False: 166]
  ------------------
  380|     80|				memcpy(&spi32, msgbuf + offset, 4);
  381|     80|				spi = betoh32(spi32);
  382|     80|				break;
  383|     98|			case 8:
  ------------------
  |  Branch (383:4): [True: 98, False: 148]
  ------------------
  384|     98|				memcpy(&spi64, msgbuf + offset, 8);
  385|     98|				spi = betoh64(spi64);
  386|     98|				break;
  387|     68|			default:
  ------------------
  |  Branch (387:4): [True: 68, False: 178]
  ------------------
  388|     68|				log_debug("%s: unsupported SPI size %d",
  389|     68|				    __func__, sap.sap_spisize);
  390|     68|				return (-1);
  391|    246|			}
  392|       |
  393|    178|			offset += sap.sap_spisize;
  394|    178|			left -= sap.sap_spisize;
  395|       |
  396|       |			/* Assumed size of the proposal, now without SPI. */
  397|    178|			total -= sap.sap_spisize;
  398|    178|		}
  399|       |
  400|       |		/*
  401|       |		 * As we verified sanity of packet headers, this check will
  402|       |		 * be always false, but just to be sure we keep it.
  403|       |		 */
  404|  2.33k|		if (left < total) {
  ------------------
  |  Branch (404:7): [True: 0, False: 2.33k]
  ------------------
  405|      0|			log_debug("%s: malformed payload: too long for payload "
  406|      0|			    "(%zu < %zu)", __func__, left, total);
  407|      0|			return (-1);
  408|      0|		}
  409|       |
  410|  2.33k|		log_debug("%s: more %d reserved %d length %d"
  411|  2.33k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  412|  2.33k|		    __func__, sap.sap_more, sap.sap_reserved,
  413|  2.33k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  414|  2.33k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  415|  2.33k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  416|       |
  417|  2.33k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (417:7): [True: 2, False: 2.32k]
  ------------------
  418|      2|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (418:8): [True: 2, False: 0]
  ------------------
  419|      2|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  420|      2|				log_debug("%s: invalid proposal", __func__);
  421|      2|				return (-1);
  422|      2|			}
  423|      0|			prop = msg->msg_parent->msg_prop;
  424|      0|			prop->prop_peerspi.spi = spi;
  425|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  426|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  427|       |
  428|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  429|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  430|      0|		}
  431|       |
  432|       |		/*
  433|       |		 * Parse the attached transforms
  434|       |		 */
  435|  2.32k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (435:7): [True: 1.36k, False: 960]
  ------------------
  436|  1.36k|			r = ikev2_pld_xform(env, msg, offset, total);
  437|  1.36k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (437:8): [True: 0, False: 1.36k]
  |  Branch (437:21): [True: 0, False: 0]
  ------------------
  438|      0|				log_debug("%s: invalid proposal transform",
  439|      0|				    __func__);
  440|       |
  441|       |				/* cleanup and ignore proposal */
  442|      0|				config_free_proposal(props, prop);
  443|      0|				prop = msg->msg_parent->msg_prop = NULL;
  444|  1.36k|			} else if (r != 0) {
  ------------------
  |  Branch (444:15): [True: 1.05k, False: 314]
  ------------------
  445|  1.05k|				log_debug("%s: invalid proposal transforms",
  446|  1.05k|				    __func__);
  447|  1.05k|				return (-1);
  448|  1.05k|			}
  449|  1.36k|		}
  450|       |
  451|  1.27k|		offset += total;
  452|  1.27k|		left -= total;
  453|  1.27k|	} while (sap.sap_more);
  ------------------
  |  Branch (453:11): [True: 1.08k, False: 190]
  ------------------
  454|       |
  455|    190|	return (0);
  456|  4.39k|}
ikev2_validate_xform:
  461|  1.75k|{
  462|  1.75k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  463|  1.75k|	size_t		 xfrm_length;
  464|       |
  465|  1.75k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (465:6): [True: 167, False: 1.59k]
  ------------------
  466|    167|		log_debug("%s: malformed payload: too short for header "
  467|    167|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  468|    167|		return (-1);
  469|    167|	}
  470|  1.59k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  471|       |
  472|  1.59k|	xfrm_length = betoh16(xfrm->xfrm_length);
  473|  1.59k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (473:6): [True: 129, False: 1.46k]
  ------------------
  474|    129|		log_debug("%s: malformed payload: shorter than minimum header "
  475|    129|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  476|    129|		return (-1);
  477|    129|	}
  478|  1.46k|	if (total < xfrm_length) {
  ------------------
  |  Branch (478:6): [True: 112, False: 1.35k]
  ------------------
  479|    112|		log_debug("%s: malformed payload: too long for payload size "
  480|    112|		    "(%zu < %zu)", __func__, total, xfrm_length);
  481|    112|		return (-1);
  482|    112|	}
  483|       |
  484|  1.35k|	return (0);
  485|  1.46k|}
ikev2_pld_xform:
  490|  1.75k|{
  491|  1.75k|	struct ikev2_transform		 xfrm;
  492|  1.75k|	char				 id[BUFSIZ];
  493|  1.75k|	int				 ret = 0;
  494|  1.75k|	int				 r;
  495|  1.75k|	size_t				 xfrm_length;
  496|       |
  497|  1.75k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (497:6): [True: 408, False: 1.35k]
  ------------------
  498|    408|		return (-1);
  499|       |
  500|  1.35k|	xfrm_length = betoh16(xfrm.xfrm_length);
  501|       |
  502|  1.35k|	switch (xfrm.xfrm_type) {
  503|    335|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|    335|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (503:2): [True: 335, False: 1.01k]
  ------------------
  504|    335|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  505|    335|		    ikev2_xformencr_map), sizeof(id));
  506|    335|		break;
  507|    434|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|    434|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (507:2): [True: 434, False: 916]
  ------------------
  508|    434|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  509|    434|		    ikev2_xformprf_map), sizeof(id));
  510|    434|		break;
  511|     67|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|     67|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (511:2): [True: 67, False: 1.28k]
  ------------------
  512|     67|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  513|     67|		    ikev2_xformauth_map), sizeof(id));
  514|     67|		break;
  515|     68|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|     68|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (515:2): [True: 68, False: 1.28k]
  ------------------
  516|     68|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  517|     68|		    ikev2_xformdh_map), sizeof(id));
  518|     68|		break;
  519|     66|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|     66|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (519:2): [True: 66, False: 1.28k]
  ------------------
  520|     66|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  521|     66|		    ikev2_xformesn_map), sizeof(id));
  522|     66|		break;
  523|    380|	default:
  ------------------
  |  Branch (523:2): [True: 380, False: 970]
  ------------------
  524|    380|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  525|    380|		break;
  526|  1.35k|	}
  527|       |
  528|  1.35k|	log_debug("%s: more %d reserved %d length %zu"
  529|  1.35k|	    " type %s id %s",
  530|  1.35k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  531|  1.35k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  532|       |
  533|       |	/*
  534|       |	 * Parse transform attributes, if available
  535|       |	 */
  536|  1.35k|	msg->msg_attrlength = 0;
  537|  1.35k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (537:6): [True: 839, False: 511]
  ------------------
  538|    839|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (538:7): [True: 568, False: 271]
  ------------------
  539|    839|		    xfrm_length - sizeof(xfrm)) != 0) {
  540|    568|			return (-1);
  541|    568|		}
  542|    839|	}
  543|       |
  544|    782|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (544:6): [True: 0, False: 782]
  ------------------
  545|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  546|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  547|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  548|      0|		if (r == -1) {
  ------------------
  |  Branch (548:7): [True: 0, False: 0]
  ------------------
  549|      0|			log_debug("%s: failed to add transform: alloc error",
  550|      0|			    __func__);
  551|      0|			return (r);
  552|      0|		} else if (r == -2) {
  ------------------
  |  Branch (552:14): [True: 0, False: 0]
  ------------------
  553|      0|			log_debug("%s: failed to add transform: unknown type",
  554|      0|			    __func__);
  555|      0|			return (r);
  556|      0|		}
  557|      0|	}
  558|       |
  559|       |	/* Next transform */
  560|    782|	offset += xfrm_length;
  561|    782|	total -= xfrm_length;
  562|    782|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|    782|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (562:6): [True: 389, False: 393]
  ------------------
  563|    389|		ret = ikev2_pld_xform(env, msg, offset, total);
  564|    393|	else if (total != 0) {
  ------------------
  |  Branch (564:11): [True: 79, False: 314]
  ------------------
  565|       |		/* No more transforms but still some data left. */
  566|     79|		log_debug("%s: less data than specified, %zu bytes left",
  567|     79|		    __func__, total);
  568|     79|		ret = -1;
  569|     79|	}
  570|       |
  571|    782|	return (ret);
  572|    782|}
ikev2_validate_attr:
  577|  1.92k|{
  578|  1.92k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  579|       |
  580|  1.92k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (580:6): [True: 104, False: 1.82k]
  ------------------
  581|    104|		log_debug("%s: malformed payload: too short for header "
  582|    104|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  583|    104|		return (-1);
  584|    104|	}
  585|  1.82k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  586|       |
  587|  1.82k|	return (0);
  588|  1.92k|}
ikev2_pld_attr:
  593|  1.92k|{
  594|  1.92k|	struct ikev2_attribute		 attr;
  595|  1.92k|	unsigned int			 type;
  596|  1.92k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  597|  1.92k|	int				 ret = 0;
  598|  1.92k|	size_t				 attr_length;
  599|       |
  600|  1.92k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (600:6): [True: 104, False: 1.82k]
  ------------------
  601|    104|		return (-1);
  602|       |
  603|  1.82k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  1.82k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  604|       |
  605|  1.82k|	log_debug("%s: attribute type %s length %d total %zu",
  606|  1.82k|	    __func__, print_map(type, ikev2_attrtype_map),
  607|  1.82k|	    betoh16(attr.attr_length), total);
  608|       |
  609|  1.82k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  1.82k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (609:6): [True: 1.06k, False: 761]
  ------------------
  610|       |		/* Type-Value attribute */
  611|  1.06k|		offset += sizeof(attr);
  612|  1.06k|		total -= sizeof(attr);
  613|       |
  614|  1.06k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  1.06k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (614:7): [True: 34, False: 1.03k]
  ------------------
  615|     34|			msg->msg_attrlength = betoh16(attr.attr_length);
  616|  1.06k|	} else {
  617|       |		/* Type-Length-Value attribute */
  618|    761|		attr_length = betoh16(attr.attr_length);
  619|    761|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (619:7): [True: 245, False: 516]
  ------------------
  620|    245|			log_debug("%s: malformed payload: shorter than "
  621|    245|			    "minimum header size (%zu < %zu)", __func__,
  622|    245|			    attr_length, sizeof(attr));
  623|    245|			return (-1);
  624|    245|		}
  625|    516|		if (total < attr_length) {
  ------------------
  |  Branch (625:7): [True: 219, False: 297]
  ------------------
  626|    219|			log_debug("%s: malformed payload: attribute larger "
  627|    219|			    "than actual payload (%zu < %zu)", __func__,
  628|    219|			    total, attr_length);
  629|    219|			return (-1);
  630|    219|		}
  631|    297|		print_hex(msgbuf, offset + sizeof(attr),
  632|    297|		    attr_length - sizeof(attr));
  633|    297|		offset += attr_length;
  634|    297|		total -= attr_length;
  635|    297|	}
  636|       |
  637|  1.36k|	if (total > 0) {
  ------------------
  |  Branch (637:6): [True: 1.09k, False: 271]
  ------------------
  638|       |		/* Next attribute */
  639|  1.09k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  640|  1.09k|	}
  641|       |
  642|  1.36k|	return (ret);
  643|  1.82k|}
ikev2_validate_ke:
  648|    644|{
  649|    644|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  650|       |
  651|    644|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (651:6): [True: 440, False: 204]
  ------------------
  652|    440|		log_debug("%s: malformed payload: too short for header "
  653|    440|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  654|    440|		return (-1);
  655|    440|	}
  656|    204|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  657|       |
  658|    204|	return (0);
  659|    644|}
ikev2_pld_ke:
  664|    644|{
  665|    644|	struct ikev2_keyexchange	 kex;
  666|    644|	uint8_t				*buf;
  667|    644|	size_t				 len;
  668|    644|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  669|       |
  670|    644|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (670:6): [True: 440, False: 204]
  ------------------
  671|    440|		return (-1);
  672|       |
  673|    204|	log_debug("%s: dh group %s reserved %d", __func__,
  674|    204|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  675|    204|	    betoh16(kex.kex_reserved));
  676|       |
  677|    204|	buf = msgbuf + offset + sizeof(kex);
  678|    204|	len = left - sizeof(kex);
  679|       |
  680|    204|	if (len == 0) {
  ------------------
  |  Branch (680:6): [True: 68, False: 136]
  ------------------
  681|     68|		log_debug("%s: malformed payload: no KE data given", __func__);
  682|     68|		return (-1);
  683|     68|	}
  684|       |
  685|    136|	print_hex(buf, 0, len);
  686|       |
  687|    136|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (687:6): [True: 3, False: 133]
  ------------------
  688|      3|		if (msg->msg_parent->msg_ke != NULL) {
  ------------------
  |  Branch (688:7): [True: 1, False: 2]
  ------------------
  689|      1|			log_info("%s: duplicate KE payload", __func__);
  690|      1|			return (-1);
  691|      1|		}
  692|      2|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (692:7): [True: 0, False: 2]
  ------------------
  693|      0|			log_debug("%s: failed to get exchange", __func__);
  694|      0|			return (-1);
  695|      0|		}
  696|      2|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  697|      2|	}
  698|       |
  699|    135|	return (0);
  700|    136|}
ikev2_validate_id:
  705|  1.81k|{
  706|  1.81k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  707|       |
  708|  1.81k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (708:6): [True: 902, False: 910]
  ------------------
  709|    902|		log_debug("%s: malformed payload: too short for header "
  710|    902|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  711|    902|		return (-1);
  712|    902|	}
  713|    910|	memcpy(id, msgbuf + offset, sizeof(*id));
  714|       |
  715|    910|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|    910|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (715:6): [True: 243, False: 667]
  ------------------
  716|    243|		log_debug("%s: malformed payload: invalid ID type.",
  717|    243|		    __func__);
  718|    243|		return (-1);
  719|    243|	}
  720|       |
  721|    667|	return (0);
  722|    910|}
ikev2_pld_id:
  727|  1.81k|{
  728|  1.81k|	uint8_t				*ptr;
  729|  1.81k|	struct ikev2_id			 id;
  730|  1.81k|	size_t				 len;
  731|  1.81k|	struct iked_id			*idp, idb;
  732|  1.81k|	const struct iked_sa		*sa = msg->msg_sa;
  733|  1.81k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  734|  1.81k|	char				 idstr[IKED_ID_SIZE];
  735|       |
  736|  1.81k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (736:6): [True: 1.14k, False: 667]
  ------------------
  737|  1.14k|		return (-1);
  738|       |
  739|    667|	bzero(&idb, sizeof(idb));
  740|       |
  741|       |	/* Don't strip the Id payload header */
  742|    667|	ptr = msgbuf + offset;
  743|    667|	len = left;
  744|       |
  745|    667|	idb.id_type = id.id_type;
  746|    667|	idb.id_offset = sizeof(id);
  747|    667|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (747:6): [True: 0, False: 667]
  ------------------
  748|      0|		return (-1);
  749|       |
  750|    667|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (750:6): [True: 0, False: 667]
  ------------------
  751|      0|		ibuf_free(idb.id_buf);
  752|      0|		log_debug("%s: malformed id", __func__);
  753|      0|		return (-1);
  754|      0|	}
  755|       |
  756|    667|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  757|       |
  758|    667|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (758:6): [True: 657, False: 10]
  ------------------
  759|    657|		ibuf_free(idb.id_buf);
  760|    657|		return (0);
  761|    657|	}
  762|       |
  763|     10|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (763:8): [True: 0, False: 10]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|     10|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|     10|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (764:7): [True: 10, False: 0]
  |  Branch (764:35): [True: 6, False: 4]
  ------------------
  765|      6|		idp = &msg->msg_parent->msg_peerid;
  766|      4|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|      4|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (766:11): [True: 4, False: 0]
  |  Branch (766:39): [True: 4, False: 0]
  ------------------
  767|      4|		idp = &msg->msg_parent->msg_localid;
  768|      0|	else {
  769|      0|		ibuf_free(idb.id_buf);
  770|      0|		log_debug("%s: unexpected id payload", __func__);
  771|      0|		return (0);
  772|      0|	}
  773|       |
  774|     10|	if (idp->id_type) {
  ------------------
  |  Branch (774:6): [True: 2, False: 8]
  ------------------
  775|      2|		ibuf_free(idb.id_buf);
  776|      2|		log_debug("%s: duplicate id payload", __func__);
  777|      2|		return (-1);
  778|      2|	}
  779|       |
  780|      8|	idp->id_buf = idb.id_buf;
  781|      8|	idp->id_offset = idb.id_offset;
  782|      8|	idp->id_type = idb.id_type;
  783|       |
  784|      8|	return (0);
  785|     10|}
ikev2_validate_cert:
  790|    382|{
  791|    382|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  792|       |
  793|    382|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (793:6): [True: 43, False: 339]
  ------------------
  794|     43|		log_debug("%s: malformed payload: too short for header "
  795|     43|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  796|     43|		return (-1);
  797|     43|	}
  798|    339|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  799|    339|	if (cert->cert_type == IKEV2_CERT_NONE) {
  ------------------
  |  |  418|    339|#define IKEV2_CERT_NONE			0	/* None */
  ------------------
  |  Branch (799:6): [True: 24, False: 315]
  ------------------
  800|     24|		log_debug("%s: malformed payload: invalid cert type", __func__);
  801|     24|		return (-1);
  802|     24|	}
  803|       |
  804|    315|	return (0);
  805|    339|}
ikev2_pld_cert:
  810|    382|{
  811|    382|	struct ikev2_cert		 cert;
  812|    382|	uint8_t				*buf;
  813|    382|	size_t				 len;
  814|    382|	struct iked_id			*certid;
  815|    382|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  816|    382|	const struct iked_sa		*sa = msg->msg_sa;
  817|    382|	int				 i;
  818|       |
  819|    382|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (819:6): [True: 67, False: 315]
  ------------------
  820|     67|		return (-1);
  821|    315|	offset += sizeof(cert);
  822|       |
  823|    315|	buf = msgbuf + offset;
  824|    315|	len = left - sizeof(cert);
  825|       |
  826|    315|	log_debug("%s: type %s length %zu",
  827|    315|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  828|       |
  829|    315|	print_hex(buf, 0, len);
  830|       |
  831|    315|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (831:6): [True: 158, False: 157]
  ------------------
  832|    158|		return (0);
  833|       |
  834|       |	/* do not accept internal encoding in the wire */
  835|    157|	if (cert.cert_type == IKEV2_CERT_BUNDLE) {
  ------------------
  |  |  438|    157|#define IKEV2_CERT_BUNDLE		254	/* Private */
  ------------------
  |  Branch (835:6): [True: 34, False: 123]
  ------------------
  836|     34|		log_debug("%s: ignoring IKEV2_CERT_BUNDLE",
  837|     34|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1105|     34|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|     34|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  838|     34|		return (0);
  839|     34|	}
  840|       |
  841|    123|	certid = &msg->msg_parent->msg_cert;
  842|    123|	if (certid->id_type) {
  ------------------
  |  Branch (842:6): [True: 108, False: 15]
  ------------------
  843|       |		/* try to set supplemental certs */
  844|    358|		for (i = 0; i < IKED_SCERT_MAX; i++) {
  ------------------
  |  |  477|    358|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (844:15): [True: 286, False: 72]
  ------------------
  845|    286|			certid = &msg->msg_parent->msg_scert[i];
  846|    286|			if (!certid->id_type)
  ------------------
  |  Branch (846:8): [True: 36, False: 250]
  ------------------
  847|     36|				break;
  848|    286|		}
  849|    108|		if (certid->id_type) {
  ------------------
  |  Branch (849:7): [True: 72, False: 36]
  ------------------
  850|     72|			log_debug("%s: too many cert payloads, ignoring",
  851|     72|			   SPI_SA(sa, __func__));
  ------------------
  |  | 1105|     72|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|     72|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  852|     72|			return (0);
  853|     72|		}
  854|    108|	}
  855|       |
  856|     51|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (856:6): [True: 0, False: 51]
  ------------------
  857|      0|		log_debug("%s: failed to save cert", __func__);
  858|      0|		return (-1);
  859|      0|	}
  860|     51|	certid->id_type = cert.cert_type;
  861|     51|	certid->id_offset = 0;
  862|       |
  863|     51|	return (0);
  864|     51|}
ikev2_validate_certreq:
  869|  1.80k|{
  870|  1.80k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  871|       |
  872|  1.80k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (872:6): [True: 416, False: 1.39k]
  ------------------
  873|    416|		log_debug("%s: malformed payload: too short for header "
  874|    416|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  875|    416|		return (-1);
  876|    416|	}
  877|  1.39k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  878|       |
  879|  1.39k|	return (0);
  880|  1.80k|}
ikev2_pld_certreq:
  885|  1.80k|{
  886|  1.80k|	struct ikev2_cert		 cert;
  887|  1.80k|	struct iked_certreq		*cr;
  888|  1.80k|	uint8_t				*buf;
  889|  1.80k|	ssize_t				 len;
  890|  1.80k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  891|       |
  892|  1.80k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (892:6): [True: 416, False: 1.39k]
  ------------------
  893|    416|		return (-1);
  894|  1.39k|	offset += sizeof(cert);
  895|       |
  896|  1.39k|	buf = msgbuf + offset;
  897|  1.39k|	len = left - sizeof(cert);
  898|       |
  899|  1.39k|	log_debug("%s: type %s length %zd",
  900|  1.39k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  901|       |
  902|  1.39k|	print_hex(buf, 0, len);
  903|       |
  904|  1.39k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (904:6): [True: 1.28k, False: 108]
  ------------------
  905|  1.28k|		return (0);
  906|       |
  907|    108|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|    108|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (907:6): [True: 33, False: 75]
  ------------------
  908|     33|		if (len == 0) {
  ------------------
  |  Branch (908:7): [True: 22, False: 11]
  ------------------
  909|     22|			log_info("%s: invalid length 0", __func__);
  910|     22|			return (0);
  911|     22|		}
  912|     11|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (912:7): [True: 1, False: 10]
  ------------------
  913|      1|			log_info("%s: invalid certificate request",
  914|      1|			    __func__);
  915|      1|			return (-1);
  916|      1|		}
  917|     11|	}
  918|       |
  919|     85|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (919:6): [True: 0, False: 85]
  ------------------
  920|      0|		log_info("%s: failed to allocate certreq.", __func__);
  921|      0|		return (-1);
  922|      0|	}
  923|     85|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (923:6): [True: 0, False: 85]
  ------------------
  924|      0|		log_info("%s: failed to allocate buffer.", __func__);
  925|      0|		free(cr);
  926|      0|		return (-1);
  927|      0|	}
  928|     85|	cr->cr_type = cert.cert_type;
  929|     85|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|     85|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|     85|	(elm)->field.sqe_next = NULL;					\
  |  |  298|     85|	*(head)->sqh_last = (elm);					\
  |  |  299|     85|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|     85|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  930|       |
  931|     85|	return (0);
  932|     85|}
ikev2_validate_auth:
  937|    714|{
  938|    714|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  939|       |
  940|    714|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (940:6): [True: 124, False: 590]
  ------------------
  941|    124|		log_debug("%s: malformed payload: too short for header "
  942|    124|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  943|    124|		return (-1);
  944|    124|	}
  945|    590|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  946|       |
  947|    590|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (947:6): [True: 317, False: 273]
  ------------------
  948|    317|		log_info("%s: malformed payload: invalid auth method",
  949|    317|		    __func__);
  950|    317|		return (-1);
  951|    317|	}
  952|       |
  953|    273|	return (0);
  954|    590|}
ikev2_pld_auth:
  959|    714|{
  960|    714|	struct ikev2_auth		 auth;
  961|    714|	struct iked_id			*idp;
  962|    714|	uint8_t				*buf;
  963|    714|	size_t				 len;
  964|    714|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  965|       |
  966|    714|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (966:6): [True: 441, False: 273]
  ------------------
  967|    441|		return (-1);
  968|    273|	offset += sizeof(auth);
  969|       |
  970|    273|	buf = msgbuf + offset;
  971|    273|	len = left - sizeof(auth);
  972|       |
  973|    273|	log_debug("%s: method %s length %zu",
  974|    273|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  975|       |
  976|    273|	print_hex(buf, 0, len);
  977|       |
  978|    273|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (978:6): [True: 270, False: 3]
  ------------------
  979|    270|		return (0);
  980|       |
  981|      3|	idp = &msg->msg_parent->msg_auth;
  982|      3|	if (idp->id_type) {
  ------------------
  |  Branch (982:6): [True: 1, False: 2]
  ------------------
  983|      1|		log_debug("%s: duplicate auth payload", __func__);
  984|      1|		return (-1);
  985|      1|	}
  986|       |
  987|      2|	ibuf_free(idp->id_buf);
  988|      2|	idp->id_type = auth.auth_method;
  989|      2|	idp->id_offset = 0;
  990|      2|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (990:6): [True: 0, False: 2]
  ------------------
  991|      0|		return (-1);
  992|       |
  993|      2|	return (0);
  994|      2|}
ikev2_pld_nonce:
  999|     56|{
 1000|     56|	size_t		 len;
 1001|     56|	uint8_t		*buf;
 1002|     56|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1003|       |
 1004|     56|	buf = msgbuf + offset;
 1005|     56|	len = left;
 1006|       |
 1007|     56|	if (len == 0) {
  ------------------
  |  Branch (1007:6): [True: 18, False: 38]
  ------------------
 1008|     18|		log_debug("%s: malformed payload: no NONCE given", __func__);
 1009|     18|		return (-1);
 1010|     18|	}
 1011|       |
 1012|     38|	print_hex(buf, 0, len);
 1013|       |
 1014|     38|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (1014:6): [True: 2, False: 36]
  ------------------
 1015|      2|		if (msg->msg_parent->msg_nonce != NULL) {
  ------------------
  |  Branch (1015:7): [True: 1, False: 1]
  ------------------
 1016|      1|			log_info("%s: duplicate NONCE payload", __func__);
 1017|      1|			return (-1);
 1018|      1|		}
 1019|      1|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (1019:7): [True: 0, False: 1]
  ------------------
 1020|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1021|      0|			return (-1);
 1022|      0|		}
 1023|      1|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1024|      1|	}
 1025|       |
 1026|     37|	return (0);
 1027|     38|}
ikev2_validate_notify:
 1032|  1.11k|{
 1033|  1.11k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1034|       |
 1035|  1.11k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1035:6): [True: 556, False: 556]
  ------------------
 1036|    556|		log_debug("%s: malformed payload: too short for header "
 1037|    556|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1038|    556|		return (-1);
 1039|    556|	}
 1040|    556|	memcpy(n, msgbuf + offset, sizeof(*n));
 1041|       |
 1042|    556|	return (0);
 1043|  1.11k|}
ikev2_pld_notify:
 1048|  1.11k|{
 1049|  1.11k|	struct ikev2_notify	 n;
 1050|  1.11k|	const struct iked_sa	*sa = msg->msg_sa;
 1051|  1.11k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1052|  1.11k|	uint32_t		 spi32;
 1053|  1.11k|	uint64_t		 spi64;
 1054|  1.11k|	struct iked_spi		*rekey;
 1055|  1.11k|	uint16_t		 type;
 1056|  1.11k|	uint16_t		 signature_hash;
 1057|       |
 1058|  1.11k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1058:6): [True: 556, False: 556]
  ------------------
 1059|    556|		return (-1);
 1060|    556|	type = betoh16(n.n_type);
 1061|       |
 1062|    556|	log_debug("%s: protoid %s spisize %d type %s",
 1063|    556|	    __func__,
 1064|    556|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1065|    556|	    print_map(type, ikev2_n_map));
 1066|       |
 1067|    556|	left -= sizeof(n);
 1068|    556|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1068:6): [True: 0, False: 556]
  ------------------
 1069|      0|		return (-1);
 1070|       |
 1071|    556|	print_hex(buf, 0, left);
 1072|       |
 1073|    556|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1073:6): [True: 263, False: 293]
  ------------------
 1074|    263|		return (0);
 1075|       |
 1076|    293|	switch (type) {
  ------------------
  |  Branch (1076:10): [True: 68, False: 225]
  ------------------
 1077|     13|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|     13|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1077:2): [True: 13, False: 280]
  ------------------
 1078|     51|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|     51|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1078:2): [True: 38, False: 255]
  ------------------
 1079|     51|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1079:7): [True: 2, False: 49]
  ------------------
 1080|      2|			log_debug("%s: malformed payload: hash size mismatch"
 1081|      2|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1082|      2|			return (-1);
 1083|      2|		}
 1084|     49|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1084:7): [True: 0, False: 49]
  ------------------
 1085|     49|		    ikev2_msg_frompeer(msg)) == -1)
 1086|      0|			return (-1);
 1087|     49|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1087:7): [True: 49, False: 0]
  ------------------
 1088|     49|			log_debug("%s: %s detected NAT", __func__,
 1089|     49|			    print_map(type, ikev2_n_map));
 1090|     49|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|     49|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1090:8): [True: 12, False: 37]
  ------------------
 1091|     12|				msg->msg_parent->msg_nat_detected
 1092|     12|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  687|     12|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1093|     37|			else
 1094|     37|				msg->msg_parent->msg_nat_detected
 1095|     37|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  688|     37|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1096|     49|		}
 1097|     49|		print_hex(md, 0, sizeof(md));
 1098|       |		/* remember for MOBIKE */
 1099|     49|		msg->msg_parent->msg_natt_rcvd = 1;
 1100|     49|		break;
 1101|      1|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      1|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1101:2): [True: 1, False: 292]
  ------------------
 1102|      1|		if (!msg->msg_e) {
  ------------------
  |  Branch (1102:7): [True: 0, False: 1]
  ------------------
 1103|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1104|      0|			    __func__);
 1105|      0|			return (-1);
 1106|      0|		}
 1107|       |		/*
 1108|       |		 * If we are the responder, then we only accept
 1109|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1110|       |		 * If we are the initiator, the peer cannot be authenticated.
 1111|       |		 */
 1112|      1|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1112:7): [True: 1, False: 0]
  ------------------
 1113|      1|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      1|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1113:8): [True: 1, False: 0]
  ------------------
 1114|      1|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1115|      1|				    " from unauthenticated initiator",
 1116|      1|				    __func__);
 1117|      1|				return (-1);
 1118|      1|			}
 1119|      1|		} else {
 1120|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1120:8): [True: 0, False: 0]
  ------------------
 1121|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1122|      0|				    " from authenticated responder",
 1123|      0|				    __func__);
 1124|      0|				return (-1);
 1125|      0|			}
 1126|      0|		}
 1127|      0|		msg->msg_parent->msg_flags
 1128|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  695|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1129|      0|		break;
 1130|     11|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|     11|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1130:2): [True: 11, False: 282]
  ------------------
 1131|     11|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|     11|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1131:7): [True: 0, False: 11]
  ------------------
 1132|     11|		    !msg->msg_e) {
  ------------------
  |  Branch (1132:7): [True: 0, False: 0]
  ------------------
 1133|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1134|      0|			    __func__);
 1135|      0|			return (-1);
 1136|      0|		}
 1137|     11|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1137:7): [True: 1, False: 10]
  ------------------
 1138|      1|			log_debug("%s: malformed payload: group size mismatch"
 1139|      1|			    " (%zu != %zu)", __func__, left,
 1140|      1|			    sizeof(msg->msg_parent->msg_group));
 1141|      1|			return (-1);
 1142|      1|		}
 1143|     10|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1144|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  696|     10|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1145|     10|		break;
 1146|     10|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|     10|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1146:2): [True: 10, False: 283]
  ------------------
 1147|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1147:7): [True: 0, False: 10]
  ------------------
 1148|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1149|      0|			    __func__);
 1150|      0|			return (-1);
 1151|      0|		}
 1152|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  694|     10|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1153|     10|		break;
 1154|     17|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|     17|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1154:2): [True: 17, False: 276]
  ------------------
 1155|     17|		if (!msg->msg_e) {
  ------------------
  |  Branch (1155:7): [True: 0, False: 17]
  ------------------
 1156|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1157|      0|			return (-1);
 1158|      0|		}
 1159|     17|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1159:7): [True: 1, False: 16]
  ------------------
 1160|      1|			log_debug("%s: malformed notification", __func__);
 1161|      1|			return (-1);
 1162|      1|		}
 1163|     16|		rekey = &msg->msg_parent->msg_rekey;
 1164|     16|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1164:7): [True: 1, False: 15]
  ------------------
 1165|      1|			log_debug("%s: rekeying of multiple SAs not supported",
 1166|      1|			    __func__);
 1167|      1|			return (-1);
 1168|      1|		}
 1169|     15|		switch (n.n_spisize) {
 1170|     13|		case 4:
  ------------------
  |  Branch (1170:3): [True: 13, False: 2]
  ------------------
 1171|     13|			memcpy(&spi32, buf, left);
 1172|     13|			rekey->spi = betoh32(spi32);
 1173|     13|			break;
 1174|      1|		case 8:
  ------------------
  |  Branch (1174:3): [True: 1, False: 14]
  ------------------
 1175|      1|			memcpy(&spi64, buf, left);
 1176|      1|			rekey->spi = betoh64(spi64);
 1177|      1|			break;
 1178|      1|		default:
  ------------------
  |  Branch (1178:3): [True: 1, False: 14]
  ------------------
 1179|      1|			log_debug("%s: invalid spi size %d", __func__,
 1180|      1|			    n.n_spisize);
 1181|      1|			return (-1);
 1182|     15|		}
 1183|     14|		rekey->spi_size = n.n_spisize;
 1184|     14|		rekey->spi_protoid = n.n_protoid;
 1185|       |
 1186|     14|		log_debug("%s: rekey %s spi %s", __func__,
 1187|     14|		    print_map(n.n_protoid, ikev2_saproto_map),
 1188|     14|		    print_spi(rekey->spi, n.n_spisize));
 1189|     14|		break;
 1190|     10|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|     10|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1190:2): [True: 10, False: 283]
  ------------------
 1191|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1191:7): [True: 0, False: 10]
  ------------------
 1192|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1193|      0|			    __func__);
 1194|      0|			return (-1);
 1195|      0|		}
 1196|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  699|     10|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1197|     10|		break;
 1198|     20|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|     20|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1198:2): [True: 20, False: 273]
  ------------------
 1199|     20|		if (!msg->msg_e) {
  ------------------
  |  Branch (1199:7): [True: 0, False: 20]
  ------------------
 1200|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1201|      0|			    __func__);
 1202|      0|			return (-1);
 1203|      0|		}
 1204|     20|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1204:7): [True: 10, False: 10]
  ------------------
 1205|     20|		    sizeof(msg->msg_parent->msg_transform)) {
 1206|     10|			log_debug("%s: ignoring malformed ipcomp notification",
 1207|     10|			    __func__);
 1208|     10|			return (0);
 1209|     10|		}
 1210|     10|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1211|     10|		    sizeof(msg->msg_parent->msg_cpi));
 1212|     10|		memcpy(&msg->msg_parent->msg_transform,
 1213|     10|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1214|     10|		    sizeof(msg->msg_parent->msg_transform));
 1215|       |
 1216|     10|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1217|     10|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1217:7): [True: 0, False: 10]
  ------------------
 1218|     10|		    betoh16(msg->msg_parent->msg_cpi),
 1219|     10|		    print_map(msg->msg_parent->msg_transform,
 1220|     10|		    ikev2_ipcomp_map), left);
 1221|       |
 1222|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  697|     10|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1223|     10|		break;
 1224|     12|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|     12|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1224:2): [True: 12, False: 281]
  ------------------
 1225|     12|		if (!msg->msg_e) {
  ------------------
  |  Branch (1225:7): [True: 0, False: 12]
  ------------------
 1226|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1227|      0|			    __func__);
 1228|      0|			return (-1);
 1229|      0|		}
 1230|     12|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  693|     12|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1231|     12|		break;
 1232|      6|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|      6|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1232:2): [True: 6, False: 287]
  ------------------
 1233|      6|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  700|      6|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1234|      6|		break;
 1235|     28|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|     28|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1235:2): [True: 28, False: 265]
  ------------------
 1236|     28|		if (!msg->msg_e) {
  ------------------
  |  Branch (1236:7): [True: 0, False: 28]
  ------------------
 1237|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1238|      0|			    __func__);
 1239|      0|			return (-1);
 1240|      0|		}
 1241|     28|		if (left != 0) {
  ------------------
  |  Branch (1241:7): [True: 18, False: 10]
  ------------------
 1242|     18|			log_debug("%s: ignoring malformed mobike"
 1243|     18|			    " notification: %zu", __func__, left);
 1244|     18|			return (0);
 1245|     18|		}
 1246|     10|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  691|     10|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1247|     10|		break;
 1248|     28|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|     28|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1248:2): [True: 28, False: 265]
  ------------------
 1249|     28|		if (!msg->msg_e) {
  ------------------
  |  Branch (1249:7): [True: 0, False: 28]
  ------------------
 1250|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1251|      0|			    __func__);
 1252|      0|			return (-1);
 1253|      0|		}
 1254|     28|		if (left != 0) {
  ------------------
  |  Branch (1254:7): [True: 10, False: 18]
  ------------------
 1255|     10|			log_debug("%s: ignoring malformed transport mode"
 1256|     10|			    " notification: %zu", __func__, left);
 1257|     10|			return (0);
 1258|     10|		}
 1259|     18|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1259:7): [True: 0, False: 18]
  ------------------
 1260|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1260:8): [True: 0, False: 0]
  ------------------
 1261|      0|				log_debug("%s: ignoring transport mode"
 1262|      0|				    " notification (policy)", __func__);
 1263|      0|				return (0);
 1264|      0|			}
 1265|      0|		}
 1266|     18|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  698|     18|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1267|     18|		break;
 1268|     10|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|     10|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1268:2): [True: 10, False: 283]
  ------------------
 1269|     10|		if (!msg->msg_e) {
  ------------------
  |  Branch (1269:7): [True: 0, False: 10]
  ------------------
 1270|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1271|      0|			    __func__);
 1272|      0|			return (-1);
 1273|      0|		}
 1274|     10|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1274:7): [True: 10, False: 0]
  ------------------
 1275|     10|			log_debug("%s: ignoring update sa addresses"
 1276|     10|			    " notification w/o mobike: %zu", __func__, left);
 1277|     10|			return (0);
 1278|     10|		}
 1279|      0|		if (left != 0) {
  ------------------
  |  Branch (1279:7): [True: 0, False: 0]
  ------------------
 1280|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1281|      0|			    " notification: %zu", __func__, left);
 1282|      0|			return (0);
 1283|      0|		}
 1284|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1285|      0|		break;
 1286|     18|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|     18|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1286:2): [True: 18, False: 275]
  ------------------
 1287|     18|		if (!msg->msg_e) {
  ------------------
  |  Branch (1287:7): [True: 0, False: 18]
  ------------------
 1288|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1289|      0|			    __func__);
 1290|      0|			return (-1);
 1291|      0|		}
 1292|     18|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1292:7): [True: 18, False: 0]
  ------------------
 1293|     18|			log_debug("%s: ignoring cookie2 notification"
 1294|     18|			    " w/o mobike: %zu", __func__, left);
 1295|     18|			return (0);
 1296|     18|		}
 1297|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1297:7): [True: 0, False: 0]
  |  Branch (1297:34): [True: 0, False: 0]
  ------------------
 1298|      0|			log_debug("%s: ignoring malformed cookie2"
 1299|      0|			    " notification: %zu", __func__, left);
 1300|      0|			return (0);
 1301|      0|		}
 1302|      0|		ibuf_free(msg->msg_cookie2);	/* should not happen */
 1303|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1303:7): [True: 0, False: 0]
  ------------------
 1304|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1305|      0|			return (-1);
 1306|      0|		}
 1307|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1308|      0|		break;
 1309|      1|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      1|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1309:2): [True: 1, False: 292]
  ------------------
 1310|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1310:7): [True: 1, False: 0]
  ------------------
 1311|      1|			log_debug("%s: N_COOKIE encrypted",
 1312|      1|			    __func__);
 1313|      1|			return (-1);
 1314|      1|		}
 1315|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1315:7): [True: 0, False: 0]
  |  Branch (1315:33): [True: 0, False: 0]
  ------------------
 1316|      0|			log_debug("%s: ignoring malformed cookie"
 1317|      0|			    " notification: %zu", __func__, left);
 1318|      0|			return (0);
 1319|      0|		}
 1320|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1321|      0|		print_hex(buf, 0, left);
 1322|       |
 1323|      0|		ibuf_free(msg->msg_cookie);
 1324|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1324:7): [True: 0, False: 0]
  ------------------
 1325|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1326|      0|			return (-1);
 1327|      0|		}
 1328|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1329|      0|		break;
 1330|      1|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|      1|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1330:2): [True: 1, False: 292]
  ------------------
 1331|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1331:7): [True: 1, False: 0]
  ------------------
 1332|      1|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1333|      1|			    __func__);
 1334|      1|			return (-1);
 1335|      1|		}
 1336|      0|		if (left != 0) {
  ------------------
  |  Branch (1336:7): [True: 0, False: 0]
  ------------------
 1337|      0|			log_debug("%s: ignoring malformed fragmentation"
 1338|      0|			    " notification: %zu", __func__, left);
 1339|      0|			return (0);
 1340|      0|		}
 1341|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  690|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1342|      0|		break;
 1343|      1|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      1|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1343:2): [True: 1, False: 292]
  ------------------
 1344|      1|		if (msg->msg_e) {
  ------------------
  |  Branch (1344:7): [True: 1, False: 0]
  ------------------
 1345|      1|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1346|      1|			    __func__);
 1347|      1|			return (-1);
 1348|      1|		}
 1349|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1349:7): [True: 0, False: 0]
  ------------------
 1350|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1351|      0|			    __func__);
 1352|      0|			return (-1);
 1353|      0|		}
 1354|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1354:7): [True: 0, False: 0]
  ------------------
 1355|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1356|      0|			    "duplicate notify", __func__);
 1357|      0|			return (0);
 1358|      0|		}
 1359|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1359:7): [True: 0, False: 0]
  ------------------
 1360|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1360:7): [True: 0, False: 0]
  ------------------
 1361|      0|			log_debug("%s: malformed signature hash notification"
 1362|      0|			    "(%zu bytes)", __func__, left);
 1363|      0|			return (0);
 1364|      0|		}
 1365|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1365:10): [True: 0, False: 0]
  ------------------
 1366|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1367|      0|			signature_hash = betoh16(signature_hash);
 1368|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1369|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1370|      0|			    signature_hash);
 1371|      0|			left -= sizeof(signature_hash);
 1372|      0|			buf += sizeof(signature_hash);
 1373|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  499|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1373:8): [True: 0, False: 0]
  ------------------
 1374|      0|				msg->msg_parent->msg_flags
 1375|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  692|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1376|      0|		}
 1377|      0|		break;
 1378|    293|	}
 1379|       |
 1380|    217|	return (0);
 1381|    293|}
ikev2_validate_delete:
 1386|    814|{
 1387|    814|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1388|       |
 1389|    814|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1389:6): [True: 108, False: 706]
  ------------------
 1390|    108|		log_debug("%s: malformed payload: too short for header "
 1391|    108|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1392|    108|		return (-1);
 1393|    108|	}
 1394|    706|	memcpy(del, msgbuf + offset, sizeof(*del));
 1395|       |
 1396|    706|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1396:6): [True: 22, False: 684]
  ------------------
 1397|     22|		log_info("%s: malformed payload: invalid protoid", __func__);
 1398|     22|		return (-1);
 1399|     22|	}
 1400|       |
 1401|    684|	return (0);
 1402|    706|}
ikev2_pld_delete:
 1407|    814|{
 1408|    814|	struct ikev2_delete	 del;
 1409|    814|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1410|    814|	size_t			 cnt, sz, len;
 1411|       |
 1412|    814|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1412:6): [True: 130, False: 684]
  ------------------
 1413|    130|		return (-1);
 1414|       |
 1415|       |	/* Skip if it's a response, then we don't have to deal with it */
 1416|    684|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1416:6): [True: 44, False: 640]
  ------------------
 1417|    684|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1417:6): [True: 0, False: 44]
  ------------------
 1418|      0|		return (0);
 1419|       |
 1420|    684|	cnt = betoh16(del.del_nspi);
 1421|    684|	sz = del.del_spisize;
 1422|       |
 1423|    684|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1424|    684|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1425|    684|	    sz, cnt);
 1426|       |
 1427|    684|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1427:6): [True: 640, False: 44]
  ------------------
 1428|    640|		log_debug("%s: duplicate delete payload", __func__);
 1429|    640|		return (0);
 1430|    640|	}
 1431|       |
 1432|     44|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1433|     44|	msg->msg_parent->msg_del_cnt = cnt;
 1434|     44|	msg->msg_parent->msg_del_spisize = sz;
 1435|       |
 1436|     44|	buf = msgbuf + offset + sizeof(del);
 1437|     44|	len = left - sizeof(del);
 1438|     44|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1438:6): [True: 4, False: 40]
  |  Branch (1438:18): [True: 26, False: 14]
  |  Branch (1438:29): [True: 6, False: 8]
  ------------------
 1439|     36|		return (0);
 1440|       |
 1441|      8|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1441:6): [True: 7, False: 1]
  ------------------
 1442|      7|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1443|      7|		    __func__, len, sz, cnt);
 1444|      7|		return (-1);
 1445|      7|	}
 1446|       |
 1447|      1|	print_hex(buf, 0, len);
 1448|       |
 1449|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1450|       |
 1451|      1|	return (0);
 1452|      8|}
ikev2_validate_tss:
 1457|  1.25k|{
 1458|  1.25k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1459|       |
 1460|  1.25k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1460:6): [True: 139, False: 1.11k]
  ------------------
 1461|    139|		log_debug("%s: malformed payload: too short for header "
 1462|    139|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1463|    139|		return (-1);
 1464|    139|	}
 1465|  1.11k|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1466|       |
 1467|  1.11k|	return (0);
 1468|  1.25k|}
ikev2_pld_tss:
 1473|  1.25k|{
 1474|  1.25k|	struct ikev2_tsp		 tsp;
 1475|  1.25k|	struct ikev2_ts			 ts;
 1476|  1.25k|	size_t				 ts_len, i;
 1477|       |
 1478|  1.25k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1478:6): [True: 139, False: 1.11k]
  ------------------
 1479|    139|		return (-1);
 1480|       |
 1481|  1.11k|	offset += sizeof(tsp);
 1482|  1.11k|	left -= sizeof(tsp);
 1483|       |
 1484|  1.11k|	log_debug("%s: count %d length %zu", __func__,
 1485|  1.11k|	    tsp.tsp_count, left);
 1486|       |
 1487|  1.98k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1487:14): [True: 1.89k, False: 89]
  ------------------
 1488|  1.89k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1488:7): [True: 900, False: 994]
  ------------------
 1489|    900|			return (-1);
 1490|       |
 1491|    994|		log_debug("%s: type %s protoid %u length %d "
 1492|    994|		    "startport %u endport %u", __func__,
 1493|    994|		    print_map(ts.ts_type, ikev2_ts_map),
 1494|    994|		    ts.ts_protoid, betoh16(ts.ts_length),
 1495|    994|		    betoh16(ts.ts_startport),
 1496|    994|		    betoh16(ts.ts_endport));
 1497|       |
 1498|    994|		offset += sizeof(ts);
 1499|    994|		left -= sizeof(ts);
 1500|       |
 1501|    994|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1502|    994|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1502:7): [True: 128, False: 866]
  ------------------
 1503|    128|			return (-1);
 1504|       |
 1505|    866|		offset += ts_len;
 1506|    866|		left -= ts_len;
 1507|    866|	}
 1508|       |
 1509|     89|	return (0);
 1510|  1.11k|}
ikev2_validate_ts:
 1515|  1.89k|{
 1516|  1.89k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1517|  1.89k|	size_t		 ts_length;
 1518|       |
 1519|  1.89k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1519:6): [True: 794, False: 1.10k]
  ------------------
 1520|    794|		log_debug("%s: malformed payload: too short for header "
 1521|    794|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1522|    794|		return (-1);
 1523|    794|	}
 1524|  1.10k|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1525|       |
 1526|  1.10k|	ts_length = betoh16(ts->ts_length);
 1527|  1.10k|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1527:6): [True: 44, False: 1.05k]
  ------------------
 1528|     44|		log_debug("%s: malformed payload: shorter than minimum header "
 1529|     44|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1530|     44|		return (-1);
 1531|     44|	}
 1532|  1.05k|	if (left < ts_length) {
  ------------------
  |  Branch (1532:6): [True: 62, False: 994]
  ------------------
 1533|     62|		log_debug("%s: malformed payload: too long for payload size "
 1534|     62|		    "(%zu < %zu)", __func__, left, ts_length);
 1535|     62|		return (-1);
 1536|     62|	}
 1537|       |
 1538|    994|	return (0);
 1539|  1.05k|}
ikev2_pld_ts:
 1544|    994|{
 1545|    994|	struct sockaddr_in		 start4, end4;
 1546|    994|	struct sockaddr_in6		 start6, end6;
 1547|    994|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
 1548|    994|	uint8_t				*ptr;
 1549|       |
 1550|    994|	ptr = msgbuf + offset;
 1551|       |
 1552|    994|	switch (type) {
 1553|    289|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  460|    289|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1553:2): [True: 289, False: 705]
  ------------------
 1554|    289|		if (left < 2 * 4) {
  ------------------
  |  Branch (1554:7): [True: 34, False: 255]
  ------------------
 1555|     34|			log_debug("%s: malformed payload: too short "
 1556|     34|			    "for ipv4 addr range (%zu < %u)",
 1557|     34|			    __func__, left, 2 * 4);
 1558|     34|			return (-1);
 1559|     34|		}
 1560|       |
 1561|    255|		bzero(&start4, sizeof(start4));
 1562|    255|		start4.sin_family = AF_INET;
 1563|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1564|       |		start4.sin_len = sizeof(start4);
 1565|       |#endif
 1566|    255|		memcpy(&start4.sin_addr.s_addr, ptr, 4);
 1567|    255|		ptr += 4;
 1568|    255|		left -= 4;
 1569|       |
 1570|    255|		bzero(&end4, sizeof(end4));
 1571|    255|		end4.sin_family = AF_INET;
 1572|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1573|       |		end4.sin_len = sizeof(end4);
 1574|       |#endif
 1575|    255|		memcpy(&end4.sin_addr.s_addr, ptr, 4);
 1576|    255|		left -= 4;
 1577|       |
 1578|    255|		log_debug("%s: start %s end %s", __func__,
 1579|    255|		    print_addr(&start4), print_addr(&end4));
 1580|    255|		break;
 1581|     84|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  461|     84|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1581:2): [True: 84, False: 910]
  ------------------
 1582|     84|		if (left < 2 * 16) {
  ------------------
  |  Branch (1582:7): [True: 18, False: 66]
  ------------------
 1583|     18|			log_debug("%s: malformed payload: too short "
 1584|     18|			    "for ipv6 addr range (%zu < %u)",
 1585|     18|			    __func__, left, 2 * 16);
 1586|     18|			return (-1);
 1587|     18|		}
 1588|     66|		bzero(&start6, sizeof(start6));
 1589|     66|		start6.sin6_family = AF_INET6;
 1590|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1591|       |		start6.sin6_len = sizeof(start6);
 1592|       |#endif
 1593|     66|		memcpy(&start6.sin6_addr, ptr, 16);
 1594|     66|		ptr += 16;
 1595|     66|		left -= 16;
 1596|       |
 1597|     66|		bzero(&end6, sizeof(end6));
 1598|     66|		end6.sin6_family = AF_INET6;
 1599|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1600|       |		end6.sin6_len = sizeof(end6);
 1601|       |#endif
 1602|     66|		memcpy(&end6.sin6_addr, ptr, 16);
 1603|     66|		left -= 16;
 1604|       |
 1605|     66|		log_debug("%s: start %s end %s", __func__,
 1606|     66|		    print_addr(&start6), print_addr(&end6));
 1607|     66|		break;
 1608|    621|	default:
  ------------------
  |  Branch (1608:2): [True: 621, False: 373]
  ------------------
 1609|    621|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1610|    621|		return (0);
 1611|    994|	}
 1612|       |
 1613|    321|	if (left > 0) {
  ------------------
  |  Branch (1613:6): [True: 76, False: 245]
  ------------------
 1614|     76|		log_debug("%s: malformed payload: left (%zu) > 0",
 1615|     76|		    __func__, left);
 1616|     76|		return (-1);
 1617|     76|	}
 1618|       |
 1619|    245|	return (0);
 1620|    321|}
ikev2_validate_cp:
 1875|  1.25k|{
 1876|  1.25k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1877|       |
 1878|  1.25k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1878:6): [True: 237, False: 1.01k]
  ------------------
 1879|    237|		log_debug("%s: malformed payload: too short for header "
 1880|    237|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1881|    237|		return (-1);
 1882|    237|	}
 1883|  1.01k|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1884|       |
 1885|  1.01k|	return (0);
 1886|  1.25k|}
ikev2_pld_cp:
 1891|  1.25k|{
 1892|  1.25k|	struct ikev2_cp		 cp;
 1893|  1.25k|	struct ikev2_cfg	*cfg;
 1894|  1.25k|	struct iked_addr	*addr;
 1895|  1.25k|	struct sockaddr_in	*in4;
 1896|  1.25k|	struct sockaddr_in6	*in6;
 1897|  1.25k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
 1898|  1.25k|	uint8_t			*ptr;
 1899|  1.25k|	size_t			 len;
 1900|  1.25k|	int			 cfg_type;
 1901|       |
 1902|  1.25k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1902:6): [True: 237, False: 1.01k]
  ------------------
 1903|    237|		return (-1);
 1904|       |
 1905|  1.01k|	ptr = msgbuf + offset + sizeof(cp);
 1906|  1.01k|	len = left - sizeof(cp);
 1907|       |
 1908|  1.01k|	log_debug("%s: type %s length %zu",
 1909|  1.01k|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1910|  1.01k|	print_hex(ptr, 0, len);
 1911|       |
 1912|  1.93k|	while (len > 0) {
  ------------------
  |  Branch (1912:9): [True: 1.09k, False: 843]
  ------------------
 1913|  1.09k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1913:7): [True: 104, False: 991]
  ------------------
 1914|    104|			log_debug("%s: malformed payload: too short for cfg "
 1915|    104|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1916|    104|			return (-1);
 1917|    104|		}
 1918|    991|		cfg = (struct ikev2_cfg *)ptr;
 1919|       |
 1920|    991|		log_debug("%s: %s 0x%04x length %d", __func__,
 1921|    991|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1922|    991|		    betoh16(cfg->cfg_type),
 1923|    991|		    betoh16(cfg->cfg_length));
 1924|       |
 1925|    991|		ptr += sizeof(*cfg);
 1926|    991|		len -= sizeof(*cfg);
 1927|       |
 1928|    991|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  Branch (1928:7): [True: 68, False: 923]
  ------------------
 1929|     68|			log_debug("%s: malformed payload: too short for "
 1930|     68|			    "cfg_length (%zu < %u)", __func__, len,
 1931|     68|			    betoh16(cfg->cfg_length));
 1932|     68|			return (-1);
 1933|     68|		}
 1934|       |
 1935|    923|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1936|       |
 1937|    923|		cfg_type = betoh16(cfg->cfg_type);
 1938|    923|		switch (cfg_type) {
  ------------------
  |  Branch (1938:11): [True: 508, False: 415]
  ------------------
 1939|    148|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|    148|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1939:3): [True: 148, False: 775]
  ------------------
 1940|    226|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|    226|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1940:3): [True: 78, False: 845]
  ------------------
 1941|    226|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1941:8): [True: 96, False: 130]
  ------------------
 1942|     96|				break;
 1943|    130|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1943:8): [True: 75, False: 55]
  ------------------
 1944|     75|				break;
 1945|       |			/* XXX multiple-valued */
 1946|     55|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  Branch (1946:8): [True: 1, False: 54]
  ------------------
 1947|      1|				log_debug("%s: malformed payload: too short "
 1948|      1|				    "for ipv4 addr (%u < %u)",
 1949|      1|				    __func__, betoh16(cfg->cfg_length), 4);
 1950|      1|				return (-1);
 1951|      1|			}
 1952|     54|			switch(cfg_type) {
 1953|     34|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|     34|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1953:4): [True: 34, False: 20]
  ------------------
 1954|     34|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1954:9): [True: 21, False: 13]
  ------------------
 1955|     21|					log_debug("%s: address already set", __func__);
 1956|     21|					goto skip;
 1957|     21|				}
 1958|     13|				break;
 1959|     20|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|     20|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1959:4): [True: 20, False: 34]
  ------------------
 1960|     20|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1960:9): [True: 10, False: 10]
  ------------------
 1961|     10|					log_debug("%s: dns already set", __func__);
 1962|     10|					goto skip;
 1963|     10|				}
 1964|     10|				break;
 1965|     10|			default:
  ------------------
  |  Branch (1965:4): [True: 0, False: 54]
  ------------------
 1966|      0|				break;
 1967|     54|			}
 1968|     23|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1968:8): [True: 0, False: 23]
  ------------------
 1969|      0|				log_debug("%s: malloc failed", __func__);
 1970|      0|				break;
 1971|      0|			}
 1972|     23|			addr->addr_af = AF_INET;
 1973|     23|			in4 = (struct sockaddr_in *)&addr->addr;
 1974|     23|			in4->sin_family = AF_INET;
 1975|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1976|       |			in4->sin_len = sizeof(*in4);
 1977|       |#endif
 1978|     23|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1979|     23|			switch(cfg_type) {
 1980|     13|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|     13|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1980:4): [True: 13, False: 10]
  ------------------
 1981|     13|				msg->msg_parent->msg_cp_addr = addr;
 1982|     13|				log_debug("%s: IP4_ADDRESS %s", __func__,
 1983|     13|				    print_addr(&addr->addr));
 1984|     13|				break;
 1985|     10|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|     10|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1985:4): [True: 10, False: 13]
  ------------------
 1986|     10|				msg->msg_parent->msg_cp_dns = addr;
 1987|     10|				log_debug("%s: IP4_DNS %s", __func__,
 1988|     10|				    print_addr(&addr->addr));
 1989|     10|				break;
 1990|      0|			default:
  ------------------
  |  Branch (1990:4): [True: 0, False: 23]
  ------------------
 1991|      0|				log_debug("%s: cfg %s", __func__,
 1992|      0|				    print_addr(&addr->addr));
 1993|      0|				break;
 1994|     23|			}
 1995|     23|			break;
 1996|     98|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|     98|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1996:3): [True: 98, False: 825]
  ------------------
 1997|    189|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|    189|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1997:3): [True: 91, False: 832]
  ------------------
 1998|    189|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1998:8): [True: 140, False: 49]
  ------------------
 1999|    140|				break;
 2000|     49|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (2000:8): [True: 26, False: 23]
  ------------------
 2001|     26|				break;
 2002|       |			/* XXX multiple-valued */
 2003|     23|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  Branch (2003:8): [True: 1, False: 22]
  ------------------
 2004|      1|				log_debug("%s: malformed payload: too short "
 2005|      1|				    "for ipv6 addr w/prefixlen (%u < %u)",
 2006|      1|				    __func__, betoh16(cfg->cfg_length), 16);
 2007|      1|				return (-1);
 2008|      1|			}
 2009|     22|			switch(cfg_type) {
  ------------------
  |  Branch (2009:11): [True: 0, False: 22]
  ------------------
 2010|     10|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|     10|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2010:4): [True: 10, False: 12]
  ------------------
 2011|     10|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (2011:9): [True: 6, False: 4]
  ------------------
 2012|      6|					log_debug("%s: address6 already set", __func__);
 2013|      6|					goto skip;
 2014|      6|				}
 2015|      4|				break;
 2016|     12|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|     12|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2016:4): [True: 12, False: 10]
  ------------------
 2017|     12|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (2017:9): [True: 10, False: 2]
  ------------------
 2018|     10|					log_debug("%s: dns already set", __func__);
 2019|     10|					goto skip;
 2020|     10|				}
 2021|      2|				break;
 2022|     22|			}
 2023|      6|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (2023:8): [True: 0, False: 6]
  ------------------
 2024|      0|				log_debug("%s: malloc failed", __func__);
 2025|      0|				break;
 2026|      0|			}
 2027|      6|			addr->addr_af = AF_INET6;
 2028|      6|			in6 = (struct sockaddr_in6 *)&addr->addr;
 2029|      6|			in6->sin6_family = AF_INET6;
 2030|       |#ifdef HAVE_SOCKADDR_SA_LEN
 2031|       |			in6->sin6_len = sizeof(*in6);
 2032|       |#endif
 2033|      6|			memcpy(&in6->sin6_addr, ptr, 16);
 2034|      6|			switch(cfg_type) {
 2035|      4|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|      4|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2035:4): [True: 4, False: 2]
  ------------------
 2036|      4|				msg->msg_parent->msg_cp_addr6 = addr;
 2037|      4|				log_debug("%s: IP6_ADDRESS %s", __func__,
 2038|      4|				    print_addr(&addr->addr));
 2039|      4|				break;
 2040|      2|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|      2|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2040:4): [True: 2, False: 4]
  ------------------
 2041|      2|				msg->msg_parent->msg_cp_dns = addr;
 2042|      2|				log_debug("%s: IP6_DNS %s", __func__,
 2043|      2|				    print_addr(&addr->addr));
 2044|      2|				break;
 2045|      0|			default:
  ------------------
  |  Branch (2045:4): [True: 0, False: 6]
  ------------------
 2046|      0|				log_debug("%s: cfg %s/%d", __func__,
 2047|      0|				    print_addr(&addr->addr), ptr[16]);
 2048|      0|				break;
 2049|      6|			}
 2050|      6|			break;
 2051|    923|		}
 2052|       |
 2053|    921| skip:
 2054|    921|		ptr += betoh16(cfg->cfg_length);
 2055|    921|		len -= betoh16(cfg->cfg_length);
 2056|    921|	}
 2057|       |
 2058|    843|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2058:6): [True: 792, False: 51]
  ------------------
 2059|    792|		return (0);
 2060|       |
 2061|     51|	msg->msg_parent->msg_cp = cp.cp_type;
 2062|       |
 2063|     51|	return (0);
 2064|    843|}
ikev2_validate_eap:
 2069|  3.25k|{
 2070|  3.25k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2071|       |
 2072|  3.25k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2072:6): [True: 1.24k, False: 2.01k]
  ------------------
 2073|  1.24k|		log_debug("%s: malformed payload: too short for header "
 2074|  1.24k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2075|  1.24k|		return (-1);
 2076|  1.24k|	}
 2077|  2.01k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2078|       |
 2079|  2.01k|	return (0);
 2080|  3.25k|}
ikev2_pld_eap:
 2085|  3.25k|{
 2086|  3.25k|	struct eap_header		 hdr;
 2087|  3.25k|	struct eap_message		*eap = NULL;
 2088|  3.25k|	const struct iked_sa		*sa = msg->msg_sa;
 2089|  3.25k|	size_t				 len;
 2090|       |
 2091|  3.25k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2091:6): [True: 1.24k, False: 2.01k]
  ------------------
 2092|  1.24k|		return (-1);
 2093|  2.01k|	len = betoh16(hdr.eap_length);
 2094|       |
 2095|  2.01k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2095:6): [True: 834, False: 1.17k]
  ------------------
 2096|    834|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1105|    834|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|    834|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2097|    834|		    print_map(hdr.eap_code, eap_code_map),
 2098|    834|		    hdr.eap_id, betoh16(hdr.eap_length));
 2099|  1.17k|	} else {
 2100|       |		/* Now try to get the indicated length */
 2101|  1.17k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2101:7): [True: 459, False: 720]
  ------------------
 2102|    459|			log_debug("%s: invalid EAP length", __func__);
 2103|    459|			return (-1);
 2104|    459|		}
 2105|       |
 2106|    720|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1105|    720|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|    720|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2107|    720|		    print_map(eap->eap_code, eap_code_map),
 2108|    720|		    eap->eap_id, betoh16(eap->eap_length),
 2109|    720|		    print_map(eap->eap_type, eap_type_map));
 2110|       |
 2111|    720|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2111:7): [True: 0, False: 720]
  ------------------
 2112|      0|			return (-1);
 2113|    720|		msg->msg_parent->msg_eap.eam_found = 1;
 2114|    720|	}
 2115|       |
 2116|  1.55k|	return (0);
 2117|  2.01k|}

ibuf_new:
   41|  1.51k|{
   42|  1.51k|	struct ibuf	*buf;
   43|       |
   44|  1.51k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (44:6): [True: 0, False: 1.51k]
  ------------------
   45|  1.51k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  1.51k|#define IKED_MSGBUF_MAX		8192
  ------------------
   46|      0|		return (NULL);
   47|       |
   48|  1.51k|	if (len == 0)
  ------------------
  |  Branch (48:6): [True: 117, False: 1.39k]
  ------------------
   49|    117|		return (buf);
   50|       |
   51|  1.39k|	if (data == NULL) {
  ------------------
  |  Branch (51:6): [True: 0, False: 1.39k]
  ------------------
   52|      0|		if (ibuf_add_zero(buf, len) != 0) {
  ------------------
  |  Branch (52:7): [True: 0, False: 0]
  ------------------
   53|      0|			ibuf_free(buf);
   54|      0|			return (NULL);
   55|      0|		}
   56|  1.39k|	} else {
   57|  1.39k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (57:7): [True: 0, False: 1.39k]
  ------------------
   58|      0|			ibuf_free(buf);
   59|      0|			return (NULL);
   60|      0|		}
   61|  1.39k|	}
   62|       |
   63|  1.39k|	return (buf);
   64|  1.39k|}

log_getverbose:
   82|  9.04k|{
   83|  9.04k|	return (verbose);
   84|  9.04k|}
vlog:
   98|  1.91k|{
   99|  1.91k|	char	*nfmt;
  100|  1.91k|	int	 saved_errno = errno;
  101|       |
  102|  1.91k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 1.91k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  1.91k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  1.91k|	errno = saved_errno;
  116|  1.91k|}
log_info:
  158|  1.91k|{
  159|  1.91k|	va_list	 ap;
  160|       |
  161|  1.91k|	va_start(ap, emsg);
  162|  1.91k|	vlog(LOG_INFO, emsg, ap);
  163|  1.91k|	va_end(ap);
  164|  1.91k|}
log_debug:
  168|  49.5k|{
  169|  49.5k|	va_list	 ap;
  170|       |
  171|  49.5k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 49.5k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|  49.5k|}

socket_getport:
   71|    671|{
   72|    671|	switch (sa->sa_family) {
   73|    533|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 533, False: 138]
  ------------------
   74|    533|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|    138|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 138, False: 533]
  ------------------
   76|    138|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 671]
  ------------------
   78|      0|		return (0);
   79|    671|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|    671|}
print_spi:
  499|  3.75k|{
  500|  3.75k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  3.75k|	static int		 i = 0;
  502|  3.75k|	char			*ptr;
  503|       |
  504|  3.75k|	ptr = buf[i];
  505|       |
  506|  3.75k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 3.75k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|     93|	case 4:
  ------------------
  |  Branch (510:2): [True: 93, False: 3.66k]
  ------------------
  511|     93|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|     93|		break;
  513|  1.50k|	case 8:
  ------------------
  |  Branch (513:2): [True: 1.50k, False: 2.24k]
  ------------------
  514|  1.50k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  1.50k|		break;
  516|  2.15k|	default:
  ------------------
  |  Branch (516:2): [True: 2.15k, False: 1.60k]
  ------------------
  517|  2.15k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  2.15k|		break;
  519|  3.75k|	}
  520|       |
  521|  3.75k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  3.75k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 469, False: 3.28k]
  ------------------
  522|    469|		i = 0;
  523|       |
  524|  3.75k|	return (ptr);
  525|  3.75k|}
print_map:
  529|  60.3k|{
  530|  60.3k|	unsigned int		 i;
  531|  60.3k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|  60.3k|	static int		 idx = 0;
  533|  60.3k|	const char		*name = NULL;
  534|       |
  535|  60.3k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  60.3k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 7.53k, False: 52.7k]
  ------------------
  536|  7.53k|		idx = 0;
  537|  60.3k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  1.09M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 1.03M, False: 60.3k]
  ------------------
  540|  1.03M|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 44.8k, False: 985k]
  ------------------
  541|  44.8k|			name = map[i].cm_name;
  542|  1.03M|	}
  543|       |
  544|  60.3k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 15.4k, False: 44.8k]
  ------------------
  545|  15.4k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|  44.8k|	else
  547|  44.8k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|  60.3k|	return (buf[idx++]);
  550|  60.3k|}
print_hex:
  561|  9.04k|{
  562|  9.04k|	unsigned int	 i;
  563|       |
  564|  9.04k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 9.04k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|  9.04k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_addr:
  737|    671|{
  738|    671|	static char	 sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  739|    671|	static int	 idx;
  740|    671|	struct sockaddr	*sa = addr;
  741|    671|	char		*buf;
  742|    671|	size_t		 len;
  743|    671|	char		 pbuf[7];
  744|    671|	in_port_t	 port;
  745|       |
  746|    671|	buf = sbuf[idx];
  747|    671|	len = sizeof(sbuf[idx]);
  748|    671|	if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|    671|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (748:6): [True: 83, False: 588]
  ------------------
  749|     83|		idx = 0;
  750|       |
  751|    671|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (751:6): [True: 0, False: 671]
  ------------------
  752|      0|		strlcpy(buf, "any", len);
  753|      0|		return (buf);
  754|      0|	}
  755|       |
  756|    671|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  113|    671|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (113:3): [True: 533, False: 138]
  |  |  ------------------
  |  |  114|    671|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (114:2): [True: 138, False: 0]
  |  |  ------------------
  |  |  115|    138|	sizeof(struct sockaddr))
  ------------------
  |  Branch (756:6): [True: 0, False: 671]
  ------------------
  757|    671|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  758|      0|		strlcpy(buf, "unknown", len);
  759|      0|		return (buf);
  760|      0|	}
  761|       |
  762|    671|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (762:6): [True: 0, False: 671]
  ------------------
  763|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  764|      0|		(void)strlcat(buf, pbuf, len);
  765|      0|	}
  766|       |
  767|    671|	return (buf);
  768|    671|}

eap_parse:
   60|    720|{
   61|    720|	return (0);
   62|    720|}
ikev2_msg_frompeer:
   67|  19.2k|{
   68|  19.2k|	struct iked_sa		*sa = msg->msg_sa;
   69|  19.2k|	struct ike_header	*hdr;
   70|       |
   71|  19.2k|	msg = msg->msg_parent;
   72|       |
   73|  19.2k|	if (sa == NULL ||
  ------------------
  |  Branch (73:6): [True: 0, False: 19.2k]
  ------------------
   74|  19.2k|	    (hdr = ibuf_seek(msg->msg_data, 0, sizeof(*hdr))) == NULL)
  ------------------
  |  Branch (74:6): [True: 0, False: 19.2k]
  ------------------
   75|      0|		return (0);
   76|       |
   77|  19.2k|	if (!sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (77:6): [True: 19.2k, False: 0]
  ------------------
   78|  19.2k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR))
  ------------------
  |  |   19|  19.2k|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (78:6): [True: 968, False: 18.3k]
  ------------------
   79|    968|		return (1);
   80|  18.3k|	else if (sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (80:11): [True: 0, False: 18.3k]
  ------------------
   81|  18.3k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR) == 0)
  ------------------
  |  |   19|      0|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (81:6): [True: 0, False: 0]
  ------------------
   82|      0|		return (1);
   83|       |
   84|  18.3k|	return (0);
   85|  19.2k|}
ikev2_ikesa_info:
  101|  1.66k|{
  102|  1.66k|	return "";
  103|  1.66k|}
sa_stateok:
  120|     12|{
  121|     12|	return (0);
  122|     12|}
ikev2_nat_detection:
  164|     49|{
  165|     49|	return (0);
  166|     49|}
ikev2_print_id:
  178|    667|{
  179|    667|	return (0);
  180|    667|}
config_add_proposal:
  191|      2|{
  192|      2|	return (NULL);
  193|      2|}
ikev2_send_informational:
  208|     67|{
  209|     67|	return (0);
  210|     67|}
ikev2_msg_cleanup:
  250|    704|{
  251|    704|	struct iked_certreq *cr;
  252|    704|	struct iked_proposal *prop, *proptmp;
  253|    704|	int			 i;
  254|       |
  255|    704|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (255:6): [True: 704, False: 0]
  ------------------
  256|    704|		ibuf_free(msg->msg_nonce);
  257|    704|		ibuf_free(msg->msg_ke);
  258|    704|		ibuf_free(msg->msg_auth.id_buf);
  259|    704|		ibuf_free(msg->msg_peerid.id_buf);
  260|    704|		ibuf_free(msg->msg_localid.id_buf);
  261|    704|		ibuf_free(msg->msg_cert.id_buf);
  262|  2.81k|		for (i = 0; i < IKED_SCERT_MAX; i++)
  ------------------
  |  |  477|  2.81k|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (262:15): [True: 2.11k, False: 704]
  ------------------
  263|  2.11k|			ibuf_free(msg->msg_scert[i].id_buf);
  264|    704|		ibuf_free(msg->msg_cookie);
  265|    704|		ibuf_free(msg->msg_cookie2);
  266|    704|		ibuf_free(msg->msg_del_buf);
  267|    704|		free(msg->msg_eap.eam_user);
  268|    704|		free(msg->msg_cp_addr);
  269|    704|		free(msg->msg_cp_addr6);
  270|    704|		free(msg->msg_cp_dns);
  271|       |
  272|    704|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|    704|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|    704|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|    704|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  1.40k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 704]
  |  |  ------------------
  |  |  447|    704|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|    704|	    (var) = (tvar))
  ------------------
  273|    704|		    proptmp) {
  274|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  275|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (275:8): [True: 0, False: 0]
  ------------------
  276|      0|				free(prop->prop_xforms);
  277|      0|			free(prop);
  278|      0|		}
  279|       |
  280|    704|		msg->msg_nonce = NULL;
  281|    704|		msg->msg_ke = NULL;
  282|    704|		msg->msg_auth.id_buf = NULL;
  283|    704|		msg->msg_peerid.id_buf = NULL;
  284|    704|		msg->msg_localid.id_buf = NULL;
  285|    704|		msg->msg_cert.id_buf = NULL;
  286|  2.81k|		for (i = 0; i < IKED_SCERT_MAX; i++)
  ------------------
  |  |  477|  2.81k|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (286:15): [True: 2.11k, False: 704]
  ------------------
  287|  2.11k|			msg->msg_scert[i].id_buf = NULL;
  288|    704|		msg->msg_cookie = NULL;
  289|    704|		msg->msg_cookie2 = NULL;
  290|    704|		msg->msg_del_buf = NULL;
  291|    704|		msg->msg_eap.eam_user = NULL;
  292|    704|		msg->msg_cp_addr = NULL;
  293|    704|		msg->msg_cp_addr6 = NULL;
  294|    704|		msg->msg_cp_dns = NULL;
  295|       |
  296|    789|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|    789|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (296:10): [True: 85, False: 704]
  ------------------
  297|     85|			ibuf_free(cr->cr_data);
  298|     85|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|     85|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|     85|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 14, False: 71]
  |  |  ------------------
  |  |  310|     85|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|     85|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  299|     85|			free(cr);
  300|     85|		}
  301|    704|	}
  302|       |
  303|    704|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (303:6): [True: 704, False: 0]
  ------------------
  304|    704|		ibuf_free(msg->msg_data);
  305|    704|		msg->msg_data = NULL;
  306|    704|	}
  307|    704|}

LLVMFuzzerTestOneInput:
  107|    705|{
  108|    705|	struct ibuf		*fuzzed;
  109|    705|	struct ike_header	 hdr;
  110|    705|	struct iked_message	 msg;
  111|       |
  112|    705|	bzero(&hdr, sizeof(hdr));
  113|    705|	bzero(&msg, sizeof(msg));
  114|       |
  115|    705|	fuzzed = ibuf_new(data, size);
  116|    705|	if (fuzzed == NULL){
  ------------------
  |  Branch (116:6): [True: 0, False: 705]
  ------------------
  117|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  118|      0|		    "(hint: fuzz-input too long?)");
  119|      0|		return -1;
  120|      0|	}	
  121|       |	
  122|       |	/* size too small? */
  123|    705|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (123:6): [True: 1, False: 704]
  ------------------
  124|      1|		ibuf_free(fuzzed);
  125|      1|		return 0;
  126|      1|	}	       
  127|       |
  128|    704|	prepare_header(&hdr, fuzzed);
  129|    704|	prepare_message(&msg, fuzzed);
  130|       |
  131|    704|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  132|       |
  133|    704|	ikev2_msg_cleanup(NULL, &msg);
  134|       |
  135|    704|	return 0;
  136|    705|}
test_parser_fuzz.c:prepare_header:
   75|    704|{
   76|    704|	bzero(hdr, sizeof(*hdr));
   77|    704|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|    704|	    sizeof(hdr->ike_ispi));
   79|    704|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|    704|	    sizeof(hdr->ike_rspi));
   81|    704|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|    704|	hdr->ike_version = get_version(ibuf_data(data));
   83|    704|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|    704|	hdr->ike_length = get_length(ibuf_data(data));
   85|    704|}
test_parser_fuzz.c:get_icookie:
   39|    704|{
   40|    704|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|    704|#define OFFSET_ICOOKIE		0
  ------------------
   41|    704|}
test_parser_fuzz.c:get_rcookie:
   45|    704|{
   46|    704|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|    704|#define OFFSET_RCOOKIE		8
  ------------------
   47|    704|}
test_parser_fuzz.c:get_nextpayload:
   51|    704|{
   52|    704|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|    704|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|    704|}
test_parser_fuzz.c:get_version:
   57|    704|{
   58|    704|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|    704|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|    704|}
test_parser_fuzz.c:get_exchange:
   63|    704|{
   64|    704|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|    704|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|    704|}
test_parser_fuzz.c:get_length:
   69|    704|{
   70|    704|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|    704|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|    704|}
test_parser_fuzz.c:prepare_message:
   89|    704|{
   90|    704|	static struct iked_sa	sa;
   91|       |
   92|    704|	bzero(&sa, sizeof(sa));
   93|    704|	bzero(msg, sizeof(*msg));
   94|       |
   95|    704|	msg->msg_sa = &sa;
   96|    704|	msg->msg_data = data;
   97|    704|	msg->msg_e = 1;
   98|    704|	msg->msg_parent = msg;
   99|       |
  100|    704|	TAILQ_INIT(&msg->msg_proposals);
  ------------------
  |  |  465|    704|#define	TAILQ_INIT(head) do {						\
  |  |  466|    704|	(head)->tqh_first = NULL;					\
  |  |  467|    704|	(head)->tqh_last = &(head)->tqh_first;				\
  |  |  468|    704|} while (0)
  |  |  ------------------
  |  |  |  Branch (468:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  101|    704|	SIMPLEQ_INIT(&msg->msg_certreqs);
  ------------------
  |  |  285|    704|#define	SIMPLEQ_INIT(head) do {						\
  |  |  286|    704|	(head)->sqh_first = NULL;					\
  |  |  287|    704|	(head)->sqh_last = &(head)->sqh_first;				\
  |  |  288|    704|} while (0)
  |  |  ------------------
  |  |  |  Branch (288:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  102|    704|}

