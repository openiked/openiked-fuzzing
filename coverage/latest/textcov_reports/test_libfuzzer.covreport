freezero:
   25|  20.4k|{
   26|       |	/* This is legal. */
   27|  20.4k|	if (ptr == NULL)
  ------------------
  |  Branch (27:6): [True: 1.41k, False: 19.0k]
  ------------------
   28|  1.41k|		return;
   29|       |
   30|  19.0k|	explicit_bzero(ptr, sz);
   31|  19.0k|	free(ptr);
   32|  19.0k|}

ibuf_dynamic:
   62|  20.4k|{
   63|  20.4k|	struct ibuf	*buf;
   64|       |
   65|  20.4k|	if (max < len) {
  ------------------
  |  Branch (65:6): [True: 0, False: 20.4k]
  ------------------
   66|      0|		errno = EINVAL;
   67|      0|		return (NULL);
   68|      0|	}
   69|       |
   70|  20.4k|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
  ------------------
  |  Branch (70:6): [True: 0, False: 20.4k]
  ------------------
   71|      0|		return (NULL);
   72|  20.4k|	if (len > 0) {
  ------------------
  |  Branch (72:6): [True: 19.0k, False: 1.41k]
  ------------------
   73|  19.0k|		if ((buf->buf = calloc(len, 1)) == NULL) {
  ------------------
  |  Branch (73:7): [True: 0, False: 19.0k]
  ------------------
   74|      0|			free(buf);
   75|      0|			return (NULL);
   76|      0|		}
   77|  19.0k|	}
   78|  20.4k|	buf->size = len;
   79|  20.4k|	buf->max = max;
   80|  20.4k|	buf->fd = -1;
   81|       |
   82|  20.4k|	return (buf);
   83|  20.4k|}
ibuf_reserve:
  107|  19.0k|{
  108|  19.0k|	void	*b;
  109|       |
  110|  19.0k|	if (len > SIZE_MAX - buf->wpos) {
  ------------------
  |  Branch (110:6): [True: 0, False: 19.0k]
  ------------------
  111|      0|		errno = ERANGE;
  112|      0|		return (NULL);
  113|      0|	}
  114|       |
  115|  19.0k|	if (buf->wpos + len > buf->size)
  ------------------
  |  Branch (115:6): [True: 0, False: 19.0k]
  ------------------
  116|      0|		if (ibuf_realloc(buf, len) == -1)
  ------------------
  |  Branch (116:7): [True: 0, False: 0]
  ------------------
  117|      0|			return (NULL);
  118|       |
  119|  19.0k|	b = buf->buf + buf->wpos;
  120|  19.0k|	buf->wpos += len;
  121|  19.0k|	memset(b, 0, len);
  122|  19.0k|	return (b);
  123|  19.0k|}
ibuf_add:
  127|  19.0k|{
  128|  19.0k|	void *b;
  129|       |
  130|  19.0k|	if ((b = ibuf_reserve(buf, len)) == NULL)
  ------------------
  |  Branch (130:6): [True: 0, False: 19.0k]
  ------------------
  131|      0|		return (-1);
  132|       |
  133|  19.0k|	memcpy(b, data, len);
  134|  19.0k|	return (0);
  135|  19.0k|}
ibuf_seek:
  202|   233k|{
  203|       |	/* only allowed to seek in already written parts */
  204|   233k|	if (len > SIZE_MAX - pos || pos + len > buf->wpos) {
  ------------------
  |  Branch (204:6): [True: 0, False: 233k]
  |  Branch (204:30): [True: 3.28k, False: 230k]
  ------------------
  205|  3.28k|		errno = ERANGE;
  206|  3.28k|		return (NULL);
  207|  3.28k|	}
  208|       |
  209|   230k|	return (buf->buf + pos);
  210|   233k|}
ibuf_data:
  272|   711k|{
  273|   711k|	return (buf->buf);
  274|   711k|}
ibuf_size:
  278|  13.1k|{
  279|  13.1k|	return (buf->wpos);
  280|  13.1k|}
ibuf_free:
  296|   177k|{
  297|   177k|	if (buf == NULL)
  ------------------
  |  Branch (297:6): [True: 157k, False: 20.4k]
  ------------------
  298|   157k|		return;
  299|       |#ifdef NOTYET
  300|       |	if (buf->fd != -1)
  301|       |		close(buf->fd);
  302|       |#endif
  303|  20.4k|	freezero(buf->buf, buf->size);
  304|  20.4k|	free(buf);
  305|  20.4k|}

strlcpy:
   29|   471k|{
   30|   471k|	const char *osrc = src;
   31|   471k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|   471k|	if (nleft != 0) {
  ------------------
  |  Branch (34:6): [True: 471k, False: 0]
  ------------------
   35|  3.70M|		while (--nleft != 0) {
  ------------------
  |  Branch (35:10): [True: 3.70M, False: 1.45k]
  ------------------
   36|  3.70M|			if ((*dst++ = *src++) == '\0')
  ------------------
  |  Branch (36:8): [True: 469k, False: 3.23M]
  ------------------
   37|   469k|				break;
   38|  3.70M|		}
   39|   471k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|   471k|	if (nleft == 0) {
  ------------------
  |  Branch (42:6): [True: 1.45k, False: 469k]
  ------------------
   43|  1.45k|		if (dsize != 0)
  ------------------
  |  Branch (43:7): [True: 1.45k, False: 0]
  ------------------
   44|  1.45k|			*dst = '\0';		/* NUL-terminate dst */
   45|  1.45k|		while (*src++)
  ------------------
  |  Branch (45:10): [True: 0, False: 1.45k]
  ------------------
   46|      0|			;
   47|  1.45k|	}
   48|       |
   49|   471k|	return(src - osrc - 1);	/* count does not include NUL */
   50|   471k|}

ikev2_pld_parse:
  118|  13.1k|{
  119|  13.1k|	log_debug("%s: header ispi %s rspi %s"
  120|  13.1k|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  121|  13.1k|	    " msgid %d length %u response %d", __func__,
  122|  13.1k|	    print_spi(betoh64(hdr->ike_ispi), 8),
  123|  13.1k|	    print_spi(betoh64(hdr->ike_rspi), 8),
  124|  13.1k|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  125|  13.1k|	    hdr->ike_version,
  126|  13.1k|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  127|  13.1k|	    hdr->ike_flags,
  128|  13.1k|	    betoh32(hdr->ike_msgid),
  129|  13.1k|	    betoh32(hdr->ike_length),
  130|  13.1k|	    msg->msg_response);
  131|       |
  132|  13.1k|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  ------------------
  |  Branch (132:6): [True: 4, False: 13.1k]
  ------------------
  133|      4|		log_debug("%s: short message", __func__);
  134|      4|		return (-1);
  135|      4|	}
  136|       |
  137|  13.1k|	offset += sizeof(*hdr);
  138|       |
  139|  13.1k|	return (ikev2_pld_payloads(env, msg, offset,
  140|  13.1k|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  141|  13.1k|}
ikev2_validate_pld:
  146|   235k|{
  147|   235k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  148|   235k|	size_t		 pld_length;
  149|       |
  150|       |	/* We need at least the generic header. */
  151|   235k|	if (left < sizeof(*pld)) {
  ------------------
  |  Branch (151:6): [True: 1.73k, False: 233k]
  ------------------
  152|  1.73k|		log_debug("%s: malformed payload: too short for generic "
  153|  1.73k|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  154|  1.73k|		return (-1);
  155|  1.73k|	}
  156|   233k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  157|       |
  158|       |	/*
  159|       |	 * We need at least the specified number of bytes.
  160|       |	 * pld_length is the full size of the payload including
  161|       |	 * the generic payload header.
  162|       |	 */
  163|   233k|	pld_length = betoh16(pld->pld_length);
  164|   233k|	if (left < pld_length) {
  ------------------
  |  Branch (164:6): [True: 5.87k, False: 228k]
  ------------------
  165|  5.87k|		log_debug("%s: malformed payload: shorter than specified "
  166|  5.87k|		    "(%zu < %zu)", __func__, left, pld_length);
  167|  5.87k|		return (-1);
  168|  5.87k|	}
  169|       |	/*
  170|       |	 * Sanity check the specified payload size, it must
  171|       |	 * be at least the size of the generic payload header.
  172|       |	 */
  173|   228k|	if (pld_length < sizeof(*pld)) {
  ------------------
  |  Branch (173:6): [True: 2.36k, False: 225k]
  ------------------
  174|  2.36k|		log_debug("%s: malformed payload: shorter than minimum "
  175|  2.36k|		    "header size (%zu < %zu)", __func__, pld_length,
  176|  2.36k|		    sizeof(*pld));
  177|  2.36k|		return (-1);
  178|  2.36k|	}
  179|       |
  180|   225k|	return (0);
  181|   228k|}
ikev2_pld_payloads:
  186|  13.1k|{
  187|  13.1k|	struct ikev2_payload	 pld;
  188|  13.1k|	unsigned int		 e;
  189|  13.1k|	int			 ret;
  190|  13.1k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  191|  13.1k|	size_t			 total, left;
  192|       |
  193|       |	/* Check if message was decrypted in an E payload */
  194|  13.1k|	e = msg->msg_e ? IKED_E : 0;
  ------------------
  |  |   76|  13.1k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (194:6): [True: 13.1k, False: 0]
  ------------------
  195|       |
  196|       |	/* Bytes left in datagram. */
  197|  13.1k|	total = length - offset;
  198|       |
  199|   238k|	while (payload != 0 && offset < length) {
  ------------------
  |  Branch (199:9): [True: 237k, False: 525]
  |  Branch (199:25): [True: 235k, False: 1.94k]
  ------------------
  200|   235k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  ------------------
  |  Branch (200:7): [True: 9.97k, False: 225k]
  ------------------
  201|  9.97k|			return (-1);
  202|       |
  203|   225k|		log_debug("%s: %spayload %s"
  204|   225k|		    " nextpayload %s critical 0x%02x length %d",
  205|   225k|		    __func__, e ? "decrypted " : "",
  ------------------
  |  Branch (205:17): [True: 225k, False: 0]
  ------------------
  206|   225k|		    print_map(payload, ikev2_payload_map),
  207|   225k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  208|   225k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  ------------------
  |  |   89|   225k|#define IKEV2_CRITICAL_PAYLOAD	0x01	/* First bit in the reserved field */
  ------------------
  209|   225k|		    betoh16(pld.pld_length));
  210|       |
  211|       |		/* Skip over generic payload header. */
  212|   225k|		offset += sizeof(pld);
  213|   225k|		total -= sizeof(pld);
  214|   225k|		left = betoh16(pld.pld_length) - sizeof(pld);
  215|   225k|		ret = 0;
  216|       |
  217|   225k|		switch (payload | e) {
  218|      0|		case IKEV2_PAYLOAD_SA:
  ------------------
  |  |   93|      0|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
  |  Branch (218:3): [True: 0, False: 225k]
  ------------------
  219|  28.2k|		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   93|  28.2k|#define IKEV2_PAYLOAD_SA	33	/* Security Association */
  ------------------
              		case IKEV2_PAYLOAD_SA | IKED_E:
  ------------------
  |  |   76|  28.2k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (219:3): [True: 28.2k, False: 197k]
  ------------------
  220|  28.2k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  221|  28.2k|			break;
  222|      0|		case IKEV2_PAYLOAD_KE:
  ------------------
  |  |   94|      0|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
  |  Branch (222:3): [True: 0, False: 225k]
  ------------------
  223|  8.28k|		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   94|  8.28k|#define IKEV2_PAYLOAD_KE	34	/* Key Exchange */
  ------------------
              		case IKEV2_PAYLOAD_KE | IKED_E:
  ------------------
  |  |   76|  8.28k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (223:3): [True: 8.28k, False: 217k]
  ------------------
  224|  8.28k|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  225|  8.28k|			break;
  226|  12.9k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   95|  12.9k|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_IDi | IKED_E:
  ------------------
  |  |   76|  12.9k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (226:3): [True: 12.9k, False: 212k]
  ------------------
  227|  19.4k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   96|  19.4k|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
              		case IKEV2_PAYLOAD_IDr | IKED_E:
  ------------------
  |  |   76|  19.4k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (227:3): [True: 6.57k, False: 219k]
  ------------------
  228|  19.4k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  229|  19.4k|			    payload);
  230|  19.4k|			break;
  231|  5.80k|		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   97|  5.80k|#define IKEV2_PAYLOAD_CERT	37	/* Certificate */
  ------------------
              		case IKEV2_PAYLOAD_CERT | IKED_E:
  ------------------
  |  |   76|  5.80k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (231:3): [True: 5.80k, False: 219k]
  ------------------
  232|  5.80k|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  233|  5.80k|			break;
  234|      0|		case IKEV2_PAYLOAD_CERTREQ:
  ------------------
  |  |   98|      0|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
  |  Branch (234:3): [True: 0, False: 225k]
  ------------------
  235|  12.1k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   98|  12.1k|#define IKEV2_PAYLOAD_CERTREQ	38	/* Certificate Request */
  ------------------
              		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  ------------------
  |  |   76|  12.1k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (235:3): [True: 12.1k, False: 213k]
  ------------------
  236|  12.1k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  237|  12.1k|			break;
  238|  8.17k|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   99|  8.17k|#define IKEV2_PAYLOAD_AUTH	39	/* Authentication */
  ------------------
              		case IKEV2_PAYLOAD_AUTH | IKED_E:
  ------------------
  |  |   76|  8.17k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (238:3): [True: 8.17k, False: 217k]
  ------------------
  239|  8.17k|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  240|  8.17k|			break;
  241|      0|		case IKEV2_PAYLOAD_NONCE:
  ------------------
  |  |  100|      0|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
  |  Branch (241:3): [True: 0, False: 225k]
  ------------------
  242|    242|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |  100|    242|#define IKEV2_PAYLOAD_NONCE	40	/* Nonce */
  ------------------
              		case IKEV2_PAYLOAD_NONCE | IKED_E:
  ------------------
  |  |   76|    242|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (242:3): [True: 242, False: 225k]
  ------------------
  243|    242|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  244|    242|			break;
  245|      0|		case IKEV2_PAYLOAD_NOTIFY:
  ------------------
  |  |  101|      0|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
  |  Branch (245:3): [True: 0, False: 225k]
  ------------------
  246|  32.4k|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |  101|  32.4k|#define IKEV2_PAYLOAD_NOTIFY	41	/* Notify */
  ------------------
              		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  ------------------
  |  |   76|  32.4k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (246:3): [True: 32.4k, False: 193k]
  ------------------
  247|  32.4k|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  248|  32.4k|			break;
  249|  7.11k|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |  102|  7.11k|#define IKEV2_PAYLOAD_DELETE	42	/* Delete */
  ------------------
              		case IKEV2_PAYLOAD_DELETE | IKED_E:
  ------------------
  |  |   76|  7.11k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (249:3): [True: 7.11k, False: 218k]
  ------------------
  250|  7.11k|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  251|  7.11k|			break;
  252|  4.65k|		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |  104|  4.65k|#define IKEV2_PAYLOAD_TSi	44	/* Traffic Selector - Initiator */
  ------------------
              		case IKEV2_PAYLOAD_TSi | IKED_E:
  ------------------
  |  |   76|  4.65k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (252:3): [True: 4.65k, False: 221k]
  ------------------
  253|  18.1k|		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |  105|  18.1k|#define IKEV2_PAYLOAD_TSr	45	/* Traffic Selector - Responder */
  ------------------
              		case IKEV2_PAYLOAD_TSr | IKED_E:
  ------------------
  |  |   76|  18.1k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (253:3): [True: 13.5k, False: 212k]
  ------------------
  254|  18.1k|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  255|  18.1k|			break;
  256|      0|		case IKEV2_PAYLOAD_SK:
  ------------------
  |  |  106|      0|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (256:3): [True: 0, False: 225k]
  ------------------
  257|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  258|      0|			break;
  259|      0|		case IKEV2_PAYLOAD_SKF:
  ------------------
  |  |  110|      0|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (259:3): [True: 0, False: 225k]
  ------------------
  260|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  261|      0|			break;
  262|  9.77k|		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |  107|  9.77k|#define IKEV2_PAYLOAD_CP	47	/* Configuration Payload */
  ------------------
              		case IKEV2_PAYLOAD_CP | IKED_E:
  ------------------
  |  |   76|  9.77k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (262:3): [True: 9.77k, False: 215k]
  ------------------
  263|  9.77k|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  264|  9.77k|			break;
  265|  17.1k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |  108|  17.1k|#define IKEV2_PAYLOAD_EAP	48	/* Extensible Authentication */
  ------------------
              		case IKEV2_PAYLOAD_EAP | IKED_E:
  ------------------
  |  |   76|  17.1k|#define IKED_E			0x1000	/* Decrypted flag */
  ------------------
  |  Branch (265:3): [True: 17.1k, False: 208k]
  ------------------
  266|  17.1k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  267|  17.1k|			break;
  268|  58.8k|		default:
  ------------------
  |  Branch (268:3): [True: 58.8k, False: 166k]
  ------------------
  269|  58.8k|			print_hex(msgbuf, offset,
  270|  58.8k|			    betoh16(pld.pld_length) - sizeof(pld));
  271|  58.8k|			break;
  272|   225k|		}
  273|       |
  274|   225k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (274:7): [True: 95.2k, False: 130k]
  |  Branch (274:19): [True: 723, False: 94.5k]
  ------------------
  275|    723|			(void)ikev2_send_informational(env, msg);
  276|    723|			return (-1);
  277|    723|		}
  278|       |
  279|       |		/* Encrypted payloads must appear last */
  280|   224k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  ------------------
  |  |  106|   224k|#define IKEV2_PAYLOAD_SK	46	/* Encrypted */
  ------------------
  |  Branch (280:7): [True: 2, False: 224k]
  ------------------
  281|   224k|		    (payload == IKEV2_PAYLOAD_SKF))
  ------------------
  |  |  110|   224k|#define IKEV2_PAYLOAD_SKF	53	/* RFC7383 Encrypted Fragment Payload */
  ------------------
  |  Branch (281:7): [True: 2, False: 224k]
  ------------------
  282|      4|			return (0);
  283|       |
  284|   224k|		payload = pld.pld_nextpayload;
  285|   224k|		offset += left;
  286|   224k|		total -= left;
  287|   224k|	}
  288|       |
  289|  2.47k|	return (0);
  290|  13.1k|}
ikev2_validate_sa:
  295|  32.6k|{
  296|  32.6k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  297|  32.6k|	size_t		 sap_length;
  298|       |
  299|  32.6k|	if (left < sizeof(*sap)) {
  ------------------
  |  Branch (299:6): [True: 13.9k, False: 18.7k]
  ------------------
  300|  13.9k|		log_debug("%s: malformed payload: too short for header "
  301|  13.9k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  302|  13.9k|		return (-1);
  303|  13.9k|	}
  304|  18.7k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  305|       |
  306|  18.7k|	sap_length = betoh16(sap->sap_length);
  307|  18.7k|	if (sap_length < sizeof(*sap)) {
  ------------------
  |  Branch (307:6): [True: 5.01k, False: 13.6k]
  ------------------
  308|  5.01k|		log_debug("%s: malformed payload: shorter than minimum header "
  309|  5.01k|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  310|  5.01k|		return (-1);
  311|  5.01k|	}
  312|  13.6k|	if (left < sap_length) {
  ------------------
  |  Branch (312:6): [True: 2.30k, False: 11.3k]
  ------------------
  313|  2.30k|		log_debug("%s: malformed payload: too long for actual payload "
  314|  2.30k|		    "size (%zu < %zu)", __func__, left, sap_length);
  315|  2.30k|		return (-1);
  316|  2.30k|	}
  317|       |	/*
  318|       |	 * If there is only one proposal, sap_length must be the
  319|       |	 * total payload size.
  320|       |	 */
  321|  11.3k|	if (!sap->sap_more && left != sap_length) {
  ------------------
  |  Branch (321:6): [True: 1.60k, False: 9.78k]
  |  Branch (321:24): [True: 30, False: 1.57k]
  ------------------
  322|     30|		log_debug("%s: malformed payload: SA payload length mismatches "
  323|     30|		    "single proposal substructure length (%zu != %zu)",
  324|     30|		    __func__, left, sap_length);
  325|     30|		return (-1);
  326|     30|	}
  327|       |	/*
  328|       |	 * If there are more than one proposal, there must be bytes
  329|       |	 * left in the payload.
  330|       |	 */
  331|  11.3k|	if (sap->sap_more && left <= sap_length) {
  ------------------
  |  Branch (331:6): [True: 9.78k, False: 1.57k]
  |  Branch (331:23): [True: 839, False: 8.94k]
  ------------------
  332|    839|		log_debug("%s: malformed payload: SA payload too small for "
  333|    839|		    "further proposals (%zu <= %zu)", __func__,
  334|    839|		    left, sap_length);
  335|    839|		return (-1);
  336|    839|	}
  337|  10.5k|	return (0);
  338|  11.3k|}
ikev2_pld_sa:
  343|  28.2k|{
  344|  28.2k|	struct ikev2_sa_proposal	 sap;
  345|  28.2k|	struct iked_proposal		*prop = NULL;
  346|  28.2k|	uint32_t			 spi32;
  347|  28.2k|	uint64_t			 spi = 0, spi64;
  348|  28.2k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  349|  28.2k|	int				 r;
  350|  28.2k|	struct iked_proposals		*props;
  351|  28.2k|	size_t				 total;
  352|       |
  353|  32.6k|	do {
  354|  32.6k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  ------------------
  |  Branch (354:7): [True: 22.0k, False: 10.5k]
  ------------------
  355|  22.0k|			return (-1);
  356|       |
  357|       |		/* Assumed size of the first proposals, including SPI if present. */
  358|  10.5k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  359|       |
  360|  10.5k|		props = &msg->msg_parent->msg_proposals;
  361|       |
  362|  10.5k|		offset += sizeof(sap);
  363|  10.5k|		left -= sizeof(sap);
  364|       |
  365|  10.5k|		if (sap.sap_spisize) {
  ------------------
  |  Branch (365:7): [True: 1.40k, False: 9.11k]
  ------------------
  366|  1.40k|			if (left < sap.sap_spisize) {
  ------------------
  |  Branch (366:8): [True: 646, False: 755]
  ------------------
  367|    646|				log_debug("%s: malformed payload: SPI larger than "
  368|    646|				    "actual payload (%zu < %d)", __func__, left,
  369|    646|				    sap.sap_spisize);
  370|    646|				return (-1);
  371|    646|			}
  372|    755|			if (total < sap.sap_spisize) {
  ------------------
  |  Branch (372:8): [True: 135, False: 620]
  ------------------
  373|    135|				log_debug("%s: malformed payload: SPI larger than "
  374|    135|				    "proposal (%zu < %d)", __func__, total,
  375|    135|				    sap.sap_spisize);
  376|    135|				return (-1);
  377|    135|			}
  378|    620|			switch (sap.sap_spisize) {
  379|    290|			case 4:
  ------------------
  |  Branch (379:4): [True: 290, False: 330]
  ------------------
  380|    290|				memcpy(&spi32, msgbuf + offset, 4);
  381|    290|				spi = betoh32(spi32);
  382|    290|				break;
  383|    200|			case 8:
  ------------------
  |  Branch (383:4): [True: 200, False: 420]
  ------------------
  384|    200|				memcpy(&spi64, msgbuf + offset, 8);
  385|    200|				spi = betoh64(spi64);
  386|    200|				break;
  387|    130|			default:
  ------------------
  |  Branch (387:4): [True: 130, False: 490]
  ------------------
  388|    130|				log_debug("%s: unsupported SPI size %d",
  389|    130|				    __func__, sap.sap_spisize);
  390|    130|				return (-1);
  391|    620|			}
  392|       |
  393|    490|			offset += sap.sap_spisize;
  394|    490|			left -= sap.sap_spisize;
  395|       |
  396|       |			/* Assumed size of the proposal, now without SPI. */
  397|    490|			total -= sap.sap_spisize;
  398|    490|		}
  399|       |
  400|       |		/*
  401|       |		 * As we verified sanity of packet headers, this check will
  402|       |		 * be always false, but just to be sure we keep it.
  403|       |		 */
  404|  9.60k|		if (left < total) {
  ------------------
  |  Branch (404:7): [True: 0, False: 9.60k]
  ------------------
  405|      0|			log_debug("%s: malformed payload: too long for payload "
  406|      0|			    "(%zu < %zu)", __func__, left, total);
  407|      0|			return (-1);
  408|      0|		}
  409|       |
  410|  9.60k|		log_debug("%s: more %d reserved %d length %d"
  411|  9.60k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  412|  9.60k|		    __func__, sap.sap_more, sap.sap_reserved,
  413|  9.60k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  414|  9.60k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  415|  9.60k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  416|       |
  417|  9.60k|		if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (417:7): [True: 69, False: 9.53k]
  ------------------
  418|     69|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  ------------------
  |  Branch (418:8): [True: 69, False: 0]
  ------------------
  419|     69|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  420|     69|				log_debug("%s: invalid proposal", __func__);
  421|     69|				return (-1);
  422|     69|			}
  423|      0|			prop = msg->msg_parent->msg_prop;
  424|      0|			prop->prop_peerspi.spi = spi;
  425|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  426|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  427|       |
  428|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  429|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  430|      0|		}
  431|       |
  432|       |		/*
  433|       |		 * Parse the attached transforms
  434|       |		 */
  435|  9.53k|		if (sap.sap_transforms) {
  ------------------
  |  Branch (435:7): [True: 5.45k, False: 4.08k]
  ------------------
  436|  5.45k|			r = ikev2_pld_xform(env, msg, offset, total);
  437|  5.45k|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (437:8): [True: 0, False: 5.45k]
  |  Branch (437:21): [True: 0, False: 0]
  ------------------
  438|      0|				log_debug("%s: invalid proposal transform",
  439|      0|				    __func__);
  440|       |
  441|       |				/* cleanup and ignore proposal */
  442|      0|				config_free_proposal(props, prop);
  443|      0|				prop = msg->msg_parent->msg_prop = NULL;
  444|  5.45k|			} else if (r != 0) {
  ------------------
  |  Branch (444:15): [True: 4.37k, False: 1.07k]
  ------------------
  445|  4.37k|				log_debug("%s: invalid proposal transforms",
  446|  4.37k|				    __func__);
  447|  4.37k|				return (-1);
  448|  4.37k|			}
  449|  5.45k|		}
  450|       |
  451|  5.16k|		offset += total;
  452|  5.16k|		left -= total;
  453|  5.16k|	} while (sap.sap_more);
  ------------------
  |  Branch (453:11): [True: 4.41k, False: 750]
  ------------------
  454|       |
  455|    750|	return (0);
  456|  28.2k|}
ikev2_validate_xform:
  461|  7.30k|{
  462|  7.30k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  463|  7.30k|	size_t		 xfrm_length;
  464|       |
  465|  7.30k|	if (total < sizeof(*xfrm)) {
  ------------------
  |  Branch (465:6): [True: 625, False: 6.67k]
  ------------------
  466|    625|		log_debug("%s: malformed payload: too short for header "
  467|    625|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  468|    625|		return (-1);
  469|    625|	}
  470|  6.67k|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  471|       |
  472|  6.67k|	xfrm_length = betoh16(xfrm->xfrm_length);
  473|  6.67k|	if (xfrm_length < sizeof(*xfrm)) {
  ------------------
  |  Branch (473:6): [True: 1.12k, False: 5.54k]
  ------------------
  474|  1.12k|		log_debug("%s: malformed payload: shorter than minimum header "
  475|  1.12k|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  476|  1.12k|		return (-1);
  477|  1.12k|	}
  478|  5.54k|	if (total < xfrm_length) {
  ------------------
  |  Branch (478:6): [True: 644, False: 4.90k]
  ------------------
  479|    644|		log_debug("%s: malformed payload: too long for payload size "
  480|    644|		    "(%zu < %zu)", __func__, total, xfrm_length);
  481|    644|		return (-1);
  482|    644|	}
  483|       |
  484|  4.90k|	return (0);
  485|  5.54k|}
ikev2_pld_xform:
  490|  7.30k|{
  491|  7.30k|	struct ikev2_transform		 xfrm;
  492|  7.30k|	char				 id[BUFSIZ];
  493|  7.30k|	int				 ret = 0;
  494|  7.30k|	int				 r;
  495|  7.30k|	size_t				 xfrm_length;
  496|       |
  497|  7.30k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  ------------------
  |  Branch (497:6): [True: 2.39k, False: 4.90k]
  ------------------
  498|  2.39k|		return (-1);
  499|       |
  500|  4.90k|	xfrm_length = betoh16(xfrm.xfrm_length);
  501|       |
  502|  4.90k|	switch (xfrm.xfrm_type) {
  503|  1.07k|	case IKEV2_XFORMTYPE_ENCR:
  ------------------
  |  |  156|  1.07k|#define IKEV2_XFORMTYPE_ENCR		1	/* Encryption */
  ------------------
  |  Branch (503:2): [True: 1.07k, False: 3.82k]
  ------------------
  504|  1.07k|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  505|  1.07k|		    ikev2_xformencr_map), sizeof(id));
  506|  1.07k|		break;
  507|    777|	case IKEV2_XFORMTYPE_PRF:
  ------------------
  |  |  157|    777|#define IKEV2_XFORMTYPE_PRF		2	/* Pseudo-Random Function */
  ------------------
  |  Branch (507:2): [True: 777, False: 4.12k]
  ------------------
  508|    777|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  509|    777|		    ikev2_xformprf_map), sizeof(id));
  510|    777|		break;
  511|    154|	case IKEV2_XFORMTYPE_INTEGR:
  ------------------
  |  |  158|    154|#define IKEV2_XFORMTYPE_INTEGR		3	/* Integrity Algorithm */
  ------------------
  |  Branch (511:2): [True: 154, False: 4.75k]
  ------------------
  512|    154|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  513|    154|		    ikev2_xformauth_map), sizeof(id));
  514|    154|		break;
  515|    567|	case IKEV2_XFORMTYPE_DH:
  ------------------
  |  |  159|    567|#define IKEV2_XFORMTYPE_DH		4	/* Diffie-Hellman Group */
  ------------------
  |  Branch (515:2): [True: 567, False: 4.33k]
  ------------------
  516|    567|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  517|    567|		    ikev2_xformdh_map), sizeof(id));
  518|    567|		break;
  519|  1.00k|	case IKEV2_XFORMTYPE_ESN:
  ------------------
  |  |  160|  1.00k|#define IKEV2_XFORMTYPE_ESN		5	/* Extended Sequence Numbers */
  ------------------
  |  Branch (519:2): [True: 1.00k, False: 3.90k]
  ------------------
  520|  1.00k|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  521|  1.00k|		    ikev2_xformesn_map), sizeof(id));
  522|  1.00k|		break;
  523|  1.32k|	default:
  ------------------
  |  Branch (523:2): [True: 1.32k, False: 3.57k]
  ------------------
  524|  1.32k|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  525|  1.32k|		break;
  526|  4.90k|	}
  527|       |
  528|  4.90k|	log_debug("%s: more %d reserved %d length %zu"
  529|  4.90k|	    " type %s id %s",
  530|  4.90k|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  531|  4.90k|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  532|       |
  533|       |	/*
  534|       |	 * Parse transform attributes, if available
  535|       |	 */
  536|  4.90k|	msg->msg_attrlength = 0;
  537|  4.90k|	if (xfrm_length > sizeof(xfrm)) {
  ------------------
  |  Branch (537:6): [True: 2.34k, False: 2.56k]
  ------------------
  538|  2.34k|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  ------------------
  |  Branch (538:7): [True: 1.80k, False: 540]
  ------------------
  539|  2.34k|		    xfrm_length - sizeof(xfrm)) != 0) {
  540|  1.80k|			return (-1);
  541|  1.80k|		}
  542|  2.34k|	}
  543|       |
  544|  3.10k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (544:6): [True: 0, False: 3.10k]
  ------------------
  545|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  546|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  547|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  548|      0|		if (r == -1) {
  ------------------
  |  Branch (548:7): [True: 0, False: 0]
  ------------------
  549|      0|			log_debug("%s: failed to add transform: alloc error",
  550|      0|			    __func__);
  551|      0|			return (r);
  552|      0|		} else if (r == -2) {
  ------------------
  |  Branch (552:14): [True: 0, False: 0]
  ------------------
  553|      0|			log_debug("%s: failed to add transform: unknown type",
  554|      0|			    __func__);
  555|      0|			return (r);
  556|      0|		}
  557|      0|	}
  558|       |
  559|       |	/* Next transform */
  560|  3.10k|	offset += xfrm_length;
  561|  3.10k|	total -= xfrm_length;
  562|  3.10k|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  ------------------
  |  |  154|  3.10k|#define IKEV2_XFORM_MORE		3
  ------------------
  |  Branch (562:6): [True: 1.85k, False: 1.25k]
  ------------------
  563|  1.85k|		ret = ikev2_pld_xform(env, msg, offset, total);
  564|  1.25k|	else if (total != 0) {
  ------------------
  |  Branch (564:11): [True: 177, False: 1.07k]
  ------------------
  565|       |		/* No more transforms but still some data left. */
  566|    177|		log_debug("%s: less data than specified, %zu bytes left",
  567|    177|		    __func__, total);
  568|    177|		ret = -1;
  569|    177|	}
  570|       |
  571|  3.10k|	return (ret);
  572|  3.10k|}
ikev2_validate_attr:
  577|  29.4k|{
  578|  29.4k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  579|       |
  580|  29.4k|	if (total < sizeof(*attr)) {
  ------------------
  |  Branch (580:6): [True: 817, False: 28.6k]
  ------------------
  581|    817|		log_debug("%s: malformed payload: too short for header "
  582|    817|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  583|    817|		return (-1);
  584|    817|	}
  585|  28.6k|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  586|       |
  587|  28.6k|	return (0);
  588|  29.4k|}
ikev2_pld_attr:
  593|  29.4k|{
  594|  29.4k|	struct ikev2_attribute		 attr;
  595|  29.4k|	unsigned int			 type;
  596|  29.4k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  597|  29.4k|	int				 ret = 0;
  598|  29.4k|	size_t				 attr_length;
  599|       |
  600|  29.4k|	if (ikev2_validate_attr(msg, offset, total, &attr))
  ------------------
  |  Branch (600:6): [True: 817, False: 28.6k]
  ------------------
  601|    817|		return (-1);
  602|       |
  603|  28.6k|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  ------------------
  |  |  279|  28.6k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  604|       |
  605|  28.6k|	log_debug("%s: attribute type %s length %d total %zu",
  606|  28.6k|	    __func__, print_map(type, ikev2_attrtype_map),
  607|  28.6k|	    betoh16(attr.attr_length), total);
  608|       |
  609|  28.6k|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  ------------------
  |  |  279|  28.6k|#define IKEV2_ATTRAF_TV			0x8000	/* Type-Value format */
  ------------------
  |  Branch (609:6): [True: 22.1k, False: 6.49k]
  ------------------
  610|       |		/* Type-Value attribute */
  611|  22.1k|		offset += sizeof(attr);
  612|  22.1k|		total -= sizeof(attr);
  613|       |
  614|  22.1k|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  ------------------
  |  |  281|  22.1k|#define IKEV2_ATTRTYPE_KEY_LENGTH	14	/* Key length */
  ------------------
  |  Branch (614:7): [True: 47, False: 22.0k]
  ------------------
  615|     47|			msg->msg_attrlength = betoh16(attr.attr_length);
  616|  22.1k|	} else {
  617|       |		/* Type-Length-Value attribute */
  618|  6.49k|		attr_length = betoh16(attr.attr_length);
  619|  6.49k|		if (attr_length < sizeof(attr)) {
  ------------------
  |  Branch (619:7): [True: 543, False: 5.94k]
  ------------------
  620|    543|			log_debug("%s: malformed payload: shorter than "
  621|    543|			    "minimum header size (%zu < %zu)", __func__,
  622|    543|			    attr_length, sizeof(attr));
  623|    543|			return (-1);
  624|    543|		}
  625|  5.94k|		if (total < attr_length) {
  ------------------
  |  Branch (625:7): [True: 443, False: 5.50k]
  ------------------
  626|    443|			log_debug("%s: malformed payload: attribute larger "
  627|    443|			    "than actual payload (%zu < %zu)", __func__,
  628|    443|			    total, attr_length);
  629|    443|			return (-1);
  630|    443|		}
  631|  5.50k|		print_hex(msgbuf, offset + sizeof(attr),
  632|  5.50k|		    attr_length - sizeof(attr));
  633|  5.50k|		offset += attr_length;
  634|  5.50k|		total -= attr_length;
  635|  5.50k|	}
  636|       |
  637|  27.6k|	if (total > 0) {
  ------------------
  |  Branch (637:6): [True: 27.0k, False: 540]
  ------------------
  638|       |		/* Next attribute */
  639|  27.0k|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  640|  27.0k|	}
  641|       |
  642|  27.6k|	return (ret);
  643|  28.6k|}
ikev2_validate_ke:
  648|  8.28k|{
  649|  8.28k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  650|       |
  651|  8.28k|	if (left < sizeof(*kex)) {
  ------------------
  |  Branch (651:6): [True: 5.12k, False: 3.16k]
  ------------------
  652|  5.12k|		log_debug("%s: malformed payload: too short for header "
  653|  5.12k|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  654|  5.12k|		return (-1);
  655|  5.12k|	}
  656|  3.16k|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  657|       |
  658|  3.16k|	return (0);
  659|  8.28k|}
ikev2_pld_ke:
  664|  8.28k|{
  665|  8.28k|	struct ikev2_keyexchange	 kex;
  666|  8.28k|	uint8_t				*buf;
  667|  8.28k|	size_t				 len;
  668|  8.28k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  669|       |
  670|  8.28k|	if (ikev2_validate_ke(msg, offset, left, &kex))
  ------------------
  |  Branch (670:6): [True: 5.12k, False: 3.16k]
  ------------------
  671|  5.12k|		return (-1);
  672|       |
  673|  3.16k|	log_debug("%s: dh group %s reserved %d", __func__,
  674|  3.16k|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  675|  3.16k|	    betoh16(kex.kex_reserved));
  676|       |
  677|  3.16k|	buf = msgbuf + offset + sizeof(kex);
  678|  3.16k|	len = left - sizeof(kex);
  679|       |
  680|  3.16k|	if (len == 0) {
  ------------------
  |  Branch (680:6): [True: 1.41k, False: 1.75k]
  ------------------
  681|  1.41k|		log_debug("%s: malformed payload: no KE data given", __func__);
  682|  1.41k|		return (-1);
  683|  1.41k|	}
  684|       |
  685|  1.75k|	print_hex(buf, 0, len);
  686|       |
  687|  1.75k|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (687:6): [True: 27, False: 1.72k]
  ------------------
  688|     27|		if (msg->msg_parent->msg_ke != NULL) {
  ------------------
  |  Branch (688:7): [True: 4, False: 23]
  ------------------
  689|      4|			log_info("%s: duplicate KE payload", __func__);
  690|      4|			return (-1);
  691|      4|		}
  692|     23|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (692:7): [True: 0, False: 23]
  ------------------
  693|      0|			log_debug("%s: failed to get exchange", __func__);
  694|      0|			return (-1);
  695|      0|		}
  696|     23|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  697|     23|	}
  698|       |
  699|  1.74k|	return (0);
  700|  1.75k|}
ikev2_validate_id:
  705|  19.4k|{
  706|  19.4k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  707|       |
  708|  19.4k|	if (left < sizeof(*id)) {
  ------------------
  |  Branch (708:6): [True: 7.63k, False: 11.8k]
  ------------------
  709|  7.63k|		log_debug("%s: malformed payload: too short for header "
  710|  7.63k|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  711|  7.63k|		return (-1);
  712|  7.63k|	}
  713|  11.8k|	memcpy(id, msgbuf + offset, sizeof(*id));
  714|       |
  715|  11.8k|	if (id->id_type == IKEV2_ID_NONE) {
  ------------------
  |  |  397|  11.8k|#define IKEV2_ID_NONE		0	/* No ID */
  ------------------
  |  Branch (715:6): [True: 6.46k, False: 5.38k]
  ------------------
  716|  6.46k|		log_debug("%s: malformed payload: invalid ID type.",
  717|  6.46k|		    __func__);
  718|  6.46k|		return (-1);
  719|  6.46k|	}
  720|       |
  721|  5.38k|	return (0);
  722|  11.8k|}
ikev2_pld_id:
  727|  19.4k|{
  728|  19.4k|	uint8_t				*ptr;
  729|  19.4k|	struct ikev2_id			 id;
  730|  19.4k|	size_t				 len;
  731|  19.4k|	struct iked_id			*idp, idb;
  732|  19.4k|	const struct iked_sa		*sa = msg->msg_sa;
  733|  19.4k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  734|  19.4k|	char				 idstr[IKED_ID_SIZE];
  735|       |
  736|  19.4k|	if (ikev2_validate_id(msg, offset, left, &id))
  ------------------
  |  Branch (736:6): [True: 14.0k, False: 5.38k]
  ------------------
  737|  14.0k|		return (-1);
  738|       |
  739|  5.38k|	bzero(&idb, sizeof(idb));
  740|       |
  741|       |	/* Don't strip the Id payload header */
  742|  5.38k|	ptr = msgbuf + offset;
  743|  5.38k|	len = left;
  744|       |
  745|  5.38k|	idb.id_type = id.id_type;
  746|  5.38k|	idb.id_offset = sizeof(id);
  747|  5.38k|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  ------------------
  |  Branch (747:6): [True: 0, False: 5.38k]
  ------------------
  748|      0|		return (-1);
  749|       |
  750|  5.38k|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  ------------------
  |  Branch (750:6): [True: 0, False: 5.38k]
  ------------------
  751|      0|		ibuf_free(idb.id_buf);
  752|      0|		log_debug("%s: malformed id", __func__);
  753|      0|		return (-1);
  754|      0|	}
  755|       |
  756|  5.38k|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  757|       |
  758|  5.38k|	if (!ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (758:6): [True: 5.28k, False: 101]
  ------------------
  759|  5.28k|		ibuf_free(idb.id_buf);
  760|  5.28k|		return (0);
  761|  5.28k|	}
  762|       |
  763|    101|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  ------------------
  |  |   96|      0|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (763:8): [True: 0, False: 101]
  |  Branch (763:35): [True: 0, False: 0]
  ------------------
  764|    101|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  ------------------
  |  |   95|    101|#define IKEV2_PAYLOAD_IDi	35	/* Identification - Initiator */
  ------------------
  |  Branch (764:7): [True: 101, False: 0]
  |  Branch (764:35): [True: 59, False: 42]
  ------------------
  765|     59|		idp = &msg->msg_parent->msg_peerid;
  766|     42|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  ------------------
  |  |   96|     42|#define IKEV2_PAYLOAD_IDr	36	/* Identification - Responder */
  ------------------
  |  Branch (766:11): [True: 42, False: 0]
  |  Branch (766:39): [True: 42, False: 0]
  ------------------
  767|     42|		idp = &msg->msg_parent->msg_localid;
  768|      0|	else {
  769|      0|		ibuf_free(idb.id_buf);
  770|      0|		log_debug("%s: unexpected id payload", __func__);
  771|      0|		return (0);
  772|      0|	}
  773|       |
  774|    101|	if (idp->id_type) {
  ------------------
  |  Branch (774:6): [True: 16, False: 85]
  ------------------
  775|     16|		ibuf_free(idb.id_buf);
  776|     16|		log_debug("%s: duplicate id payload", __func__);
  777|     16|		return (-1);
  778|     16|	}
  779|       |
  780|     85|	idp->id_buf = idb.id_buf;
  781|     85|	idp->id_offset = idb.id_offset;
  782|     85|	idp->id_type = idb.id_type;
  783|       |
  784|     85|	return (0);
  785|    101|}
ikev2_validate_cert:
  790|  5.80k|{
  791|  5.80k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  792|       |
  793|  5.80k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (793:6): [True: 1.46k, False: 4.34k]
  ------------------
  794|  1.46k|		log_debug("%s: malformed payload: too short for header "
  795|  1.46k|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  796|  1.46k|		return (-1);
  797|  1.46k|	}
  798|  4.34k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  799|  4.34k|	if (cert->cert_type == IKEV2_CERT_NONE) {
  ------------------
  |  |  418|  4.34k|#define IKEV2_CERT_NONE			0	/* None */
  ------------------
  |  Branch (799:6): [True: 982, False: 3.36k]
  ------------------
  800|    982|		log_debug("%s: malformed payload: invalid cert type", __func__);
  801|    982|		return (-1);
  802|    982|	}
  803|       |
  804|  3.36k|	return (0);
  805|  4.34k|}
ikev2_pld_cert:
  810|  5.80k|{
  811|  5.80k|	struct ikev2_cert		 cert;
  812|  5.80k|	uint8_t				*buf;
  813|  5.80k|	size_t				 len;
  814|  5.80k|	struct iked_id			*certid;
  815|  5.80k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  816|  5.80k|	const struct iked_sa		*sa = msg->msg_sa;
  817|  5.80k|	int				 i;
  818|       |
  819|  5.80k|	if (ikev2_validate_cert(msg, offset, left, &cert))
  ------------------
  |  Branch (819:6): [True: 2.44k, False: 3.36k]
  ------------------
  820|  2.44k|		return (-1);
  821|  3.36k|	offset += sizeof(cert);
  822|       |
  823|  3.36k|	buf = msgbuf + offset;
  824|  3.36k|	len = left - sizeof(cert);
  825|       |
  826|  3.36k|	log_debug("%s: type %s length %zu",
  827|  3.36k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  828|       |
  829|  3.36k|	print_hex(buf, 0, len);
  830|       |
  831|  3.36k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (831:6): [True: 1.41k, False: 1.94k]
  ------------------
  832|  1.41k|		return (0);
  833|       |
  834|       |	/* do not accept internal encoding in the wire */
  835|  1.94k|	if (cert.cert_type == IKEV2_CERT_BUNDLE) {
  ------------------
  |  |  438|  1.94k|#define IKEV2_CERT_BUNDLE		254	/* Private */
  ------------------
  |  Branch (835:6): [True: 290, False: 1.65k]
  ------------------
  836|    290|		log_debug("%s: ignoring IKEV2_CERT_BUNDLE",
  837|    290|		   SPI_SA(sa, __func__));
  ------------------
  |  | 1105|    290|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|    290|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  838|    290|		return (0);
  839|    290|	}
  840|       |
  841|  1.65k|	certid = &msg->msg_parent->msg_cert;
  842|  1.65k|	if (certid->id_type) {
  ------------------
  |  Branch (842:6): [True: 1.35k, False: 306]
  ------------------
  843|       |		/* try to set supplemental certs */
  844|  4.10k|		for (i = 0; i < IKED_SCERT_MAX; i++) {
  ------------------
  |  |  477|  4.10k|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (844:15): [True: 3.35k, False: 748]
  ------------------
  845|  3.35k|			certid = &msg->msg_parent->msg_scert[i];
  846|  3.35k|			if (!certid->id_type)
  ------------------
  |  Branch (846:8): [True: 605, False: 2.75k]
  ------------------
  847|    605|				break;
  848|  3.35k|		}
  849|  1.35k|		if (certid->id_type) {
  ------------------
  |  Branch (849:7): [True: 748, False: 605]
  ------------------
  850|    748|			log_debug("%s: too many cert payloads, ignoring",
  851|    748|			   SPI_SA(sa, __func__));
  ------------------
  |  | 1105|    748|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|    748|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
  852|    748|			return (0);
  853|    748|		}
  854|  1.35k|	}
  855|       |
  856|    911|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (856:6): [True: 0, False: 911]
  ------------------
  857|      0|		log_debug("%s: failed to save cert", __func__);
  858|      0|		return (-1);
  859|      0|	}
  860|    911|	certid->id_type = cert.cert_type;
  861|    911|	certid->id_offset = 0;
  862|       |
  863|    911|	return (0);
  864|    911|}
ikev2_validate_certreq:
  869|  12.1k|{
  870|  12.1k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  871|       |
  872|  12.1k|	if (left < sizeof(*cert)) {
  ------------------
  |  Branch (872:6): [True: 2.65k, False: 9.48k]
  ------------------
  873|  2.65k|		log_debug("%s: malformed payload: too short for header "
  874|  2.65k|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  875|  2.65k|		return (-1);
  876|  2.65k|	}
  877|  9.48k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  878|       |
  879|  9.48k|	return (0);
  880|  12.1k|}
ikev2_pld_certreq:
  885|  12.1k|{
  886|  12.1k|	struct ikev2_cert		 cert;
  887|  12.1k|	struct iked_certreq		*cr;
  888|  12.1k|	uint8_t				*buf;
  889|  12.1k|	ssize_t				 len;
  890|  12.1k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  891|       |
  892|  12.1k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  ------------------
  |  Branch (892:6): [True: 2.65k, False: 9.48k]
  ------------------
  893|  2.65k|		return (-1);
  894|  9.48k|	offset += sizeof(cert);
  895|       |
  896|  9.48k|	buf = msgbuf + offset;
  897|  9.48k|	len = left - sizeof(cert);
  898|       |
  899|  9.48k|	log_debug("%s: type %s length %zd",
  900|  9.48k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  901|       |
  902|  9.48k|	print_hex(buf, 0, len);
  903|       |
  904|  9.48k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (904:6): [True: 8.30k, False: 1.18k]
  ------------------
  905|  8.30k|		return (0);
  906|       |
  907|  1.18k|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  ------------------
  |  |  422|  1.18k|#define IKEV2_CERT_X509_CERT		4	/* RFC7296 */
  ------------------
  |  Branch (907:6): [True: 321, False: 864]
  ------------------
  908|    321|		if (len == 0) {
  ------------------
  |  Branch (908:7): [True: 279, False: 42]
  ------------------
  909|    279|			log_info("%s: invalid length 0", __func__);
  910|    279|			return (0);
  911|    279|		}
  912|     42|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  ------------------
  |  Branch (912:7): [True: 9, False: 33]
  ------------------
  913|      9|			log_info("%s: invalid certificate request",
  914|      9|			    __func__);
  915|      9|			return (-1);
  916|      9|		}
  917|     42|	}
  918|       |
  919|    897|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  ------------------
  |  Branch (919:6): [True: 0, False: 897]
  ------------------
  920|      0|		log_info("%s: failed to allocate certreq.", __func__);
  921|      0|		return (-1);
  922|      0|	}
  923|    897|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (923:6): [True: 0, False: 897]
  ------------------
  924|      0|		log_info("%s: failed to allocate buffer.", __func__);
  925|      0|		free(cr);
  926|      0|		return (-1);
  927|      0|	}
  928|    897|	cr->cr_type = cert.cert_type;
  929|    897|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  ------------------
  |  |  296|    897|#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\
  |  |  297|    897|	(elm)->field.sqe_next = NULL;					\
  |  |  298|    897|	*(head)->sqh_last = (elm);					\
  |  |  299|    897|	(head)->sqh_last = &(elm)->field.sqe_next;			\
  |  |  300|    897|} while (0)
  |  |  ------------------
  |  |  |  Branch (300:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  930|       |
  931|    897|	return (0);
  932|    897|}
ikev2_validate_auth:
  937|  8.17k|{
  938|  8.17k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  939|       |
  940|  8.17k|	if (left < sizeof(*auth)) {
  ------------------
  |  Branch (940:6): [True: 1.85k, False: 6.31k]
  ------------------
  941|  1.85k|		log_debug("%s: malformed payload: too short for header "
  942|  1.85k|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  943|  1.85k|		return (-1);
  944|  1.85k|	}
  945|  6.31k|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  946|       |
  947|  6.31k|	if (auth->auth_method == 0) {
  ------------------
  |  Branch (947:6): [True: 3.36k, False: 2.95k]
  ------------------
  948|  3.36k|		log_info("%s: malformed payload: invalid auth method",
  949|  3.36k|		    __func__);
  950|  3.36k|		return (-1);
  951|  3.36k|	}
  952|       |
  953|  2.95k|	return (0);
  954|  6.31k|}
ikev2_pld_auth:
  959|  8.17k|{
  960|  8.17k|	struct ikev2_auth		 auth;
  961|  8.17k|	struct iked_id			*idp;
  962|  8.17k|	uint8_t				*buf;
  963|  8.17k|	size_t				 len;
  964|  8.17k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  965|       |
  966|  8.17k|	if (ikev2_validate_auth(msg, offset, left, &auth))
  ------------------
  |  Branch (966:6): [True: 5.21k, False: 2.95k]
  ------------------
  967|  5.21k|		return (-1);
  968|  2.95k|	offset += sizeof(auth);
  969|       |
  970|  2.95k|	buf = msgbuf + offset;
  971|  2.95k|	len = left - sizeof(auth);
  972|       |
  973|  2.95k|	log_debug("%s: method %s length %zu",
  974|  2.95k|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  975|       |
  976|  2.95k|	print_hex(buf, 0, len);
  977|       |
  978|  2.95k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (978:6): [True: 2.91k, False: 42]
  ------------------
  979|  2.91k|		return (0);
  980|       |
  981|     42|	idp = &msg->msg_parent->msg_auth;
  982|     42|	if (idp->id_type) {
  ------------------
  |  Branch (982:6): [True: 1, False: 41]
  ------------------
  983|      1|		log_debug("%s: duplicate auth payload", __func__);
  984|      1|		return (-1);
  985|      1|	}
  986|       |
  987|     41|	ibuf_free(idp->id_buf);
  988|     41|	idp->id_type = auth.auth_method;
  989|     41|	idp->id_offset = 0;
  990|     41|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  ------------------
  |  Branch (990:6): [True: 0, False: 41]
  ------------------
  991|      0|		return (-1);
  992|       |
  993|     41|	return (0);
  994|     41|}
ikev2_pld_nonce:
  999|    242|{
 1000|    242|	size_t		 len;
 1001|    242|	uint8_t		*buf;
 1002|    242|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1003|       |
 1004|    242|	buf = msgbuf + offset;
 1005|    242|	len = left;
 1006|       |
 1007|    242|	if (len == 0) {
  ------------------
  |  Branch (1007:6): [True: 82, False: 160]
  ------------------
 1008|     82|		log_debug("%s: malformed payload: no NONCE given", __func__);
 1009|     82|		return (-1);
 1010|     82|	}
 1011|       |
 1012|    160|	print_hex(buf, 0, len);
 1013|       |
 1014|    160|	if (ikev2_msg_frompeer(msg)) {
  ------------------
  |  Branch (1014:6): [True: 61, False: 99]
  ------------------
 1015|     61|		if (msg->msg_parent->msg_nonce != NULL) {
  ------------------
  |  Branch (1015:7): [True: 19, False: 42]
  ------------------
 1016|     19|			log_info("%s: duplicate NONCE payload", __func__);
 1017|     19|			return (-1);
 1018|     19|		}
 1019|     42|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  ------------------
  |  Branch (1019:7): [True: 0, False: 42]
  ------------------
 1020|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1021|      0|			return (-1);
 1022|      0|		}
 1023|     42|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1024|     42|	}
 1025|       |
 1026|    141|	return (0);
 1027|    160|}
ikev2_validate_notify:
 1032|  32.4k|{
 1033|  32.4k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1034|       |
 1035|  32.4k|	if (left < sizeof(*n)) {
  ------------------
  |  Branch (1035:6): [True: 3.51k, False: 28.8k]
  ------------------
 1036|  3.51k|		log_debug("%s: malformed payload: too short for header "
 1037|  3.51k|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1038|  3.51k|		return (-1);
 1039|  3.51k|	}
 1040|  28.8k|	memcpy(n, msgbuf + offset, sizeof(*n));
 1041|       |
 1042|  28.8k|	return (0);
 1043|  32.4k|}
ikev2_pld_notify:
 1048|  32.4k|{
 1049|  32.4k|	struct ikev2_notify	 n;
 1050|  32.4k|	const struct iked_sa	*sa = msg->msg_sa;
 1051|  32.4k|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1052|  32.4k|	uint32_t		 spi32;
 1053|  32.4k|	uint64_t		 spi64;
 1054|  32.4k|	struct iked_spi		*rekey;
 1055|  32.4k|	uint16_t		 type;
 1056|  32.4k|	uint16_t		 signature_hash;
 1057|       |
 1058|  32.4k|	if (ikev2_validate_notify(msg, offset, left, &n))
  ------------------
  |  Branch (1058:6): [True: 3.51k, False: 28.8k]
  ------------------
 1059|  3.51k|		return (-1);
 1060|  28.8k|	type = betoh16(n.n_type);
 1061|       |
 1062|  28.8k|	log_debug("%s: protoid %s spisize %d type %s",
 1063|  28.8k|	    __func__,
 1064|  28.8k|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1065|  28.8k|	    print_map(type, ikev2_n_map));
 1066|       |
 1067|  28.8k|	left -= sizeof(n);
 1068|  28.8k|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
  ------------------
  |  Branch (1068:6): [True: 0, False: 28.8k]
  ------------------
 1069|      0|		return (-1);
 1070|       |
 1071|  28.8k|	print_hex(buf, 0, left);
 1072|       |
 1073|  28.8k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1073:6): [True: 1.44k, False: 27.4k]
  ------------------
 1074|  1.44k|		return (0);
 1075|       |
 1076|  27.4k|	switch (type) {
  ------------------
  |  Branch (1076:10): [True: 2.07k, False: 25.3k]
  ------------------
 1077|  3.05k|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
  ------------------
  |  |  330|  3.05k|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1077:2): [True: 3.05k, False: 24.3k]
  ------------------
 1078|  23.0k|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
  ------------------
  |  |  331|  23.0k|#define IKEV2_N_NAT_DETECTION_DESTINATION_IP	16389	/* RFC7296 */
  ------------------
  |  Branch (1078:2): [True: 19.9k, False: 7.49k]
  ------------------
 1079|  23.0k|		if (left != sizeof(md)) {
  ------------------
  |  Branch (1079:7): [True: 16, False: 22.9k]
  ------------------
 1080|     16|			log_debug("%s: malformed payload: hash size mismatch"
 1081|     16|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1082|     16|			return (-1);
 1083|     16|		}
 1084|  22.9k|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
  ------------------
  |  Branch (1084:7): [True: 0, False: 22.9k]
  ------------------
 1085|  22.9k|		    ikev2_msg_frompeer(msg)) == -1)
 1086|      0|			return (-1);
 1087|  22.9k|		if (memcmp(buf, md, left) != 0) {
  ------------------
  |  Branch (1087:7): [True: 22.9k, False: 0]
  ------------------
 1088|  22.9k|			log_debug("%s: %s detected NAT", __func__,
 1089|  22.9k|			    print_map(type, ikev2_n_map));
 1090|  22.9k|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
  ------------------
  |  |  330|  22.9k|#define IKEV2_N_NAT_DETECTION_SOURCE_IP		16388	/* RFC7296 */
  ------------------
  |  Branch (1090:8): [True: 3.05k, False: 19.9k]
  ------------------
 1091|  3.05k|				msg->msg_parent->msg_nat_detected
 1092|  3.05k|				    |= IKED_MSG_NAT_SRC_IP;
  ------------------
  |  |  687|  3.05k|#define IKED_MSG_NAT_SRC_IP				0x01
  ------------------
 1093|  19.9k|			else
 1094|  19.9k|				msg->msg_parent->msg_nat_detected
 1095|  19.9k|				    |= IKED_MSG_NAT_DST_IP;
  ------------------
  |  |  688|  19.9k|#define IKED_MSG_NAT_DST_IP				0x02
  ------------------
 1096|  22.9k|		}
 1097|  22.9k|		print_hex(md, 0, sizeof(md));
 1098|       |		/* remember for MOBIKE */
 1099|  22.9k|		msg->msg_parent->msg_natt_rcvd = 1;
 1100|  22.9k|		break;
 1101|      6|	case IKEV2_N_AUTHENTICATION_FAILED:
  ------------------
  |  |  314|      6|#define IKEV2_N_AUTHENTICATION_FAILED		24	/* RFC7296 */
  ------------------
  |  Branch (1101:2): [True: 6, False: 27.4k]
  ------------------
 1102|      6|		if (!msg->msg_e) {
  ------------------
  |  Branch (1102:7): [True: 0, False: 6]
  ------------------
 1103|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1104|      0|			    __func__);
 1105|      0|			return (-1);
 1106|      0|		}
 1107|       |		/*
 1108|       |		 * If we are the responder, then we only accept
 1109|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1110|       |		 * If we are the initiator, the peer cannot be authenticated.
 1111|       |		 */
 1112|      6|		if (!sa->sa_hdr.sh_initiator) {
  ------------------
  |  Branch (1112:7): [True: 6, False: 0]
  ------------------
 1113|      6|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      6|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1113:8): [True: 6, False: 0]
  ------------------
 1114|      6|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1115|      6|				    " from unauthenticated initiator",
 1116|      6|				    __func__);
 1117|      6|				return (-1);
 1118|      6|			}
 1119|      6|		} else {
 1120|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
  ------------------
  |  |   41|      0|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1120:8): [True: 0, False: 0]
  ------------------
 1121|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1122|      0|				    " from authenticated responder",
 1123|      0|				    __func__);
 1124|      0|				return (-1);
 1125|      0|			}
 1126|      0|		}
 1127|      0|		msg->msg_parent->msg_flags
 1128|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
  ------------------
  |  |  695|      0|#define IKED_MSG_FLAGS_AUTHENTICATION_FAILED		0x0020
  ------------------
 1129|      0|		break;
 1130|    135|	case IKEV2_N_INVALID_KE_PAYLOAD:
  ------------------
  |  |  313|    135|#define IKEV2_N_INVALID_KE_PAYLOAD		17	/* RFC7296 */
  ------------------
  |  Branch (1130:2): [True: 135, False: 27.3k]
  ------------------
 1131|    135|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
  ------------------
  |  |   41|    135|#define IKEV2_STATE_VALID		7	/* authenticated AND validated certs */
  ------------------
  |  Branch (1131:7): [True: 0, False: 135]
  ------------------
 1132|    135|		    !msg->msg_e) {
  ------------------
  |  Branch (1132:7): [True: 0, False: 0]
  ------------------
 1133|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1134|      0|			    __func__);
 1135|      0|			return (-1);
 1136|      0|		}
 1137|    135|		if (left != sizeof(msg->msg_parent->msg_group)) {
  ------------------
  |  Branch (1137:7): [True: 4, False: 131]
  ------------------
 1138|      4|			log_debug("%s: malformed payload: group size mismatch"
 1139|      4|			    " (%zu != %zu)", __func__, left,
 1140|      4|			    sizeof(msg->msg_parent->msg_group));
 1141|      4|			return (-1);
 1142|      4|		}
 1143|    131|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1144|    131|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
  ------------------
  |  |  696|    131|#define IKED_MSG_FLAGS_INVALID_KE			0x0040
  ------------------
 1145|    131|		break;
 1146|    241|	case IKEV2_N_NO_ADDITIONAL_SAS:
  ------------------
  |  |  316|    241|#define IKEV2_N_NO_ADDITIONAL_SAS		35	/* RFC7296 */
  ------------------
  |  Branch (1146:2): [True: 241, False: 27.1k]
  ------------------
 1147|    241|		if (!msg->msg_e) {
  ------------------
  |  Branch (1147:7): [True: 0, False: 241]
  ------------------
 1148|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1149|      0|			    __func__);
 1150|      0|			return (-1);
 1151|      0|		}
 1152|    241|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
  ------------------
  |  |  694|    241|#define IKED_MSG_FLAGS_NO_ADDITIONAL_SAS		0x0010
  ------------------
 1153|    241|		break;
 1154|     75|	case IKEV2_N_REKEY_SA:
  ------------------
  |  |  335|     75|#define IKEV2_N_REKEY_SA			16393	/* RFC7296 */
  ------------------
  |  Branch (1154:2): [True: 75, False: 27.3k]
  ------------------
 1155|     75|		if (!msg->msg_e) {
  ------------------
  |  Branch (1155:7): [True: 0, False: 75]
  ------------------
 1156|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1157|      0|			return (-1);
 1158|      0|		}
 1159|     75|		if (left != n.n_spisize) {
  ------------------
  |  Branch (1159:7): [True: 5, False: 70]
  ------------------
 1160|      5|			log_debug("%s: malformed notification", __func__);
 1161|      5|			return (-1);
 1162|      5|		}
 1163|     70|		rekey = &msg->msg_parent->msg_rekey;
 1164|     70|		if (rekey->spi != 0) {
  ------------------
  |  Branch (1164:7): [True: 5, False: 65]
  ------------------
 1165|      5|			log_debug("%s: rekeying of multiple SAs not supported",
 1166|      5|			    __func__);
 1167|      5|			return (-1);
 1168|      5|		}
 1169|     65|		switch (n.n_spisize) {
 1170|     59|		case 4:
  ------------------
  |  Branch (1170:3): [True: 59, False: 6]
  ------------------
 1171|     59|			memcpy(&spi32, buf, left);
 1172|     59|			rekey->spi = betoh32(spi32);
 1173|     59|			break;
 1174|      3|		case 8:
  ------------------
  |  Branch (1174:3): [True: 3, False: 62]
  ------------------
 1175|      3|			memcpy(&spi64, buf, left);
 1176|      3|			rekey->spi = betoh64(spi64);
 1177|      3|			break;
 1178|      3|		default:
  ------------------
  |  Branch (1178:3): [True: 3, False: 62]
  ------------------
 1179|      3|			log_debug("%s: invalid spi size %d", __func__,
 1180|      3|			    n.n_spisize);
 1181|      3|			return (-1);
 1182|     65|		}
 1183|     62|		rekey->spi_size = n.n_spisize;
 1184|     62|		rekey->spi_protoid = n.n_protoid;
 1185|       |
 1186|     62|		log_debug("%s: rekey %s spi %s", __func__,
 1187|     62|		    print_map(n.n_protoid, ikev2_saproto_map),
 1188|     62|		    print_spi(rekey->spi, n.n_spisize));
 1189|     62|		break;
 1190|    348|	case IKEV2_N_TEMPORARY_FAILURE:
  ------------------
  |  |  324|    348|#define IKEV2_N_TEMPORARY_FAILURE		43	/* RFC7296 */
  ------------------
  |  Branch (1190:2): [True: 348, False: 27.0k]
  ------------------
 1191|    348|		if (!msg->msg_e) {
  ------------------
  |  Branch (1191:7): [True: 0, False: 348]
  ------------------
 1192|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1193|      0|			    __func__);
 1194|      0|			return (-1);
 1195|      0|		}
 1196|    348|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
  ------------------
  |  |  699|    348|#define IKED_MSG_FLAGS_TEMPORARY_FAILURE		0x0200
  ------------------
 1197|    348|		break;
 1198|    255|	case IKEV2_N_IPCOMP_SUPPORTED:
  ------------------
  |  |  329|    255|#define IKEV2_N_IPCOMP_SUPPORTED		16387	/* RFC7296 */
  ------------------
  |  Branch (1198:2): [True: 255, False: 27.1k]
  ------------------
 1199|    255|		if (!msg->msg_e) {
  ------------------
  |  Branch (1199:7): [True: 0, False: 255]
  ------------------
 1200|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1201|      0|			    __func__);
 1202|      0|			return (-1);
 1203|      0|		}
 1204|    255|		if (left < sizeof(msg->msg_parent->msg_cpi) +
  ------------------
  |  Branch (1204:7): [True: 127, False: 128]
  ------------------
 1205|    255|		    sizeof(msg->msg_parent->msg_transform)) {
 1206|    127|			log_debug("%s: ignoring malformed ipcomp notification",
 1207|    127|			    __func__);
 1208|    127|			return (0);
 1209|    127|		}
 1210|    128|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1211|    128|		    sizeof(msg->msg_parent->msg_cpi));
 1212|    128|		memcpy(&msg->msg_parent->msg_transform,
 1213|    128|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1214|    128|		    sizeof(msg->msg_parent->msg_transform));
 1215|       |
 1216|    128|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1217|    128|		    msg->msg_parent->msg_response ? "res" : "req",
  ------------------
  |  Branch (1217:7): [True: 0, False: 128]
  ------------------
 1218|    128|		    betoh16(msg->msg_parent->msg_cpi),
 1219|    128|		    print_map(msg->msg_parent->msg_transform,
 1220|    128|		    ikev2_ipcomp_map), left);
 1221|       |
 1222|    128|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
  ------------------
  |  |  697|    128|#define IKED_MSG_FLAGS_IPCOMP_SUPPORTED			0x0080
  ------------------
 1223|    128|		break;
 1224|     73|	case IKEV2_N_CHILD_SA_NOT_FOUND:
  ------------------
  |  |  325|     73|#define IKEV2_N_CHILD_SA_NOT_FOUND		44	/* RFC7296 */
  ------------------
  |  Branch (1224:2): [True: 73, False: 27.3k]
  ------------------
 1225|     73|		if (!msg->msg_e) {
  ------------------
  |  Branch (1225:7): [True: 0, False: 73]
  ------------------
 1226|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1227|      0|			    __func__);
 1228|      0|			return (-1);
 1229|      0|		}
 1230|     73|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
  ------------------
  |  |  693|     73|#define IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND		0x0008
  ------------------
 1231|     73|		break;
 1232|     36|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
  ------------------
  |  |  312|     36|#define IKEV2_N_NO_PROPOSAL_CHOSEN		14	/* RFC7296 */
  ------------------
  |  Branch (1232:2): [True: 36, False: 27.4k]
  ------------------
 1233|     36|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
  ------------------
  |  |  700|     36|#define IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN		0x0400
  ------------------
 1234|     36|		break;
 1235|    267|	case IKEV2_N_MOBIKE_SUPPORTED:
  ------------------
  |  |  338|    267|#define IKEV2_N_MOBIKE_SUPPORTED		16396	/* RFC4555 */
  ------------------
  |  Branch (1235:2): [True: 267, False: 27.1k]
  ------------------
 1236|    267|		if (!msg->msg_e) {
  ------------------
  |  Branch (1236:7): [True: 0, False: 267]
  ------------------
 1237|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1238|      0|			    __func__);
 1239|      0|			return (-1);
 1240|      0|		}
 1241|    267|		if (left != 0) {
  ------------------
  |  Branch (1241:7): [True: 131, False: 136]
  ------------------
 1242|    131|			log_debug("%s: ignoring malformed mobike"
 1243|    131|			    " notification: %zu", __func__, left);
 1244|    131|			return (0);
 1245|    131|		}
 1246|    136|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
  ------------------
  |  |  691|    136|#define IKED_MSG_FLAGS_MOBIKE				0x0002
  ------------------
 1247|    136|		break;
 1248|    316|	case IKEV2_N_USE_TRANSPORT_MODE:
  ------------------
  |  |  333|    316|#define IKEV2_N_USE_TRANSPORT_MODE		16391	/* RFC7296 */
  ------------------
  |  Branch (1248:2): [True: 316, False: 27.1k]
  ------------------
 1249|    316|		if (!msg->msg_e) {
  ------------------
  |  Branch (1249:7): [True: 0, False: 316]
  ------------------
 1250|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1251|      0|			    __func__);
 1252|      0|			return (-1);
 1253|      0|		}
 1254|    316|		if (left != 0) {
  ------------------
  |  Branch (1254:7): [True: 77, False: 239]
  ------------------
 1255|     77|			log_debug("%s: ignoring malformed transport mode"
 1256|     77|			    " notification: %zu", __func__, left);
 1257|     77|			return (0);
 1258|     77|		}
 1259|    239|		if (msg->msg_parent->msg_response) {
  ------------------
  |  Branch (1259:7): [True: 0, False: 239]
  ------------------
 1260|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
  ------------------
  |  |  266|      0|#define IKED_POLICY_TRANSPORT		 0x40
  ------------------
  |  Branch (1260:8): [True: 0, False: 0]
  ------------------
 1261|      0|				log_debug("%s: ignoring transport mode"
 1262|      0|				    " notification (policy)", __func__);
 1263|      0|				return (0);
 1264|      0|			}
 1265|      0|		}
 1266|    239|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
  ------------------
  |  |  698|    239|#define IKED_MSG_FLAGS_USE_TRANSPORT			0x0100
  ------------------
 1267|    239|		break;
 1268|    388|	case IKEV2_N_UPDATE_SA_ADDRESSES:
  ------------------
  |  |  342|    388|#define IKEV2_N_UPDATE_SA_ADDRESSES		16400	/* RFC4555 */
  ------------------
  |  Branch (1268:2): [True: 388, False: 27.0k]
  ------------------
 1269|    388|		if (!msg->msg_e) {
  ------------------
  |  Branch (1269:7): [True: 0, False: 388]
  ------------------
 1270|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1271|      0|			    __func__);
 1272|      0|			return (-1);
 1273|      0|		}
 1274|    388|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1274:7): [True: 388, False: 0]
  ------------------
 1275|    388|			log_debug("%s: ignoring update sa addresses"
 1276|    388|			    " notification w/o mobike: %zu", __func__, left);
 1277|    388|			return (0);
 1278|    388|		}
 1279|      0|		if (left != 0) {
  ------------------
  |  Branch (1279:7): [True: 0, False: 0]
  ------------------
 1280|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1281|      0|			    " notification: %zu", __func__, left);
 1282|      0|			return (0);
 1283|      0|		}
 1284|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1285|      0|		break;
 1286|    202|	case IKEV2_N_COOKIE2:
  ------------------
  |  |  343|    202|#define IKEV2_N_COOKIE2				16401	/* RFC4555 */
  ------------------
  |  Branch (1286:2): [True: 202, False: 27.2k]
  ------------------
 1287|    202|		if (!msg->msg_e) {
  ------------------
  |  Branch (1287:7): [True: 0, False: 202]
  ------------------
 1288|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1289|      0|			    __func__);
 1290|      0|			return (-1);
 1291|      0|		}
 1292|    202|		if (!sa->sa_mobike) {
  ------------------
  |  Branch (1292:7): [True: 202, False: 0]
  ------------------
 1293|    202|			log_debug("%s: ignoring cookie2 notification"
 1294|    202|			    " w/o mobike: %zu", __func__, left);
 1295|    202|			return (0);
 1296|    202|		}
 1297|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   61|      0|#define IKED_COOKIE2_MIN	8	/* min 8 bytes */
  ------------------
              		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
  ------------------
  |  |   62|      0|#define IKED_COOKIE2_MAX	64	/* max 64 bytes */
  ------------------
  |  Branch (1297:7): [True: 0, False: 0]
  |  Branch (1297:34): [True: 0, False: 0]
  ------------------
 1298|      0|			log_debug("%s: ignoring malformed cookie2"
 1299|      0|			    " notification: %zu", __func__, left);
 1300|      0|			return (0);
 1301|      0|		}
 1302|      0|		ibuf_free(msg->msg_cookie2);	/* should not happen */
 1303|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1303:7): [True: 0, False: 0]
  ------------------
 1304|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1305|      0|			return (-1);
 1306|      0|		}
 1307|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1308|      0|		break;
 1309|      2|	case IKEV2_N_COOKIE:
  ------------------
  |  |  332|      2|#define IKEV2_N_COOKIE				16390	/* RFC7296 */
  ------------------
  |  Branch (1309:2): [True: 2, False: 27.4k]
  ------------------
 1310|      2|		if (msg->msg_e) {
  ------------------
  |  Branch (1310:7): [True: 2, False: 0]
  ------------------
 1311|      2|			log_debug("%s: N_COOKIE encrypted",
 1312|      2|			    __func__);
 1313|      2|			return (-1);
 1314|      2|		}
 1315|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   58|      0|#define IKED_COOKIE_MIN		1	/* min 1 bytes */
  ------------------
              		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
  ------------------
  |  |   59|      0|#define IKED_COOKIE_MAX		64	/* max 64 bytes */
  ------------------
  |  Branch (1315:7): [True: 0, False: 0]
  |  Branch (1315:33): [True: 0, False: 0]
  ------------------
 1316|      0|			log_debug("%s: ignoring malformed cookie"
 1317|      0|			    " notification: %zu", __func__, left);
 1318|      0|			return (0);
 1319|      0|		}
 1320|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1321|      0|		print_hex(buf, 0, left);
 1322|       |
 1323|      0|		ibuf_free(msg->msg_cookie);
 1324|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
  ------------------
  |  Branch (1324:7): [True: 0, False: 0]
  ------------------
 1325|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1326|      0|			return (-1);
 1327|      0|		}
 1328|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1329|      0|		break;
 1330|     14|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
  ------------------
  |  |  371|     14|#define IKEV2_N_FRAGMENTATION_SUPPORTED		16430	/* RFC7383 */
  ------------------
  |  Branch (1330:2): [True: 14, False: 27.4k]
  ------------------
 1331|     14|		if (msg->msg_e) {
  ------------------
  |  Branch (1331:7): [True: 14, False: 0]
  ------------------
 1332|     14|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1333|     14|			    __func__);
 1334|     14|			return (-1);
 1335|     14|		}
 1336|      0|		if (left != 0) {
  ------------------
  |  Branch (1336:7): [True: 0, False: 0]
  ------------------
 1337|      0|			log_debug("%s: ignoring malformed fragmentation"
 1338|      0|			    " notification: %zu", __func__, left);
 1339|      0|			return (0);
 1340|      0|		}
 1341|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
  ------------------
  |  |  690|      0|#define IKED_MSG_FLAGS_FRAGMENTATION			0x0001
  ------------------
 1342|      0|		break;
 1343|      7|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
  ------------------
  |  |  372|      7|#define IKEV2_N_SIGNATURE_HASH_ALGORITHMS	16431	/* RFC7427 */
  ------------------
  |  Branch (1343:2): [True: 7, False: 27.4k]
  ------------------
 1344|      7|		if (msg->msg_e) {
  ------------------
  |  Branch (1344:7): [True: 7, False: 0]
  ------------------
 1345|      7|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1346|      7|			    __func__);
 1347|      7|			return (-1);
 1348|      7|		}
 1349|      0|		if (sa == NULL) {
  ------------------
  |  Branch (1349:7): [True: 0, False: 0]
  ------------------
 1350|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1351|      0|			    __func__);
 1352|      0|			return (-1);
 1353|      0|		}
 1354|      0|		if (sa->sa_sigsha2) {
  ------------------
  |  Branch (1354:7): [True: 0, False: 0]
  ------------------
 1355|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1356|      0|			    "duplicate notify", __func__);
 1357|      0|			return (0);
 1358|      0|		}
 1359|      0|		if (left < sizeof(signature_hash) ||
  ------------------
  |  Branch (1359:7): [True: 0, False: 0]
  ------------------
 1360|      0|		    left % sizeof(signature_hash)) {
  ------------------
  |  Branch (1360:7): [True: 0, False: 0]
  ------------------
 1361|      0|			log_debug("%s: malformed signature hash notification"
 1362|      0|			    "(%zu bytes)", __func__, left);
 1363|      0|			return (0);
 1364|      0|		}
 1365|      0|		while (left >= sizeof(signature_hash)) {
  ------------------
  |  Branch (1365:10): [True: 0, False: 0]
  ------------------
 1366|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1367|      0|			signature_hash = betoh16(signature_hash);
 1368|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1369|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1370|      0|			    signature_hash);
 1371|      0|			left -= sizeof(signature_hash);
 1372|      0|			buf += sizeof(signature_hash);
 1373|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
  ------------------
  |  |  499|      0|#define IKEV2_SIGHASH_SHA2_256		2	/* RFC7427 */
  ------------------
  |  Branch (1373:8): [True: 0, False: 0]
  ------------------
 1374|      0|				msg->msg_parent->msg_flags
 1375|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
  ------------------
  |  |  692|      0|#define IKED_MSG_FLAGS_SIGSHA2				0x0004
  ------------------
 1376|      0|		}
 1377|      0|		break;
 1378|  27.4k|	}
 1379|       |
 1380|  26.4k|	return (0);
 1381|  27.4k|}
ikev2_validate_delete:
 1386|  7.11k|{
 1387|  7.11k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1388|       |
 1389|  7.11k|	if (left < sizeof(*del)) {
  ------------------
  |  Branch (1389:6): [True: 1.39k, False: 5.72k]
  ------------------
 1390|  1.39k|		log_debug("%s: malformed payload: too short for header "
 1391|  1.39k|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1392|  1.39k|		return (-1);
 1393|  1.39k|	}
 1394|  5.72k|	memcpy(del, msgbuf + offset, sizeof(*del));
 1395|       |
 1396|  5.72k|	if (del->del_protoid == 0) {
  ------------------
  |  Branch (1396:6): [True: 84, False: 5.64k]
  ------------------
 1397|     84|		log_info("%s: malformed payload: invalid protoid", __func__);
 1398|     84|		return (-1);
 1399|     84|	}
 1400|       |
 1401|  5.64k|	return (0);
 1402|  5.72k|}
ikev2_pld_delete:
 1407|  7.11k|{
 1408|  7.11k|	struct ikev2_delete	 del;
 1409|  7.11k|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1410|  7.11k|	size_t			 cnt, sz, len;
 1411|       |
 1412|  7.11k|	if (ikev2_validate_delete(msg, offset, left, &del))
  ------------------
  |  Branch (1412:6): [True: 1.47k, False: 5.64k]
  ------------------
 1413|  1.47k|		return (-1);
 1414|       |
 1415|       |	/* Skip if it's a response, then we don't have to deal with it */
 1416|  5.64k|	if (ikev2_msg_frompeer(msg) &&
  ------------------
  |  Branch (1416:6): [True: 168, False: 5.47k]
  ------------------
 1417|  5.64k|	    msg->msg_parent->msg_response)
  ------------------
  |  Branch (1417:6): [True: 0, False: 168]
  ------------------
 1418|      0|		return (0);
 1419|       |
 1420|  5.64k|	cnt = betoh16(del.del_nspi);
 1421|  5.64k|	sz = del.del_spisize;
 1422|       |
 1423|  5.64k|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1424|  5.64k|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1425|  5.64k|	    sz, cnt);
 1426|       |
 1427|  5.64k|	if (msg->msg_parent->msg_del_protoid) {
  ------------------
  |  Branch (1427:6): [True: 5.32k, False: 316]
  ------------------
 1428|  5.32k|		log_debug("%s: duplicate delete payload", __func__);
 1429|  5.32k|		return (0);
 1430|  5.32k|	}
 1431|       |
 1432|    316|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1433|    316|	msg->msg_parent->msg_del_cnt = cnt;
 1434|    316|	msg->msg_parent->msg_del_spisize = sz;
 1435|       |
 1436|    316|	buf = msgbuf + offset + sizeof(del);
 1437|    316|	len = left - sizeof(del);
 1438|    316|	if (len == 0 || sz == 0 || cnt == 0)
  ------------------
  |  Branch (1438:6): [True: 13, False: 303]
  |  Branch (1438:18): [True: 229, False: 74]
  |  Branch (1438:29): [True: 51, False: 23]
  ------------------
 1439|    293|		return (0);
 1440|       |
 1441|     23|	if ((len / sz) != cnt) {
  ------------------
  |  Branch (1441:6): [True: 21, False: 2]
  ------------------
 1442|     21|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1443|     21|		    __func__, len, sz, cnt);
 1444|     21|		return (-1);
 1445|     21|	}
 1446|       |
 1447|      2|	print_hex(buf, 0, len);
 1448|       |
 1449|      2|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1450|       |
 1451|      2|	return (0);
 1452|     23|}
ikev2_validate_tss:
 1457|  18.1k|{
 1458|  18.1k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1459|       |
 1460|  18.1k|	if (left < sizeof(*tsp)) {
  ------------------
  |  Branch (1460:6): [True: 2.39k, False: 15.7k]
  ------------------
 1461|  2.39k|		log_debug("%s: malformed payload: too short for header "
 1462|  2.39k|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1463|  2.39k|		return (-1);
 1464|  2.39k|	}
 1465|  15.7k|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1466|       |
 1467|  15.7k|	return (0);
 1468|  18.1k|}
ikev2_pld_tss:
 1473|  18.1k|{
 1474|  18.1k|	struct ikev2_tsp		 tsp;
 1475|  18.1k|	struct ikev2_ts			 ts;
 1476|  18.1k|	size_t				 ts_len, i;
 1477|       |
 1478|  18.1k|	if (ikev2_validate_tss(msg, offset, left, &tsp))
  ------------------
  |  Branch (1478:6): [True: 2.39k, False: 15.7k]
  ------------------
 1479|  2.39k|		return (-1);
 1480|       |
 1481|  15.7k|	offset += sizeof(tsp);
 1482|  15.7k|	left -= sizeof(tsp);
 1483|       |
 1484|  15.7k|	log_debug("%s: count %d length %zu", __func__,
 1485|  15.7k|	    tsp.tsp_count, left);
 1486|       |
 1487|  31.1k|	for (i = 0; i < tsp.tsp_count; i++) {
  ------------------
  |  Branch (1487:14): [True: 29.5k, False: 1.59k]
  ------------------
 1488|  29.5k|		if (ikev2_validate_ts(msg, offset, left, &ts))
  ------------------
  |  Branch (1488:7): [True: 12.4k, False: 17.1k]
  ------------------
 1489|  12.4k|			return (-1);
 1490|       |
 1491|  17.1k|		log_debug("%s: type %s protoid %u length %d "
 1492|  17.1k|		    "startport %u endport %u", __func__,
 1493|  17.1k|		    print_map(ts.ts_type, ikev2_ts_map),
 1494|  17.1k|		    ts.ts_protoid, betoh16(ts.ts_length),
 1495|  17.1k|		    betoh16(ts.ts_startport),
 1496|  17.1k|		    betoh16(ts.ts_endport));
 1497|       |
 1498|  17.1k|		offset += sizeof(ts);
 1499|  17.1k|		left -= sizeof(ts);
 1500|       |
 1501|  17.1k|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1502|  17.1k|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
  ------------------
  |  Branch (1502:7): [True: 1.69k, False: 15.4k]
  ------------------
 1503|  1.69k|			return (-1);
 1504|       |
 1505|  15.4k|		offset += ts_len;
 1506|  15.4k|		left -= ts_len;
 1507|  15.4k|	}
 1508|       |
 1509|  1.59k|	return (0);
 1510|  15.7k|}
ikev2_validate_ts:
 1515|  29.5k|{
 1516|  29.5k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1517|  29.5k|	size_t		 ts_length;
 1518|       |
 1519|  29.5k|	if (left < sizeof(*ts)) {
  ------------------
  |  Branch (1519:6): [True: 11.2k, False: 18.3k]
  ------------------
 1520|  11.2k|		log_debug("%s: malformed payload: too short for header "
 1521|  11.2k|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1522|  11.2k|		return (-1);
 1523|  11.2k|	}
 1524|  18.3k|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1525|       |
 1526|  18.3k|	ts_length = betoh16(ts->ts_length);
 1527|  18.3k|	if (ts_length < sizeof(*ts)) {
  ------------------
  |  Branch (1527:6): [True: 315, False: 18.0k]
  ------------------
 1528|    315|		log_debug("%s: malformed payload: shorter than minimum header "
 1529|    315|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1530|    315|		return (-1);
 1531|    315|	}
 1532|  18.0k|	if (left < ts_length) {
  ------------------
  |  Branch (1532:6): [True: 873, False: 17.1k]
  ------------------
 1533|    873|		log_debug("%s: malformed payload: too long for payload size "
 1534|    873|		    "(%zu < %zu)", __func__, left, ts_length);
 1535|    873|		return (-1);
 1536|    873|	}
 1537|       |
 1538|  17.1k|	return (0);
 1539|  18.0k|}
ikev2_pld_ts:
 1544|  17.1k|{
 1545|  17.1k|	struct sockaddr_in		 start4, end4;
 1546|  17.1k|	struct sockaddr_in6		 start6, end6;
 1547|  17.1k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
 1548|  17.1k|	uint8_t				*ptr;
 1549|       |
 1550|  17.1k|	ptr = msgbuf + offset;
 1551|       |
 1552|  17.1k|	switch (type) {
 1553|  6.22k|	case IKEV2_TS_IPV4_ADDR_RANGE:
  ------------------
  |  |  460|  6.22k|#define IKEV2_TS_IPV4_ADDR_RANGE	7	/* RFC7296 */
  ------------------
  |  Branch (1553:2): [True: 6.22k, False: 10.9k]
  ------------------
 1554|  6.22k|		if (left < 2 * 4) {
  ------------------
  |  Branch (1554:7): [True: 323, False: 5.90k]
  ------------------
 1555|    323|			log_debug("%s: malformed payload: too short "
 1556|    323|			    "for ipv4 addr range (%zu < %u)",
 1557|    323|			    __func__, left, 2 * 4);
 1558|    323|			return (-1);
 1559|    323|		}
 1560|       |
 1561|  5.90k|		bzero(&start4, sizeof(start4));
 1562|  5.90k|		start4.sin_family = AF_INET;
 1563|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1564|       |		start4.sin_len = sizeof(start4);
 1565|       |#endif
 1566|  5.90k|		memcpy(&start4.sin_addr.s_addr, ptr, 4);
 1567|  5.90k|		ptr += 4;
 1568|  5.90k|		left -= 4;
 1569|       |
 1570|  5.90k|		bzero(&end4, sizeof(end4));
 1571|  5.90k|		end4.sin_family = AF_INET;
 1572|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1573|       |		end4.sin_len = sizeof(end4);
 1574|       |#endif
 1575|  5.90k|		memcpy(&end4.sin_addr.s_addr, ptr, 4);
 1576|  5.90k|		left -= 4;
 1577|       |
 1578|  5.90k|		log_debug("%s: start %s end %s", __func__,
 1579|  5.90k|		    print_addr(&start4), print_addr(&end4));
 1580|  5.90k|		break;
 1581|  1.36k|	case IKEV2_TS_IPV6_ADDR_RANGE:
  ------------------
  |  |  461|  1.36k|#define IKEV2_TS_IPV6_ADDR_RANGE	8	/* RFC7296 */
  ------------------
  |  Branch (1581:2): [True: 1.36k, False: 15.7k]
  ------------------
 1582|  1.36k|		if (left < 2 * 16) {
  ------------------
  |  Branch (1582:7): [True: 252, False: 1.11k]
  ------------------
 1583|    252|			log_debug("%s: malformed payload: too short "
 1584|    252|			    "for ipv6 addr range (%zu < %u)",
 1585|    252|			    __func__, left, 2 * 16);
 1586|    252|			return (-1);
 1587|    252|		}
 1588|  1.11k|		bzero(&start6, sizeof(start6));
 1589|  1.11k|		start6.sin6_family = AF_INET6;
 1590|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1591|       |		start6.sin6_len = sizeof(start6);
 1592|       |#endif
 1593|  1.11k|		memcpy(&start6.sin6_addr, ptr, 16);
 1594|  1.11k|		ptr += 16;
 1595|  1.11k|		left -= 16;
 1596|       |
 1597|  1.11k|		bzero(&end6, sizeof(end6));
 1598|  1.11k|		end6.sin6_family = AF_INET6;
 1599|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1600|       |		end6.sin6_len = sizeof(end6);
 1601|       |#endif
 1602|  1.11k|		memcpy(&end6.sin6_addr, ptr, 16);
 1603|  1.11k|		left -= 16;
 1604|       |
 1605|  1.11k|		log_debug("%s: start %s end %s", __func__,
 1606|  1.11k|		    print_addr(&start6), print_addr(&end6));
 1607|  1.11k|		break;
 1608|  9.54k|	default:
  ------------------
  |  Branch (1608:2): [True: 9.54k, False: 7.59k]
  ------------------
 1609|  9.54k|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1610|  9.54k|		return (0);
 1611|  17.1k|	}
 1612|       |
 1613|  7.01k|	if (left > 0) {
  ------------------
  |  Branch (1613:6): [True: 1.12k, False: 5.89k]
  ------------------
 1614|  1.12k|		log_debug("%s: malformed payload: left (%zu) > 0",
 1615|  1.12k|		    __func__, left);
 1616|  1.12k|		return (-1);
 1617|  1.12k|	}
 1618|       |
 1619|  5.89k|	return (0);
 1620|  7.01k|}
ikev2_validate_cp:
 1875|  9.77k|{
 1876|  9.77k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1877|       |
 1878|  9.77k|	if (left < sizeof(*cp)) {
  ------------------
  |  Branch (1878:6): [True: 3.14k, False: 6.63k]
  ------------------
 1879|  3.14k|		log_debug("%s: malformed payload: too short for header "
 1880|  3.14k|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1881|  3.14k|		return (-1);
 1882|  3.14k|	}
 1883|  6.63k|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1884|       |
 1885|  6.63k|	return (0);
 1886|  9.77k|}
ikev2_pld_cp:
 1891|  9.77k|{
 1892|  9.77k|	struct ikev2_cp		 cp;
 1893|  9.77k|	struct ikev2_cfg	*cfg;
 1894|  9.77k|	struct iked_addr	*addr;
 1895|  9.77k|	struct sockaddr_in	*in4;
 1896|  9.77k|	struct sockaddr_in6	*in6;
 1897|  9.77k|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
 1898|  9.77k|	uint8_t			*ptr;
 1899|  9.77k|	size_t			 len;
 1900|  9.77k|	int			 cfg_type;
 1901|       |
 1902|  9.77k|	if (ikev2_validate_cp(msg, offset, left, &cp))
  ------------------
  |  Branch (1902:6): [True: 3.14k, False: 6.63k]
  ------------------
 1903|  3.14k|		return (-1);
 1904|       |
 1905|  6.63k|	ptr = msgbuf + offset + sizeof(cp);
 1906|  6.63k|	len = left - sizeof(cp);
 1907|       |
 1908|  6.63k|	log_debug("%s: type %s length %zu",
 1909|  6.63k|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1910|  6.63k|	print_hex(ptr, 0, len);
 1911|       |
 1912|  14.4k|	while (len > 0) {
  ------------------
  |  Branch (1912:9): [True: 9.33k, False: 5.15k]
  ------------------
 1913|  9.33k|		if (len < sizeof(*cfg)) {
  ------------------
  |  Branch (1913:7): [True: 352, False: 8.98k]
  ------------------
 1914|    352|			log_debug("%s: malformed payload: too short for cfg "
 1915|    352|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1916|    352|			return (-1);
 1917|    352|		}
 1918|  8.98k|		cfg = (struct ikev2_cfg *)ptr;
 1919|       |
 1920|  8.98k|		log_debug("%s: %s 0x%04x length %d", __func__,
 1921|  8.98k|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1922|  8.98k|		    betoh16(cfg->cfg_type),
 1923|  8.98k|		    betoh16(cfg->cfg_length));
 1924|       |
 1925|  8.98k|		ptr += sizeof(*cfg);
 1926|  8.98k|		len -= sizeof(*cfg);
 1927|       |
 1928|  8.98k|		if (len < betoh16(cfg->cfg_length)) {
  ------------------
  |  Branch (1928:7): [True: 1.12k, False: 7.86k]
  ------------------
 1929|  1.12k|			log_debug("%s: malformed payload: too short for "
 1930|  1.12k|			    "cfg_length (%zu < %u)", __func__, len,
 1931|  1.12k|			    betoh16(cfg->cfg_length));
 1932|  1.12k|			return (-1);
 1933|  1.12k|		}
 1934|       |
 1935|  7.86k|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1936|       |
 1937|  7.86k|		cfg_type = betoh16(cfg->cfg_type);
 1938|  7.86k|		switch (cfg_type) {
  ------------------
  |  Branch (1938:11): [True: 3.29k, False: 4.56k]
  ------------------
 1939|    844|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|    844|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1939:3): [True: 844, False: 7.01k]
  ------------------
 1940|  1.50k|		case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|  1.50k|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1940:3): [True: 660, False: 7.20k]
  ------------------
 1941|  1.50k|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1941:8): [True: 735, False: 769]
  ------------------
 1942|    735|				break;
 1943|    769|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (1943:8): [True: 309, False: 460]
  ------------------
 1944|    309|				break;
 1945|       |			/* XXX multiple-valued */
 1946|    460|			if (betoh16(cfg->cfg_length) < 4) {
  ------------------
  |  Branch (1946:8): [True: 6, False: 454]
  ------------------
 1947|      6|				log_debug("%s: malformed payload: too short "
 1948|      6|				    "for ipv4 addr (%u < %u)",
 1949|      6|				    __func__, betoh16(cfg->cfg_length), 4);
 1950|      6|				return (-1);
 1951|      6|			}
 1952|    454|			switch(cfg_type) {
 1953|    355|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|    355|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1953:4): [True: 355, False: 99]
  ------------------
 1954|    355|				if (msg->msg_parent->msg_cp_addr != NULL) {
  ------------------
  |  Branch (1954:9): [True: 238, False: 117]
  ------------------
 1955|    238|					log_debug("%s: address already set", __func__);
 1956|    238|					goto skip;
 1957|    238|				}
 1958|    117|				break;
 1959|    117|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|     99|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1959:4): [True: 99, False: 355]
  ------------------
 1960|     99|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (1960:9): [True: 51, False: 48]
  ------------------
 1961|     51|					log_debug("%s: dns already set", __func__);
 1962|     51|					goto skip;
 1963|     51|				}
 1964|     48|				break;
 1965|     48|			default:
  ------------------
  |  Branch (1965:4): [True: 0, False: 454]
  ------------------
 1966|      0|				break;
 1967|    454|			}
 1968|    165|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (1968:8): [True: 0, False: 165]
  ------------------
 1969|      0|				log_debug("%s: malloc failed", __func__);
 1970|      0|				break;
 1971|      0|			}
 1972|    165|			addr->addr_af = AF_INET;
 1973|    165|			in4 = (struct sockaddr_in *)&addr->addr;
 1974|    165|			in4->sin_family = AF_INET;
 1975|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1976|       |			in4->sin_len = sizeof(*in4);
 1977|       |#endif
 1978|    165|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1979|    165|			switch(cfg_type) {
 1980|    117|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
  ------------------
  |  |  528|    117|#define IKEV2_CFG_INTERNAL_IP4_ADDRESS		1	/* RFC7296 */
  ------------------
  |  Branch (1980:4): [True: 117, False: 48]
  ------------------
 1981|    117|				msg->msg_parent->msg_cp_addr = addr;
 1982|    117|				log_debug("%s: IP4_ADDRESS %s", __func__,
 1983|    117|				    print_addr(&addr->addr));
 1984|    117|				break;
 1985|     48|			case IKEV2_CFG_INTERNAL_IP4_DNS:
  ------------------
  |  |  530|     48|#define IKEV2_CFG_INTERNAL_IP4_DNS		3	/* RFC7296 */
  ------------------
  |  Branch (1985:4): [True: 48, False: 117]
  ------------------
 1986|     48|				msg->msg_parent->msg_cp_dns = addr;
 1987|     48|				log_debug("%s: IP4_DNS %s", __func__,
 1988|     48|				    print_addr(&addr->addr));
 1989|     48|				break;
 1990|      0|			default:
  ------------------
  |  Branch (1990:4): [True: 0, False: 165]
  ------------------
 1991|      0|				log_debug("%s: cfg %s", __func__,
 1992|      0|				    print_addr(&addr->addr));
 1993|      0|				break;
 1994|    165|			}
 1995|    165|			break;
 1996|  2.25k|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|  2.25k|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (1996:3): [True: 2.25k, False: 5.61k]
  ------------------
 1997|  3.06k|		case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|  3.06k|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (1997:3): [True: 810, False: 7.05k]
  ------------------
 1998|  3.06k|			if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (1998:8): [True: 2.86k, False: 199]
  ------------------
 1999|  2.86k|				break;
 2000|    199|			if (betoh16(cfg->cfg_length) == 0)
  ------------------
  |  Branch (2000:8): [True: 67, False: 132]
  ------------------
 2001|     67|				break;
 2002|       |			/* XXX multiple-valued */
 2003|    132|			if (betoh16(cfg->cfg_length) < 16) {
  ------------------
  |  Branch (2003:8): [True: 5, False: 127]
  ------------------
 2004|      5|				log_debug("%s: malformed payload: too short "
 2005|      5|				    "for ipv6 addr w/prefixlen (%u < %u)",
 2006|      5|				    __func__, betoh16(cfg->cfg_length), 16);
 2007|      5|				return (-1);
 2008|      5|			}
 2009|    127|			switch(cfg_type) {
  ------------------
  |  Branch (2009:11): [True: 0, False: 127]
  ------------------
 2010|     87|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|     87|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2010:4): [True: 87, False: 40]
  ------------------
 2011|     87|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
  ------------------
  |  Branch (2011:9): [True: 47, False: 40]
  ------------------
 2012|     47|					log_debug("%s: address6 already set", __func__);
 2013|     47|					goto skip;
 2014|     47|				}
 2015|     40|				break;
 2016|     40|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|     40|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2016:4): [True: 40, False: 87]
  ------------------
 2017|     40|				if (msg->msg_parent->msg_cp_dns != NULL) {
  ------------------
  |  Branch (2017:9): [True: 36, False: 4]
  ------------------
 2018|     36|					log_debug("%s: dns already set", __func__);
 2019|     36|					goto skip;
 2020|     36|				}
 2021|      4|				break;
 2022|    127|			}
 2023|     44|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
  ------------------
  |  Branch (2023:8): [True: 0, False: 44]
  ------------------
 2024|      0|				log_debug("%s: malloc failed", __func__);
 2025|      0|				break;
 2026|      0|			}
 2027|     44|			addr->addr_af = AF_INET6;
 2028|     44|			in6 = (struct sockaddr_in6 *)&addr->addr;
 2029|     44|			in6->sin6_family = AF_INET6;
 2030|       |#ifdef HAVE_SOCKADDR_SA_LEN
 2031|       |			in6->sin6_len = sizeof(*in6);
 2032|       |#endif
 2033|     44|			memcpy(&in6->sin6_addr, ptr, 16);
 2034|     44|			switch(cfg_type) {
 2035|     40|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
  ------------------
  |  |  535|     40|#define IKEV2_CFG_INTERNAL_IP6_ADDRESS		8	/* RFC7296 */
  ------------------
  |  Branch (2035:4): [True: 40, False: 4]
  ------------------
 2036|     40|				msg->msg_parent->msg_cp_addr6 = addr;
 2037|     40|				log_debug("%s: IP6_ADDRESS %s", __func__,
 2038|     40|				    print_addr(&addr->addr));
 2039|     40|				break;
 2040|      4|			case IKEV2_CFG_INTERNAL_IP6_DNS:
  ------------------
  |  |  536|      4|#define IKEV2_CFG_INTERNAL_IP6_DNS		10	/* RFC7296 */
  ------------------
  |  Branch (2040:4): [True: 4, False: 40]
  ------------------
 2041|      4|				msg->msg_parent->msg_cp_dns = addr;
 2042|      4|				log_debug("%s: IP6_DNS %s", __func__,
 2043|      4|				    print_addr(&addr->addr));
 2044|      4|				break;
 2045|      0|			default:
  ------------------
  |  Branch (2045:4): [True: 0, False: 44]
  ------------------
 2046|      0|				log_debug("%s: cfg %s/%d", __func__,
 2047|      0|				    print_addr(&addr->addr), ptr[16]);
 2048|      0|				break;
 2049|     44|			}
 2050|     44|			break;
 2051|  7.86k|		}
 2052|       |
 2053|  7.84k| skip:
 2054|  7.84k|		ptr += betoh16(cfg->cfg_length);
 2055|  7.84k|		len -= betoh16(cfg->cfg_length);
 2056|  7.84k|	}
 2057|       |
 2058|  5.15k|	if (!ikev2_msg_frompeer(msg))
  ------------------
  |  Branch (2058:6): [True: 4.95k, False: 192]
  ------------------
 2059|  4.95k|		return (0);
 2060|       |
 2061|    192|	msg->msg_parent->msg_cp = cp.cp_type;
 2062|       |
 2063|    192|	return (0);
 2064|  5.15k|}
ikev2_validate_eap:
 2069|  17.1k|{
 2070|  17.1k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2071|       |
 2072|  17.1k|	if (left < sizeof(*hdr)) {
  ------------------
  |  Branch (2072:6): [True: 7.15k, False: 9.94k]
  ------------------
 2073|  7.15k|		log_debug("%s: malformed payload: too short for header "
 2074|  7.15k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2075|  7.15k|		return (-1);
 2076|  7.15k|	}
 2077|  9.94k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2078|       |
 2079|  9.94k|	return (0);
 2080|  17.1k|}
ikev2_pld_eap:
 2085|  17.1k|{
 2086|  17.1k|	struct eap_header		 hdr;
 2087|  17.1k|	struct eap_message		*eap = NULL;
 2088|  17.1k|	const struct iked_sa		*sa = msg->msg_sa;
 2089|  17.1k|	size_t				 len;
 2090|       |
 2091|  17.1k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
  ------------------
  |  Branch (2091:6): [True: 7.15k, False: 9.94k]
  ------------------
 2092|  7.15k|		return (-1);
 2093|  9.94k|	len = betoh16(hdr.eap_length);
 2094|       |
 2095|  9.94k|	if (len < sizeof(*eap)) {
  ------------------
  |  Branch (2095:6): [True: 3.45k, False: 6.48k]
  ------------------
 2096|  3.45k|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
  ------------------
  |  | 1105|  3.45k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|  3.45k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2097|  3.45k|		    print_map(hdr.eap_code, eap_code_map),
 2098|  3.45k|		    hdr.eap_id, betoh16(hdr.eap_length));
 2099|  6.48k|	} else {
 2100|       |		/* Now try to get the indicated length */
 2101|  6.48k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
  ------------------
  |  Branch (2101:7): [True: 3.28k, False: 3.20k]
  ------------------
 2102|  3.28k|			log_debug("%s: invalid EAP length", __func__);
 2103|  3.28k|			return (-1);
 2104|  3.28k|		}
 2105|       |
 2106|  3.20k|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
  ------------------
  |  | 1105|  3.20k|#define SPI_SA(sa, f)    SPI_SH(&(sa)->sa_hdr, (f))
  |  |  ------------------
  |  |  |  | 1104|  3.20k|#define SPI_SH(sh, f)    ikev2_ikesa_info((sh)->sh_ispi, (f))
  |  |  ------------------
  ------------------
 2107|  3.20k|		    print_map(eap->eap_code, eap_code_map),
 2108|  3.20k|		    eap->eap_id, betoh16(eap->eap_length),
 2109|  3.20k|		    print_map(eap->eap_type, eap_type_map));
 2110|       |
 2111|  3.20k|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
  ------------------
  |  Branch (2111:7): [True: 0, False: 3.20k]
  ------------------
 2112|      0|			return (-1);
 2113|  3.20k|		msg->msg_parent->msg_eap.eam_found = 1;
 2114|  3.20k|	}
 2115|       |
 2116|  6.66k|	return (0);
 2117|  9.94k|}

ibuf_new:
   41|  20.4k|{
   42|  20.4k|	struct ibuf	*buf;
   43|       |
   44|  20.4k|	if ((buf = ibuf_dynamic(len,
  ------------------
  |  Branch (44:6): [True: 0, False: 20.4k]
  ------------------
   45|  20.4k|	    IKED_MSGBUF_MAX)) == NULL)
  ------------------
  |  |   66|  20.4k|#define IKED_MSGBUF_MAX		8192
  ------------------
   46|      0|		return (NULL);
   47|       |
   48|  20.4k|	if (len == 0)
  ------------------
  |  Branch (48:6): [True: 1.41k, False: 19.0k]
  ------------------
   49|  1.41k|		return (buf);
   50|       |
   51|  19.0k|	if (data == NULL) {
  ------------------
  |  Branch (51:6): [True: 0, False: 19.0k]
  ------------------
   52|      0|		if (ibuf_add_zero(buf, len) != 0) {
  ------------------
  |  Branch (52:7): [True: 0, False: 0]
  ------------------
   53|      0|			ibuf_free(buf);
   54|      0|			return (NULL);
   55|      0|		}
   56|  19.0k|	} else {
   57|  19.0k|		if (ibuf_add(buf, data, len) != 0) {
  ------------------
  |  Branch (57:7): [True: 0, False: 19.0k]
  ------------------
   58|      0|			ibuf_free(buf);
   59|      0|			return (NULL);
   60|      0|		}
   61|  19.0k|	}
   62|       |
   63|  19.0k|	return (buf);
   64|  19.0k|}

log_getverbose:
   82|   148k|{
   83|   148k|	return (verbose);
   84|   148k|}
vlog:
   98|  10.4k|{
   99|  10.4k|	char	*nfmt;
  100|  10.4k|	int	 saved_errno = errno;
  101|       |
  102|  10.4k|	if (debug) {
  ------------------
  |  Branch (102:6): [True: 0, False: 10.4k]
  ------------------
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  ------------------
  |  Branch (104:7): [True: 0, False: 0]
  ------------------
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  10.4k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  10.4k|	errno = saved_errno;
  116|  10.4k|}
log_info:
  158|  10.4k|{
  159|  10.4k|	va_list	 ap;
  160|       |
  161|  10.4k|	va_start(ap, emsg);
  162|  10.4k|	vlog(LOG_INFO, emsg, ap);
  163|  10.4k|	va_end(ap);
  164|  10.4k|}
log_debug:
  168|   543k|{
  169|   543k|	va_list	 ap;
  170|       |
  171|   543k|	if (verbose > 1) {
  ------------------
  |  Branch (171:6): [True: 0, False: 543k]
  ------------------
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|   543k|}

socket_getport:
   71|  14.2k|{
   72|  14.2k|	switch (sa->sa_family) {
   73|  11.9k|	case AF_INET:
  ------------------
  |  Branch (73:2): [True: 11.9k, False: 2.27k]
  ------------------
   74|  11.9k|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|  2.27k|	case AF_INET6:
  ------------------
  |  Branch (75:2): [True: 2.27k, False: 11.9k]
  ------------------
   76|  2.27k|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
  ------------------
  |  Branch (77:2): [True: 0, False: 14.2k]
  ------------------
   78|      0|		return (0);
   79|  14.2k|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|  14.2k|}
print_spi:
  499|  36.0k|{
  500|  36.0k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  36.0k|	static int		 i = 0;
  502|  36.0k|	char			*ptr;
  503|       |
  504|  36.0k|	ptr = buf[i];
  505|       |
  506|  36.0k|	switch (size) {
  507|      0|	case 2:
  ------------------
  |  Branch (507:2): [True: 0, False: 36.0k]
  ------------------
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|    349|	case 4:
  ------------------
  |  Branch (510:2): [True: 349, False: 35.6k]
  ------------------
  511|    349|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|    349|		break;
  513|  26.5k|	case 8:
  ------------------
  |  Branch (513:2): [True: 26.5k, False: 9.46k]
  ------------------
  514|  26.5k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  26.5k|		break;
  516|  9.11k|	default:
  ------------------
  |  Branch (516:2): [True: 9.11k, False: 26.9k]
  ------------------
  517|  9.11k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  9.11k|		break;
  519|  36.0k|	}
  520|       |
  521|  36.0k|	if (++i >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  36.0k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (521:6): [True: 4.50k, False: 31.5k]
  ------------------
  522|  4.50k|		i = 0;
  523|       |
  524|  36.0k|	return (ptr);
  525|  36.0k|}
print_map:
  529|   672k|{
  530|   672k|	unsigned int		 i;
  531|   672k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|   672k|	static int		 idx = 0;
  533|   672k|	const char		*name = NULL;
  534|       |
  535|   672k|	if (idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|   672k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (535:6): [True: 84.0k, False: 588k]
  ------------------
  536|  84.0k|		idx = 0;
  537|   672k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|  14.2M|	for (i = 0; map[i].cm_name != NULL; i++) {
  ------------------
  |  Branch (539:14): [True: 13.5M, False: 672k]
  ------------------
  540|  13.5M|		if (map[i].cm_type == type)
  ------------------
  |  Branch (540:7): [True: 467k, False: 13.0M]
  ------------------
  541|   467k|			name = map[i].cm_name;
  542|  13.5M|	}
  543|       |
  544|   672k|	if (name == NULL)
  ------------------
  |  Branch (544:6): [True: 205k, False: 467k]
  ------------------
  545|   205k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|   467k|	else
  547|   467k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|   672k|	return (buf[idx++]);
  550|   672k|}
print_hex:
  561|   148k|{
  562|   148k|	unsigned int	 i;
  563|       |
  564|   148k|	if (log_getverbose() < 3 || !length)
  ------------------
  |  Branch (564:6): [True: 148k, False: 0]
  |  Branch (564:30): [True: 0, False: 0]
  ------------------
  565|   148k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  ------------------
  |  Branch (567:14): [True: 0, False: 0]
  ------------------
  568|      0|		if (i && (i % 4) == 0) {
  ------------------
  |  Branch (568:7): [True: 0, False: 0]
  |  Branch (568:12): [True: 0, False: 0]
  ------------------
  569|      0|			if ((i % 32) == 0)
  ------------------
  |  Branch (569:8): [True: 0, False: 0]
  ------------------
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_addr:
  737|  14.2k|{
  738|  14.2k|	static char	 sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  739|  14.2k|	static int	 idx;
  740|  14.2k|	struct sockaddr	*sa = addr;
  741|  14.2k|	char		*buf;
  742|  14.2k|	size_t		 len;
  743|  14.2k|	char		 pbuf[7];
  744|  14.2k|	in_port_t	 port;
  745|       |
  746|  14.2k|	buf = sbuf[idx];
  747|  14.2k|	len = sizeof(sbuf[idx]);
  748|  14.2k|	if (++idx >= IKED_CYCLE_BUFFERS)
  ------------------
  |  |   70|  14.2k|#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
  ------------------
  |  Branch (748:6): [True: 1.78k, False: 12.4k]
  ------------------
  749|  1.78k|		idx = 0;
  750|       |
  751|  14.2k|	if (sa->sa_family == AF_UNSPEC) {
  ------------------
  |  Branch (751:6): [True: 0, False: 14.2k]
  ------------------
  752|      0|		strlcpy(buf, "any", len);
  753|      0|		return (buf);
  754|      0|	}
  755|       |
  756|  14.2k|	if (getnameinfo(sa, SA_LEN(sa),
  ------------------
  |  |  113|  14.2k|	((sa->sa_family == AF_INET)  ? sizeof(struct sockaddr_in) :	\
  |  |  ------------------
  |  |  |  Branch (113:3): [True: 11.9k, False: 2.27k]
  |  |  ------------------
  |  |  114|  14.2k|	(sa->sa_family == AF_INET6) ? sizeof(struct sockaddr_in6) :	\
  |  |  ------------------
  |  |  |  Branch (114:2): [True: 2.27k, False: 0]
  |  |  ------------------
  |  |  115|  2.27k|	sizeof(struct sockaddr))
  ------------------
  |  Branch (756:6): [True: 0, False: 14.2k]
  ------------------
  757|  14.2k|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  758|      0|		strlcpy(buf, "unknown", len);
  759|      0|		return (buf);
  760|      0|	}
  761|       |
  762|  14.2k|	if ((port = socket_getport(sa)) != 0) {
  ------------------
  |  Branch (762:6): [True: 0, False: 14.2k]
  ------------------
  763|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  764|      0|		(void)strlcat(buf, pbuf, len);
  765|      0|	}
  766|       |
  767|  14.2k|	return (buf);
  768|  14.2k|}

eap_parse:
   60|  3.20k|{
   61|  3.20k|	return (0);
   62|  3.20k|}
ikev2_msg_frompeer:
   67|   198k|{
   68|   198k|	struct iked_sa		*sa = msg->msg_sa;
   69|   198k|	struct ike_header	*hdr;
   70|       |
   71|   198k|	msg = msg->msg_parent;
   72|       |
   73|   198k|	if (sa == NULL ||
  ------------------
  |  Branch (73:6): [True: 0, False: 198k]
  ------------------
   74|   198k|	    (hdr = ibuf_seek(msg->msg_data, 0, sizeof(*hdr))) == NULL)
  ------------------
  |  Branch (74:6): [True: 0, False: 198k]
  ------------------
   75|      0|		return (0);
   76|       |
   77|   198k|	if (!sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (77:6): [True: 198k, False: 0]
  ------------------
   78|   198k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR))
  ------------------
  |  |   19|   198k|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (78:6): [True: 55.9k, False: 142k]
  ------------------
   79|  55.9k|		return (1);
   80|   142k|	else if (sa->sa_hdr.sh_initiator &&
  ------------------
  |  Branch (80:11): [True: 0, False: 142k]
  ------------------
   81|   142k|	    (hdr->ike_flags & IKEV2_FLAG_INITIATOR) == 0)
  ------------------
  |  |   19|      0|#define IKEV2_FLAG_INITIATOR            0x08    /* Sent by the initiator */
  ------------------
  |  Branch (81:6): [True: 0, False: 0]
  ------------------
   82|      0|		return (1);
   83|       |
   84|   142k|	return (0);
   85|   198k|}
ikev2_ikesa_info:
  101|  7.69k|{
  102|  7.69k|	return "";
  103|  7.69k|}
sa_stateok:
  120|    141|{
  121|    141|	return (0);
  122|    141|}
ikev2_nat_detection:
  164|  22.9k|{
  165|  22.9k|	return (0);
  166|  22.9k|}
ikev2_print_id:
  178|  5.38k|{
  179|  5.38k|	return (0);
  180|  5.38k|}
config_add_proposal:
  191|     69|{
  192|     69|	return (NULL);
  193|     69|}
ikev2_send_informational:
  208|    723|{
  209|    723|	return (0);
  210|    723|}
ikev2_msg_cleanup:
  250|  13.1k|{
  251|  13.1k|	struct iked_certreq *cr;
  252|  13.1k|	struct iked_proposal *prop, *proptmp;
  253|  13.1k|	int			 i;
  254|       |
  255|  13.1k|	if (msg == msg->msg_parent) {
  ------------------
  |  Branch (255:6): [True: 13.1k, False: 0]
  ------------------
  256|  13.1k|		ibuf_free(msg->msg_nonce);
  257|  13.1k|		ibuf_free(msg->msg_ke);
  258|  13.1k|		ibuf_free(msg->msg_auth.id_buf);
  259|  13.1k|		ibuf_free(msg->msg_peerid.id_buf);
  260|  13.1k|		ibuf_free(msg->msg_localid.id_buf);
  261|  13.1k|		ibuf_free(msg->msg_cert.id_buf);
  262|  52.7k|		for (i = 0; i < IKED_SCERT_MAX; i++)
  ------------------
  |  |  477|  52.7k|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (262:15): [True: 39.5k, False: 13.1k]
  ------------------
  263|  39.5k|			ibuf_free(msg->msg_scert[i].id_buf);
  264|  13.1k|		ibuf_free(msg->msg_cookie);
  265|  13.1k|		ibuf_free(msg->msg_cookie2);
  266|  13.1k|		ibuf_free(msg->msg_del_buf);
  267|  13.1k|		free(msg->msg_eap.eam_user);
  268|  13.1k|		free(msg->msg_cp_addr);
  269|  13.1k|		free(msg->msg_cp_addr6);
  270|  13.1k|		free(msg->msg_cp_dns);
  271|       |
  272|  13.1k|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  ------------------
  |  |  445|  13.1k|	for ((var) = TAILQ_FIRST(head);					\
  |  |  ------------------
  |  |  |  |  428|  13.1k|#define	TAILQ_FIRST(head)		((head)->tqh_first)
  |  |  ------------------
  |  |  446|  13.1k|	    (var) != TAILQ_END(head) &&					\
  |  |  ------------------
  |  |  |  |  429|  26.3k|#define	TAILQ_END(head)			NULL
  |  |  ------------------
  |  |  |  Branch (446:6): [True: 0, False: 13.1k]
  |  |  ------------------
  |  |  447|  13.1k|	    ((tvar) = TAILQ_NEXT(var, field), 1);			\
  |  |  ------------------
  |  |  |  |  430|      0|#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
  |  |  ------------------
  |  |  |  Branch (447:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  448|  13.1k|	    (var) = (tvar))
  ------------------
  273|  13.1k|		    proptmp) {
  274|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  ------------------
  |  |  504|      0|#define TAILQ_REMOVE(head, elm, field) do {				\
  |  |  505|      0|	if (((elm)->field.tqe_next) != NULL)				\
  |  |  ------------------
  |  |  |  Branch (505:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  506|      0|		(elm)->field.tqe_next->field.tqe_prev =			\
  |  |  507|      0|		    (elm)->field.tqe_prev;				\
  |  |  508|      0|	else								\
  |  |  509|      0|		(head)->tqh_last = (elm)->field.tqe_prev;		\
  |  |  510|      0|	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
  |  |  511|      0|	_Q_INVALIDATE((elm)->field.tqe_prev);				\
  |  |  512|      0|	_Q_INVALIDATE((elm)->field.tqe_next);				\
  |  |  513|      0|} while (0)
  |  |  ------------------
  |  |  |  Branch (513:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  275|      0|			if (prop->prop_nxforms)
  ------------------
  |  Branch (275:8): [True: 0, False: 0]
  ------------------
  276|      0|				free(prop->prop_xforms);
  277|      0|			free(prop);
  278|      0|		}
  279|       |
  280|  13.1k|		msg->msg_nonce = NULL;
  281|  13.1k|		msg->msg_ke = NULL;
  282|  13.1k|		msg->msg_auth.id_buf = NULL;
  283|  13.1k|		msg->msg_peerid.id_buf = NULL;
  284|  13.1k|		msg->msg_localid.id_buf = NULL;
  285|  13.1k|		msg->msg_cert.id_buf = NULL;
  286|  52.7k|		for (i = 0; i < IKED_SCERT_MAX; i++)
  ------------------
  |  |  477|  52.7k|#define IKED_SCERT_MAX	3 /* max # of supplemental cert payloads */
  ------------------
  |  Branch (286:15): [True: 39.5k, False: 13.1k]
  ------------------
  287|  39.5k|			msg->msg_scert[i].id_buf = NULL;
  288|  13.1k|		msg->msg_cookie = NULL;
  289|  13.1k|		msg->msg_cookie2 = NULL;
  290|  13.1k|		msg->msg_del_buf = NULL;
  291|  13.1k|		msg->msg_eap.eam_user = NULL;
  292|  13.1k|		msg->msg_cp_addr = NULL;
  293|  13.1k|		msg->msg_cp_addr6 = NULL;
  294|  13.1k|		msg->msg_cp_dns = NULL;
  295|       |
  296|  14.0k|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  ------------------
  |  |  267|  14.0k|#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
  ------------------
  |  Branch (296:10): [True: 897, False: 13.1k]
  ------------------
  297|    897|			ibuf_free(cr->cr_data);
  298|    897|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  ------------------
  |  |  308|    897|#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\
  |  |  309|    897|	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \
  |  |  ------------------
  |  |  |  Branch (309:6): [True: 104, False: 793]
  |  |  ------------------
  |  |  310|    897|		(head)->sqh_last = &(head)->sqh_first;			\
  |  |  311|    897|} while (0)
  |  |  ------------------
  |  |  |  Branch (311:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  299|    897|			free(cr);
  300|    897|		}
  301|  13.1k|	}
  302|       |
  303|  13.1k|	if (msg->msg_data != NULL) {
  ------------------
  |  Branch (303:6): [True: 13.1k, False: 0]
  ------------------
  304|  13.1k|		ibuf_free(msg->msg_data);
  305|  13.1k|		msg->msg_data = NULL;
  306|  13.1k|	}
  307|  13.1k|}

LLVMFuzzerTestOneInput:
  107|  13.1k|{
  108|  13.1k|	struct ibuf		*fuzzed;
  109|  13.1k|	struct ike_header	 hdr;
  110|  13.1k|	struct iked_message	 msg;
  111|       |
  112|  13.1k|	bzero(&hdr, sizeof(hdr));
  113|  13.1k|	bzero(&msg, sizeof(msg));
  114|       |
  115|  13.1k|	fuzzed = ibuf_new(data, size);
  116|  13.1k|	if (fuzzed == NULL){
  ------------------
  |  Branch (116:6): [True: 0, False: 13.1k]
  ------------------
  117|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  118|      0|		    "(hint: fuzz-input too long?)");
  119|      0|		return -1;
  120|      0|	}	
  121|       |	
  122|       |	/* size too small? */
  123|  13.1k|	if (size < sizeof(cookies) + sizeof(genhdr)){
  ------------------
  |  Branch (123:6): [True: 1, False: 13.1k]
  ------------------
  124|      1|		ibuf_free(fuzzed);
  125|      1|		return 0;
  126|      1|	}	       
  127|       |
  128|  13.1k|	prepare_header(&hdr, fuzzed);
  129|  13.1k|	prepare_message(&msg, fuzzed);
  130|       |
  131|  13.1k|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  132|       |
  133|  13.1k|	ikev2_msg_cleanup(NULL, &msg);
  134|       |
  135|  13.1k|	return 0;
  136|  13.1k|}
test_parser_fuzz.c:prepare_header:
   75|  13.1k|{
   76|  13.1k|	bzero(hdr, sizeof(*hdr));
   77|  13.1k|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|  13.1k|	    sizeof(hdr->ike_ispi));
   79|  13.1k|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|  13.1k|	    sizeof(hdr->ike_rspi));
   81|  13.1k|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|  13.1k|	hdr->ike_version = get_version(ibuf_data(data));
   83|  13.1k|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|  13.1k|	hdr->ike_length = get_length(ibuf_data(data));
   85|  13.1k|}
test_parser_fuzz.c:get_icookie:
   39|  13.1k|{
   40|  13.1k|	return &data[OFFSET_ICOOKIE];
  ------------------
  |  |   30|  13.1k|#define OFFSET_ICOOKIE		0
  ------------------
   41|  13.1k|}
test_parser_fuzz.c:get_rcookie:
   45|  13.1k|{
   46|  13.1k|	return &data[OFFSET_RCOOKIE];
  ------------------
  |  |   31|  13.1k|#define OFFSET_RCOOKIE		8
  ------------------
   47|  13.1k|}
test_parser_fuzz.c:get_nextpayload:
   51|  13.1k|{
   52|  13.1k|	return data[OFFSET_NEXTPAYLOAD];
  ------------------
  |  |   32|  13.1k|#define OFFSET_NEXTPAYLOAD	(0 + sizeof(cookies))
  ------------------
   53|  13.1k|}
test_parser_fuzz.c:get_version:
   57|  13.1k|{
   58|  13.1k|	return data[OFFSET_VERSION];
  ------------------
  |  |   33|  13.1k|#define OFFSET_VERSION		(1 + sizeof(cookies))
  ------------------
   59|  13.1k|}
test_parser_fuzz.c:get_exchange:
   63|  13.1k|{
   64|  13.1k|	return data[OFFSET_EXCHANGE];
  ------------------
  |  |   34|  13.1k|#define OFFSET_EXCHANGE		(2 + sizeof(cookies))
  ------------------
   65|  13.1k|}
test_parser_fuzz.c:get_length:
   69|  13.1k|{
   70|  13.1k|	return *(u_int32_t *)&data[OFFSET_LENGTH];
  ------------------
  |  |   35|  13.1k|#define OFFSET_LENGTH		(8 + sizeof(cookies))
  ------------------
   71|  13.1k|}
test_parser_fuzz.c:prepare_message:
   89|  13.1k|{
   90|  13.1k|	static struct iked_sa	sa;
   91|       |
   92|  13.1k|	bzero(&sa, sizeof(sa));
   93|  13.1k|	bzero(msg, sizeof(*msg));
   94|       |
   95|  13.1k|	msg->msg_sa = &sa;
   96|  13.1k|	msg->msg_data = data;
   97|  13.1k|	msg->msg_e = 1;
   98|  13.1k|	msg->msg_parent = msg;
   99|       |
  100|  13.1k|	TAILQ_INIT(&msg->msg_proposals);
  ------------------
  |  |  465|  13.1k|#define	TAILQ_INIT(head) do {						\
  |  |  466|  13.1k|	(head)->tqh_first = NULL;					\
  |  |  467|  13.1k|	(head)->tqh_last = &(head)->tqh_first;				\
  |  |  468|  13.1k|} while (0)
  |  |  ------------------
  |  |  |  Branch (468:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  101|  13.1k|	SIMPLEQ_INIT(&msg->msg_certreqs);
  ------------------
  |  |  285|  13.1k|#define	SIMPLEQ_INIT(head) do {						\
  |  |  286|  13.1k|	(head)->sqh_first = NULL;					\
  |  |  287|  13.1k|	(head)->sqh_last = &(head)->sqh_first;				\
  |  |  288|  13.1k|} while (0)
  |  |  ------------------
  |  |  |  Branch (288:10): [Folded - Ignored]
  |  |  ------------------
  ------------------
  102|  13.1k|}

