freezero:
   25|      1|{
   26|       |	/* This is legal. */
   27|      1|	if (ptr == NULL)
   28|      0|		return;
   29|       |
   30|      1|	explicit_bzero(ptr, sz);
   31|      1|	free(ptr);
   32|      1|}

ibuf_open:
   39|    864|{
   40|    864|	struct ibuf	*buf;
   41|       |
   42|    864|	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
   43|      0|		return (NULL);
   44|    864|	if ((buf->buf = malloc(len)) == NULL) {
   45|      0|		free(buf);
   46|      0|		return (NULL);
   47|      0|	}
   48|    864|	buf->size = buf->max = len;
   49|    864|	buf->fd = -1;
   50|       |
   51|    864|	return (buf);
   52|    864|}
ibuf_dynamic:
   56|    864|{
   57|    864|	struct ibuf	*buf;
   58|       |
   59|    864|	if (max < len)
   60|      0|		return (NULL);
   61|       |
   62|    864|	if ((buf = ibuf_open(len)) == NULL)
   63|      0|		return (NULL);
   64|       |
   65|    864|	if (max > 0)
   66|    864|		buf->max = max;
   67|       |
   68|    864|	return (buf);
   69|    864|}
ibuf_add:
   93|    864|{
   94|    864|	if (buf->wpos + len > buf->size)
   95|      0|		if (ibuf_realloc(buf, len) == -1)
   96|      0|			return (-1);
   97|       |
   98|    864|	memcpy(buf->buf + buf->wpos, data, len);
   99|    864|	buf->wpos += len;
  100|    864|	return (0);
  101|    864|}
ibuf_seek:
  119|  49.9k|{
  120|       |	/* only allowed to seek in already written parts */
  121|  49.9k|	if (pos + len > buf->wpos)
  122|    484|		return (NULL);
  123|       |
  124|  49.4k|	return (buf->buf + pos);
  125|  49.9k|}
ibuf_size:
  129|    528|{
  130|    528|	return (buf->wpos);
  131|    528|}
ibuf_free:
  218|      1|{
  219|      1|	if (buf == NULL)
  220|      0|		return;
  221|      1|	freezero(buf->buf, buf->size);
  222|      1|	free(buf);
  223|      1|}

strlcpy:
   29|  36.2k|{
   30|  36.2k|	const char *osrc = src;
   31|  36.2k|	size_t nleft = dsize;
   32|       |
   33|       |	/* Copy as many bytes as will fit. */
   34|  36.2k|	if (nleft != 0) {
   35|   187k|		while (--nleft != 0) {
   36|   187k|			if ((*dst++ = *src++) == '\0')
   37|  36.2k|				break;
   38|   187k|		}
   39|  36.2k|	}
   40|       |
   41|       |	/* Not enough room in dst, add NUL and traverse rest of src. */
   42|  36.2k|	if (nleft == 0) {
   43|     10|		if (dsize != 0)
   44|     10|			*dst = '\0';		/* NUL-terminate dst */
   45|     10|		while (*src++)
   46|      0|			;
   47|     10|	}
   48|       |
   49|  36.2k|	return(src - osrc - 1);	/* count does not include NUL */
   50|  36.2k|}

ikev2_pld_parse:
  117|    528|{
  118|    528|	log_debug("%s: header ispi %s rspi %s"
  119|    528|	    " nextpayload %s version 0x%02x exchange %s flags 0x%02x"
  120|    528|	    " msgid %d length %u response %d", __func__,
  121|    528|	    print_spi(betoh64(hdr->ike_ispi), 8),
  122|    528|	    print_spi(betoh64(hdr->ike_rspi), 8),
  123|    528|	    print_map(hdr->ike_nextpayload, ikev2_payload_map),
  124|    528|	    hdr->ike_version,
  125|    528|	    print_map(hdr->ike_exchange, ikev2_exchange_map),
  126|    528|	    hdr->ike_flags,
  127|    528|	    betoh32(hdr->ike_msgid),
  128|    528|	    betoh32(hdr->ike_length),
  129|    528|	    msg->msg_response);
  130|       |
  131|    528|	if (ibuf_size(msg->msg_data) < betoh32(hdr->ike_length)) {
  132|      4|		log_debug("%s: short message", __func__);
  133|      4|		return (-1);
  134|      4|	}
  135|       |
  136|    524|	offset += sizeof(*hdr);
  137|       |
  138|    524|	return (ikev2_pld_payloads(env, msg, offset,
  139|    524|	    betoh32(hdr->ike_length), hdr->ike_nextpayload));
  140|    528|}
ikev2_validate_pld:
  145|  17.0k|{
  146|  17.0k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  147|  17.0k|	size_t		 pld_length;
  148|       |
  149|       |	/* We need at least the generic header. */
  150|  17.0k|	if (left < sizeof(*pld)) {
  151|     69|		log_debug("%s: malformed payload: too short for generic "
  152|     69|		    "header (%zu < %zu)", __func__, left, sizeof(*pld));
  153|     69|		return (-1);
  154|     69|	}
  155|  16.9k|	memcpy(pld, msgbuf + offset, sizeof(*pld));
  156|       |
  157|       |	/*
  158|       |	 * We need at least the specified number of bytes.
  159|       |	 * pld_length is the full size of the payload including
  160|       |	 * the generic payload header.
  161|       |	 */
  162|  16.9k|	pld_length = betoh16(pld->pld_length);
  163|  16.9k|	if (left < pld_length) {
  164|     92|		log_debug("%s: malformed payload: shorter than specified "
  165|     92|		    "(%zu < %zu)", __func__, left, pld_length);
  166|     92|		return (-1);
  167|     92|	}
  168|       |	/*
  169|       |	 * Sanity check the specified payload size, it must
  170|       |	 * be at least the size of the generic payload header.
  171|       |	 */
  172|  16.8k|	if (pld_length < sizeof(*pld)) {
  173|     20|		log_debug("%s: malformed payload: shorter than minimum "
  174|     20|		    "header size (%zu < %zu)", __func__, pld_length,
  175|     20|		    sizeof(*pld));
  176|     20|		return (-1);
  177|     20|	}
  178|       |
  179|  16.8k|	return (0);
  180|  16.8k|}
ikev2_pld_payloads:
  185|    524|{
  186|    524|	struct ikev2_payload	 pld;
  187|    524|	unsigned int		 e;
  188|    524|	int			 ret;
  189|    524|	uint8_t			*msgbuf = ibuf_data(msg->msg_data);
  190|    524|	size_t			 total, left;
  191|       |
  192|       |	/* Check if message was decrypted in an E payload */
  193|    524|	e = msg->msg_e ? IKED_E : 0;
  194|       |
  195|       |	/* Bytes left in datagram. */
  196|    524|	total = length - offset;
  197|       |
  198|  17.3k|	while (payload != 0 && offset < length) {
  199|  17.0k|		if (ikev2_validate_pld(msg, offset, total, &pld))
  200|    181|			return (-1);
  201|       |
  202|  16.8k|		log_debug("%s: %spayload %s"
  203|  16.8k|		    " nextpayload %s critical 0x%02x length %d",
  204|  16.8k|		    __func__, e ? "decrypted " : "",
  205|  16.8k|		    print_map(payload, ikev2_payload_map),
  206|  16.8k|		    print_map(pld.pld_nextpayload, ikev2_payload_map),
  207|  16.8k|		    pld.pld_reserved & IKEV2_CRITICAL_PAYLOAD,
  208|  16.8k|		    betoh16(pld.pld_length));
  209|       |
  210|       |		/* Skip over generic payload header. */
  211|  16.8k|		offset += sizeof(pld);
  212|  16.8k|		total -= sizeof(pld);
  213|  16.8k|		left = betoh16(pld.pld_length) - sizeof(pld);
  214|  16.8k|		ret = 0;
  215|       |
  216|  16.8k|		switch (payload | e) {
  217|      0|		case IKEV2_PAYLOAD_SA:
  218|  4.13k|		case IKEV2_PAYLOAD_SA | IKED_E:
  219|  4.13k|			ret = ikev2_pld_sa(env, &pld, msg, offset, left);
  220|  4.13k|			break;
  221|      0|		case IKEV2_PAYLOAD_KE:
  222|    523|		case IKEV2_PAYLOAD_KE | IKED_E:
  223|    523|			ret = ikev2_pld_ke(env, &pld, msg, offset, left);
  224|    523|			break;
  225|  1.00k|		case IKEV2_PAYLOAD_IDi | IKED_E:
  226|  1.06k|		case IKEV2_PAYLOAD_IDr | IKED_E:
  227|  1.06k|			ret = ikev2_pld_id(env, &pld, msg, offset, left,
  228|  1.06k|			    payload);
  229|  1.06k|			break;
  230|    269|		case IKEV2_PAYLOAD_CERT | IKED_E:
  231|    269|			ret = ikev2_pld_cert(env, &pld, msg, offset, left);
  232|    269|			break;
  233|      0|		case IKEV2_PAYLOAD_CERTREQ:
  234|  1.76k|		case IKEV2_PAYLOAD_CERTREQ | IKED_E:
  235|  1.76k|			ret = ikev2_pld_certreq(env, &pld, msg, offset, left);
  236|  1.76k|			break;
  237|    286|		case IKEV2_PAYLOAD_AUTH | IKED_E:
  238|    286|			ret = ikev2_pld_auth(env, &pld, msg, offset, left);
  239|    286|			break;
  240|      0|		case IKEV2_PAYLOAD_NONCE:
  241|     53|		case IKEV2_PAYLOAD_NONCE | IKED_E:
  242|     53|			ret = ikev2_pld_nonce(env, &pld, msg, offset, left);
  243|     53|			break;
  244|      0|		case IKEV2_PAYLOAD_NOTIFY:
  245|    577|		case IKEV2_PAYLOAD_NOTIFY | IKED_E:
  246|    577|			ret = ikev2_pld_notify(env, &pld, msg, offset, left);
  247|    577|			break;
  248|    891|		case IKEV2_PAYLOAD_DELETE | IKED_E:
  249|    891|			ret = ikev2_pld_delete(env, &pld, msg, offset, left);
  250|    891|			break;
  251|     99|		case IKEV2_PAYLOAD_TSi | IKED_E:
  252|    342|		case IKEV2_PAYLOAD_TSr | IKED_E:
  253|    342|			ret = ikev2_pld_tss(env, &pld, msg, offset, left);
  254|    342|			break;
  255|      0|		case IKEV2_PAYLOAD_SK:
  256|      0|			ret = ikev2_pld_e(env, &pld, msg, offset, left);
  257|      0|			break;
  258|      0|		case IKEV2_PAYLOAD_SKF:
  259|      0|			ret = ikev2_pld_ef(env, &pld, msg, offset, left);
  260|      0|			break;
  261|    883|		case IKEV2_PAYLOAD_CP | IKED_E:
  262|    883|			ret = ikev2_pld_cp(env, &pld, msg, offset, left);
  263|    883|			break;
  264|  3.48k|		case IKEV2_PAYLOAD_EAP | IKED_E:
  265|  3.48k|			ret = ikev2_pld_eap(env, &pld, msg, offset, left);
  266|  3.48k|			break;
  267|  2.58k|		default:
  268|  2.58k|			print_hex(msgbuf, offset,
  269|  2.58k|			    betoh16(pld.pld_length) - sizeof(pld));
  270|  2.58k|			break;
  271|  16.8k|		}
  272|       |
  273|  16.8k|		if (ret != 0 && ikev2_msg_frompeer(msg)) {
  274|      0|			(void)ikev2_send_informational(env, msg);
  275|      0|			return (-1);
  276|      0|		}
  277|       |
  278|       |		/* Encrypted payloads must appear last */
  279|  16.8k|		if ((payload == IKEV2_PAYLOAD_SK) ||
  280|  16.8k|		    (payload == IKEV2_PAYLOAD_SKF))
  281|      2|			return (0);
  282|       |
  283|  16.8k|		payload = pld.pld_nextpayload;
  284|  16.8k|		offset += left;
  285|  16.8k|		total -= left;
  286|  16.8k|	}
  287|       |
  288|    341|	return (0);
  289|    524|}
ikev2_validate_sa:
  294|  5.09k|{
  295|  5.09k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  296|  5.09k|	size_t		 sap_length;
  297|       |
  298|  5.09k|	if (left < sizeof(*sap)) {
  299|  2.34k|		log_debug("%s: malformed payload: too short for header "
  300|  2.34k|		    "(%zu < %zu)", __func__, left, sizeof(*sap));
  301|  2.34k|		return (-1);
  302|  2.34k|	}
  303|  2.75k|	memcpy(sap, msgbuf + offset, sizeof(*sap));
  304|       |
  305|  2.75k|	sap_length = betoh16(sap->sap_length);
  306|  2.75k|	if (sap_length < sizeof(*sap)) {
  307|    772|		log_debug("%s: malformed payload: shorter than minimum header "
  308|    772|		    "size (%zu < %zu)", __func__, sap_length, sizeof(*sap));
  309|    772|		return (-1);
  310|    772|	}
  311|  1.97k|	if (left < sap_length) {
  312|    224|		log_debug("%s: malformed payload: too long for actual payload "
  313|    224|		    "size (%zu < %zu)", __func__, left, sap_length);
  314|    224|		return (-1);
  315|    224|	}
  316|       |	/*
  317|       |	 * If there is only one proposal, sap_length must be the
  318|       |	 * total payload size.
  319|       |	 */
  320|  1.75k|	if (!sap->sap_more && left != sap_length) {
  321|     10|		log_debug("%s: malformed payload: SA payload length mismatches "
  322|     10|		    "single proposal substructure length (%lu != %zu)",
  323|     10|		    __func__, left, sap_length);
  324|     10|		return (-1);
  325|     10|	}
  326|       |	/*
  327|       |	 * If there are more than one proposal, there must be bytes
  328|       |	 * left in the payload.
  329|       |	 */
  330|  1.74k|	if (sap->sap_more && left <= sap_length) {
  331|     19|		log_debug("%s: malformed payload: SA payload too small for "
  332|     19|		    "further proposals (%zu <= %zu)", __func__,
  333|     19|		    left, sap_length);
  334|     19|		return (-1);
  335|     19|	}
  336|  1.72k|	return (0);
  337|  1.74k|}
ikev2_pld_sa:
  342|  4.13k|{
  343|  4.13k|	struct ikev2_sa_proposal	 sap;
  344|  4.13k|	struct iked_proposal		*prop = NULL;
  345|  4.13k|	uint32_t			 spi32;
  346|  4.13k|	uint64_t			 spi = 0, spi64;
  347|  4.13k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  348|  4.13k|	int				 r;
  349|  4.13k|	struct iked_proposals		*props;
  350|  4.13k|	size_t				 total;
  351|       |
  352|  5.09k|	do {
  353|  5.09k|		if (ikev2_validate_sa(msg, offset, left, &sap))
  354|  3.36k|			return (-1);
  355|       |
  356|       |		/* Assumed size of the first proposals, including SPI if present. */
  357|  1.72k|		total = (betoh16(sap.sap_length) - sizeof(sap));
  358|       |
  359|  1.72k|		props = &msg->msg_parent->msg_proposals;
  360|       |
  361|  1.72k|		offset += sizeof(sap);
  362|  1.72k|		left -= sizeof(sap);
  363|       |
  364|  1.72k|		if (sap.sap_spisize) {
  365|    173|			if (left < sap.sap_spisize) {
  366|     10|				log_debug("%s: malformed payload: SPI larger than "
  367|     10|				    "actual payload (%zu < %d)", __func__, left,
  368|     10|				    sap.sap_spisize);
  369|     10|				return (-1);
  370|     10|			}
  371|    163|			if (total < sap.sap_spisize) {
  372|     34|				log_debug("%s: malformed payload: SPI larger than "
  373|     34|				    "proposal (%zu < %d)", __func__, total,
  374|     34|				    sap.sap_spisize);
  375|     34|				return (-1);
  376|     34|			}
  377|    129|			switch (sap.sap_spisize) {
  378|     75|			case 4:
  379|     75|				memcpy(&spi32, msgbuf + offset, 4);
  380|     75|				spi = betoh32(spi32);
  381|     75|				break;
  382|     41|			case 8:
  383|     41|				memcpy(&spi64, msgbuf + offset, 8);
  384|     41|				spi = betoh64(spi64);
  385|     41|				break;
  386|     13|			default:
  387|     13|				log_debug("%s: unsupported SPI size %d",
  388|     13|				    __func__, sap.sap_spisize);
  389|     13|				return (-1);
  390|    129|			}
  391|       |
  392|    116|			offset += sap.sap_spisize;
  393|    116|			left -= sap.sap_spisize;
  394|       |
  395|       |			/* Assumed size of the proposal, now without SPI. */
  396|    116|			total -= sap.sap_spisize;
  397|    116|		}
  398|       |
  399|       |		/*
  400|       |		 * As we verified sanity of packet headers, this check will
  401|       |		 * be always false, but just to be sure we keep it.
  402|       |		 */
  403|  1.66k|		if (left < total) {
  404|      0|			log_debug("%s: malformed payload: too long for payload "
  405|      0|			    "(%zu < %zu)", __func__, left, total);
  406|      0|			return (-1);
  407|      0|		}
  408|       |
  409|  1.66k|		log_debug("%s: more %d reserved %d length %d"
  410|  1.66k|		    " proposal #%d protoid %s spisize %d xforms %d spi %s",
  411|  1.66k|		    __func__, sap.sap_more, sap.sap_reserved,
  412|  1.66k|		    betoh16(sap.sap_length), sap.sap_proposalnr,
  413|  1.66k|		    print_map(sap.sap_protoid, ikev2_saproto_map), sap.sap_spisize,
  414|  1.66k|		    sap.sap_transforms, print_spi(spi, sap.sap_spisize));
  415|       |
  416|  1.66k|		if (ikev2_msg_frompeer(msg)) {
  417|      0|			if ((msg->msg_parent->msg_prop = config_add_proposal(props,
  418|      0|			    sap.sap_proposalnr, sap.sap_protoid)) == NULL) {
  419|      0|				log_debug("%s: invalid proposal", __func__);
  420|      0|				return (-1);
  421|      0|			}
  422|      0|			prop = msg->msg_parent->msg_prop;
  423|      0|			prop->prop_peerspi.spi = spi;
  424|      0|			prop->prop_peerspi.spi_protoid = sap.sap_protoid;
  425|      0|			prop->prop_peerspi.spi_size = sap.sap_spisize;
  426|       |
  427|      0|			prop->prop_localspi.spi_protoid = sap.sap_protoid;
  428|      0|			prop->prop_localspi.spi_size = sap.sap_spisize;
  429|      0|		}
  430|       |
  431|       |		/*
  432|       |		 * Parse the attached transforms
  433|       |		 */
  434|  1.66k|		if (sap.sap_transforms) {
  435|    825|			r = ikev2_pld_xform(env, msg, offset, total);
  436|    825|			if ((r == -2) && ikev2_msg_frompeer(msg)) {
  437|      0|				log_debug("%s: invalid proposal transform",
  438|      0|				    __func__);
  439|       |
  440|       |				/* cleanup and ignore proposal */
  441|      0|				config_free_proposal(props, prop);
  442|      0|				prop = msg->msg_parent->msg_prop = NULL;
  443|    825|			} else if (r != 0) {
  444|    509|				log_debug("%s: invalid proposal transforms",
  445|    509|				    __func__);
  446|    509|				return (-1);
  447|    509|			}
  448|    825|		}
  449|       |
  450|  1.15k|		offset += total;
  451|  1.15k|		left -= total;
  452|  1.15k|	} while (sap.sap_more);
  453|       |
  454|    196|	return (0);
  455|  4.13k|}
ikev2_validate_xform:
  460|  1.00k|{
  461|  1.00k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  462|  1.00k|	size_t		 xfrm_length;
  463|       |
  464|  1.00k|	if (total < sizeof(*xfrm)) {
  465|    129|		log_debug("%s: malformed payload: too short for header "
  466|    129|		    "(%zu < %zu)", __func__, total, sizeof(*xfrm));
  467|    129|		return (-1);
  468|    129|	}
  469|    880|	memcpy(xfrm, msgbuf + offset, sizeof(*xfrm));
  470|       |
  471|    880|	xfrm_length = betoh16(xfrm->xfrm_length);
  472|    880|	if (xfrm_length < sizeof(*xfrm)) {
  473|     65|		log_debug("%s: malformed payload: shorter than minimum header "
  474|     65|		    "size (%zu < %zu)", __func__, xfrm_length, sizeof(*xfrm));
  475|     65|		return (-1);
  476|     65|	}
  477|    815|	if (total < xfrm_length) {
  478|     39|		log_debug("%s: malformed payload: too long for payload size "
  479|     39|		    "(%zu < %zu)", __func__, total, xfrm_length);
  480|     39|		return (-1);
  481|     39|	}
  482|       |
  483|    776|	return (0);
  484|    815|}
ikev2_pld_xform:
  489|  1.00k|{
  490|  1.00k|	struct ikev2_transform		 xfrm;
  491|  1.00k|	char				 id[BUFSIZ];
  492|  1.00k|	int				 ret = 0;
  493|  1.00k|	int				 r;
  494|  1.00k|	size_t				 xfrm_length;
  495|       |
  496|  1.00k|	if (ikev2_validate_xform(msg, offset, total, &xfrm))
  497|    233|		return (-1);
  498|       |
  499|    776|	xfrm_length = betoh16(xfrm.xfrm_length);
  500|       |
  501|    776|	switch (xfrm.xfrm_type) {
  502|    322|	case IKEV2_XFORMTYPE_ENCR:
  503|    322|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  504|    322|		    ikev2_xformencr_map), sizeof(id));
  505|    322|		break;
  506|    162|	case IKEV2_XFORMTYPE_PRF:
  507|    162|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  508|    162|		    ikev2_xformprf_map), sizeof(id));
  509|    162|		break;
  510|     44|	case IKEV2_XFORMTYPE_INTEGR:
  511|     44|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  512|     44|		    ikev2_xformauth_map), sizeof(id));
  513|     44|		break;
  514|     30|	case IKEV2_XFORMTYPE_DH:
  515|     30|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  516|     30|		    ikev2_xformdh_map), sizeof(id));
  517|     30|		break;
  518|     11|	case IKEV2_XFORMTYPE_ESN:
  519|     11|		strlcpy(id, print_map(betoh16(xfrm.xfrm_id),
  520|     11|		    ikev2_xformesn_map), sizeof(id));
  521|     11|		break;
  522|    207|	default:
  523|    207|		snprintf(id, sizeof(id), "<%d>", betoh16(xfrm.xfrm_id));
  524|    207|		break;
  525|    776|	}
  526|       |
  527|    776|	log_debug("%s: more %d reserved %d length %zu"
  528|    776|	    " type %s id %s",
  529|    776|	    __func__, xfrm.xfrm_more, xfrm.xfrm_reserved, xfrm_length,
  530|    776|	    print_map(xfrm.xfrm_type, ikev2_xformtype_map), id);
  531|       |
  532|       |	/*
  533|       |	 * Parse transform attributes, if available
  534|       |	 */
  535|    776|	msg->msg_attrlength = 0;
  536|    776|	if (xfrm_length > sizeof(xfrm)) {
  537|    343|		if (ikev2_pld_attr(env, &xfrm, msg, offset + sizeof(xfrm),
  538|    343|		    xfrm_length - sizeof(xfrm)) != 0) {
  539|    219|			return (-1);
  540|    219|		}
  541|    343|	}
  542|       |
  543|    557|	if (ikev2_msg_frompeer(msg)) {
  544|      0|		r = config_add_transform(msg->msg_parent->msg_prop,
  545|      0|		    xfrm.xfrm_type, betoh16(xfrm.xfrm_id),
  546|      0|		    msg->msg_attrlength, msg->msg_attrlength);
  547|      0|		if (r == -1) {
  548|      0|			log_debug("%s: failed to add transform: alloc error",
  549|      0|			    __func__);
  550|      0|			return (r);
  551|      0|		} else if (r == -2) {
  552|      0|			log_debug("%s: failed to add transform: unknown type",
  553|      0|			    __func__);
  554|      0|			return (r);
  555|      0|		}
  556|      0|	}
  557|       |
  558|       |	/* Next transform */
  559|    557|	offset += xfrm_length;
  560|    557|	total -= xfrm_length;
  561|    557|	if (xfrm.xfrm_more == IKEV2_XFORM_MORE)
  562|    184|		ret = ikev2_pld_xform(env, msg, offset, total);
  563|    373|	else if (total != 0) {
  564|       |		/* No more transforms but still some data left. */
  565|     57|		log_debug("%s: less data than specified, %zu bytes left",
  566|     57|		    __func__, total);
  567|     57|		ret = -1;
  568|     57|	}
  569|       |
  570|    557|	return (ret);
  571|    557|}
ikev2_validate_attr:
  576|    555|{
  577|    555|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  578|       |
  579|    555|	if (total < sizeof(*attr)) {
  580|     40|		log_debug("%s: malformed payload: too short for header "
  581|     40|		    "(%zu < %zu)", __func__, total, sizeof(*attr));
  582|     40|		return (-1);
  583|     40|	}
  584|    515|	memcpy(attr, msgbuf + offset, sizeof(*attr));
  585|       |
  586|    515|	return (0);
  587|    555|}
ikev2_pld_attr:
  592|    555|{
  593|    555|	struct ikev2_attribute		 attr;
  594|    555|	unsigned int			 type;
  595|    555|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  596|    555|	int				 ret = 0;
  597|    555|	size_t				 attr_length;
  598|       |
  599|    555|	if (ikev2_validate_attr(msg, offset, total, &attr))
  600|     40|		return (-1);
  601|       |
  602|    515|	type = betoh16(attr.attr_type) & ~IKEV2_ATTRAF_TV;
  603|       |
  604|    515|	log_debug("%s: attribute type %s length %d total %zu",
  605|    515|	    __func__, print_map(type, ikev2_attrtype_map),
  606|    515|	    betoh16(attr.attr_length), total);
  607|       |
  608|    515|	if (betoh16(attr.attr_type) & IKEV2_ATTRAF_TV) {
  609|       |		/* Type-Value attribute */
  610|    253|		offset += sizeof(attr);
  611|    253|		total -= sizeof(attr);
  612|       |
  613|    253|		if (type == IKEV2_ATTRTYPE_KEY_LENGTH)
  614|     19|			msg->msg_attrlength = betoh16(attr.attr_length);
  615|    262|	} else {
  616|       |		/* Type-Length-Value attribute */
  617|    262|		attr_length = betoh16(attr.attr_length);
  618|    262|		if (attr_length < sizeof(attr)) {
  619|    107|			log_debug("%s: malformed payload: shorter than "
  620|    107|			    "minimum header size (%zu < %zu)", __func__,
  621|    107|			    attr_length, sizeof(attr));
  622|    107|			return (-1);
  623|    107|		}
  624|    155|		if (total < attr_length) {
  625|     72|			log_debug("%s: malformed payload: attribute larger "
  626|     72|			    "than actual payload (%zu < %zu)", __func__,
  627|     72|			    total, attr_length);
  628|     72|			return (-1);
  629|     72|		}
  630|     83|		print_hex(msgbuf, offset + sizeof(attr),
  631|     83|		    attr_length - sizeof(attr));
  632|     83|		offset += attr_length;
  633|     83|		total -= attr_length;
  634|     83|	}
  635|       |
  636|    336|	if (total > 0) {
  637|       |		/* Next attribute */
  638|    212|		ret = ikev2_pld_attr(env, xfrm, msg, offset, total);
  639|    212|	}
  640|       |
  641|    336|	return (ret);
  642|    515|}
ikev2_validate_ke:
  647|    523|{
  648|    523|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  649|       |
  650|    523|	if (left < sizeof(*kex)) {
  651|    365|		log_debug("%s: malformed payload: too short for header "
  652|    365|		    "(%zu < %zu)", __func__, left, sizeof(*kex));
  653|    365|		return (-1);
  654|    365|	}
  655|    158|	memcpy(kex, msgbuf + offset, sizeof(*kex));
  656|       |
  657|    158|	return (0);
  658|    523|}
ikev2_pld_ke:
  663|    523|{
  664|    523|	struct ikev2_keyexchange	 kex;
  665|    523|	uint8_t				*buf;
  666|    523|	size_t				 len;
  667|    523|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  668|       |
  669|    523|	if (ikev2_validate_ke(msg, offset, left, &kex))
  670|    365|		return (-1);
  671|       |
  672|    158|	log_debug("%s: dh group %s reserved %d", __func__,
  673|    158|	    print_map(betoh16(kex.kex_dhgroup), ikev2_xformdh_map),
  674|    158|	    betoh16(kex.kex_reserved));
  675|       |
  676|    158|	buf = msgbuf + offset + sizeof(kex);
  677|    158|	len = left - sizeof(kex);
  678|       |
  679|    158|	if (len == 0) {
  680|     13|		log_debug("%s: malformed payload: no KE data given", __func__);
  681|     13|		return (-1);
  682|     13|	}
  683|       |
  684|    145|	print_hex(buf, 0, len);
  685|       |
  686|    145|	if (ikev2_msg_frompeer(msg)) {
  687|      0|		if (ibuf_length(msg->msg_parent->msg_ke)) {
  688|      0|			log_info("%s: duplicate KE payload", __func__);
  689|      0|			return (-1);
  690|      0|		}
  691|      0|		if ((msg->msg_parent->msg_ke = ibuf_new(buf, len)) == NULL) {
  692|      0|			log_debug("%s: failed to get exchange", __func__);
  693|      0|			return (-1);
  694|      0|		}
  695|      0|		msg->msg_parent->msg_dhgroup = betoh16(kex.kex_dhgroup);
  696|      0|	}
  697|       |
  698|    145|	return (0);
  699|    145|}
ikev2_validate_id:
  704|  1.06k|{
  705|  1.06k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  706|       |
  707|  1.06k|	if (left < sizeof(*id)) {
  708|    674|		log_debug("%s: malformed payload: too short for header "
  709|    674|		    "(%zu < %zu)", __func__, left, sizeof(*id));
  710|    674|		return (-1);
  711|    674|	}
  712|    389|	memcpy(id, msgbuf + offset, sizeof(*id));
  713|       |
  714|    389|	if (id->id_type == IKEV2_ID_NONE) {
  715|     55|		log_debug("%s: malformed payload: invalid ID type.",
  716|     55|		    __func__);
  717|     55|		return (-1);
  718|     55|	}
  719|       |
  720|    334|	return (0);
  721|    389|}
ikev2_pld_id:
  726|  1.06k|{
  727|  1.06k|	uint8_t				*ptr;
  728|  1.06k|	struct ikev2_id			 id;
  729|  1.06k|	size_t				 len;
  730|  1.06k|	struct iked_id			*idp, idb;
  731|  1.06k|	const struct iked_sa		*sa = msg->msg_sa;
  732|  1.06k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  733|  1.06k|	char				 idstr[IKED_ID_SIZE];
  734|       |
  735|  1.06k|	if (ikev2_validate_id(msg, offset, left, &id))
  736|    729|		return (-1);
  737|       |
  738|    334|	bzero(&idb, sizeof(idb));
  739|       |
  740|       |	/* Don't strip the Id payload header */
  741|    334|	ptr = msgbuf + offset;
  742|    334|	len = left;
  743|       |
  744|    334|	idb.id_type = id.id_type;
  745|    334|	idb.id_offset = sizeof(id);
  746|    334|	if ((idb.id_buf = ibuf_new(ptr, len)) == NULL)
  747|      0|		return (-1);
  748|       |
  749|    334|	if (ikev2_print_id(&idb, idstr, sizeof(idstr)) == -1) {
  750|      0|		ibuf_release(idb.id_buf);
  751|      0|		log_debug("%s: malformed id", __func__);
  752|      0|		return (-1);
  753|      0|	}
  754|       |
  755|    334|	log_debug("%s: id %s length %zu", __func__, idstr, len);
  756|       |
  757|    334|	if (!ikev2_msg_frompeer(msg)) {
  758|    334|		ibuf_release(idb.id_buf);
  759|    334|		return (0);
  760|    334|	}
  761|       |
  762|      0|	if (((sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr) ||
  763|      0|	    (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDi)))
  764|      0|		idp = &msg->msg_parent->msg_peerid;
  765|      0|	else if (!sa->sa_hdr.sh_initiator && payload == IKEV2_PAYLOAD_IDr)
  766|      0|		idp = &msg->msg_parent->msg_localid;
  767|      0|	else {
  768|      0|		ibuf_release(idb.id_buf);
  769|      0|		log_debug("%s: unexpected id payload", __func__);
  770|      0|		return (0);
  771|      0|	}
  772|       |
  773|      0|	if (idp->id_type) {
  774|      0|		ibuf_release(idb.id_buf);
  775|      0|		log_debug("%s: duplicate id payload", __func__);
  776|      0|		return (-1);
  777|      0|	}
  778|       |
  779|      0|	idp->id_buf = idb.id_buf;
  780|      0|	idp->id_offset = idb.id_offset;
  781|      0|	idp->id_type = idb.id_type;
  782|       |
  783|      0|	return (0);
  784|      0|}
ikev2_validate_cert:
  789|    269|{
  790|    269|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  791|       |
  792|    269|	if (left < sizeof(*cert)) {
  793|     68|		log_debug("%s: malformed payload: too short for header "
  794|     68|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  795|     68|		return (-1);
  796|     68|	}
  797|    201|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  798|       |
  799|    201|	return (0);
  800|    269|}
ikev2_pld_cert:
  805|    269|{
  806|    269|	struct ikev2_cert		 cert;
  807|    269|	uint8_t				*buf;
  808|    269|	size_t				 len;
  809|    269|	struct iked_id			*certid;
  810|    269|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  811|    269|	const struct iked_sa		*sa = msg->msg_sa;
  812|       |
  813|    269|	if (ikev2_validate_cert(msg, offset, left, &cert))
  814|     68|		return (-1);
  815|    201|	offset += sizeof(cert);
  816|       |
  817|    201|	buf = msgbuf + offset;
  818|    201|	len = left - sizeof(cert);
  819|       |
  820|    201|	log_debug("%s: type %s length %zu",
  821|    201|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  822|       |
  823|    201|	print_hex(buf, 0, len);
  824|       |
  825|    201|	if (!ikev2_msg_frompeer(msg))
  826|    201|		return (0);
  827|       |
  828|      0|	certid = &msg->msg_parent->msg_cert;
  829|      0|	if (certid->id_type) {
  830|      0|		log_info("%s: multiple cert payloads not supported",
  831|      0|		   SPI_SA(sa, __func__));
  832|      0|		return (-1);
  833|      0|	}
  834|       |
  835|      0|	if ((certid->id_buf = ibuf_new(buf, len)) == NULL) {
  836|      0|		log_debug("%s: failed to save cert", __func__);
  837|      0|		return (-1);
  838|      0|	}
  839|      0|	certid->id_type = cert.cert_type;
  840|      0|	certid->id_offset = 0;
  841|       |
  842|      0|	return (0);
  843|      0|}
ikev2_validate_certreq:
  848|  1.76k|{
  849|  1.76k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  850|       |
  851|  1.76k|	if (left < sizeof(*cert)) {
  852|    553|		log_debug("%s: malformed payload: too short for header "
  853|    553|		    "(%zu < %zu)", __func__, left, sizeof(*cert));
  854|    553|		return (-1);
  855|    553|	}
  856|  1.20k|	memcpy(cert, msgbuf + offset, sizeof(*cert));
  857|       |
  858|  1.20k|	return (0);
  859|  1.76k|}
ikev2_pld_certreq:
  864|  1.76k|{
  865|  1.76k|	struct ikev2_cert		 cert;
  866|  1.76k|	struct iked_certreq		*cr;
  867|  1.76k|	uint8_t				*buf;
  868|  1.76k|	ssize_t				 len;
  869|  1.76k|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  870|       |
  871|  1.76k|	if (ikev2_validate_certreq(msg, offset, left, &cert))
  872|    553|		return (-1);
  873|  1.20k|	offset += sizeof(cert);
  874|       |
  875|  1.20k|	buf = msgbuf + offset;
  876|  1.20k|	len = left - sizeof(cert);
  877|       |
  878|  1.20k|	log_debug("%s: type %s length %zd",
  879|  1.20k|	    __func__, print_map(cert.cert_type, ikev2_cert_map), len);
  880|       |
  881|  1.20k|	print_hex(buf, 0, len);
  882|       |
  883|  1.20k|	if (!ikev2_msg_frompeer(msg))
  884|  1.20k|		return (0);
  885|       |
  886|      0|	if (cert.cert_type == IKEV2_CERT_X509_CERT) {
  887|      0|		if (len == 0) {
  888|      0|			log_info("%s: invalid length 0", __func__);
  889|      0|			return (0);
  890|      0|		}
  891|      0|		if ((len % SHA_DIGEST_LENGTH) != 0) {
  892|      0|			log_info("%s: invalid certificate request",
  893|      0|			    __func__);
  894|      0|			return (-1);
  895|      0|		}
  896|      0|	}
  897|       |
  898|      0|	if ((cr = calloc(1, sizeof(struct iked_certreq))) == NULL) {
  899|      0|		log_info("%s: failed to allocate certreq.", __func__);
  900|      0|		return (-1);
  901|      0|	}
  902|      0|	if ((cr->cr_data = ibuf_new(buf, len)) == NULL) {
  903|      0|		log_info("%s: failed to allocate buffer.", __func__);
  904|      0|		free(cr);
  905|      0|		return (-1);
  906|      0|	}
  907|      0|	cr->cr_type = cert.cert_type;
  908|      0|	SIMPLEQ_INSERT_TAIL(&msg->msg_parent->msg_certreqs, cr, cr_entry);
  909|       |
  910|      0|	return (0);
  911|      0|}
ikev2_validate_auth:
  916|    286|{
  917|    286|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  918|       |
  919|    286|	if (left < sizeof(*auth)) {
  920|     36|		log_debug("%s: malformed payload: too short for header "
  921|     36|		    "(%zu < %zu)", __func__, left, sizeof(*auth));
  922|     36|		return (-1);
  923|     36|	}
  924|    250|	memcpy(auth, msgbuf + offset, sizeof(*auth));
  925|       |
  926|    250|	if (auth->auth_method == 0) {
  927|    127|		log_info("%s: malformed payload: invalid auth method",
  928|    127|		    __func__);
  929|    127|		return (-1);
  930|    127|	}
  931|       |
  932|    123|	return (0);
  933|    250|}
ikev2_pld_auth:
  938|    286|{
  939|    286|	struct ikev2_auth		 auth;
  940|    286|	struct iked_id			*idp;
  941|    286|	uint8_t				*buf;
  942|    286|	size_t				 len;
  943|    286|	uint8_t				*msgbuf = ibuf_data(msg->msg_data);
  944|       |
  945|    286|	if (ikev2_validate_auth(msg, offset, left, &auth))
  946|    163|		return (-1);
  947|    123|	offset += sizeof(auth);
  948|       |
  949|    123|	buf = msgbuf + offset;
  950|    123|	len = left - sizeof(auth);
  951|       |
  952|    123|	log_debug("%s: method %s length %zu",
  953|    123|	    __func__, print_map(auth.auth_method, ikev2_auth_map), len);
  954|       |
  955|    123|	print_hex(buf, 0, len);
  956|       |
  957|    123|	if (!ikev2_msg_frompeer(msg))
  958|    123|		return (0);
  959|       |
  960|      0|	idp = &msg->msg_parent->msg_auth;
  961|      0|	if (idp->id_type) {
  962|      0|		log_debug("%s: duplicate auth payload", __func__);
  963|      0|		return (-1);
  964|      0|	}
  965|       |
  966|      0|	ibuf_release(idp->id_buf);
  967|      0|	idp->id_type = auth.auth_method;
  968|      0|	idp->id_offset = 0;
  969|      0|	if ((idp->id_buf = ibuf_new(buf, len)) == NULL)
  970|      0|		return (-1);
  971|       |
  972|      0|	return (0);
  973|      0|}
ikev2_pld_nonce:
  978|     53|{
  979|     53|	size_t		 len;
  980|     53|	uint8_t		*buf;
  981|     53|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
  982|       |
  983|     53|	buf = msgbuf + offset;
  984|     53|	len = left;
  985|       |
  986|     53|	if (len == 0) {
  987|     34|		log_debug("%s: malformed payload: no NONCE given", __func__);
  988|     34|		return (-1);
  989|     34|	}
  990|       |
  991|     19|	print_hex(buf, 0, len);
  992|       |
  993|     19|	if (ikev2_msg_frompeer(msg)) {
  994|      0|		if (ibuf_length(msg->msg_parent->msg_nonce)) {
  995|      0|			log_info("%s: duplicate NONCE payload", __func__);
  996|      0|			return (-1);
  997|      0|		}
  998|      0|		if ((msg->msg_nonce = ibuf_new(buf, len)) == NULL) {
  999|      0|			log_debug("%s: failed to get peer nonce", __func__);
 1000|      0|			return (-1);
 1001|      0|		}
 1002|      0|		msg->msg_parent->msg_nonce = msg->msg_nonce;
 1003|      0|	}
 1004|       |
 1005|     19|	return (0);
 1006|     19|}
ikev2_validate_notify:
 1011|    577|{
 1012|    577|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1013|       |
 1014|    577|	if (left < sizeof(*n)) {
 1015|    377|		log_debug("%s: malformed payload: too short for header "
 1016|    377|		    "(%zu < %zu)", __func__, left, sizeof(*n));
 1017|    377|		return (-1);
 1018|    377|	}
 1019|    200|	memcpy(n, msgbuf + offset, sizeof(*n));
 1020|       |
 1021|    200|	return (0);
 1022|    577|}
ikev2_pld_notify:
 1027|    577|{
 1028|    577|	struct ikev2_notify	 n;
 1029|    577|	const struct iked_sa	*sa = msg->msg_sa;
 1030|    577|	uint8_t			*buf, md[SHA_DIGEST_LENGTH];
 1031|    577|	uint32_t		 spi32;
 1032|    577|	uint64_t		 spi64;
 1033|    577|	struct iked_spi		*rekey;
 1034|    577|	uint16_t		 type;
 1035|    577|	uint16_t		 signature_hash;
 1036|       |
 1037|    577|	if (ikev2_validate_notify(msg, offset, left, &n))
 1038|    377|		return (-1);
 1039|    200|	type = betoh16(n.n_type);
 1040|       |
 1041|    200|	log_debug("%s: protoid %s spisize %d type %s",
 1042|    200|	    __func__,
 1043|    200|	    print_map(n.n_protoid, ikev2_saproto_map), n.n_spisize,
 1044|    200|	    print_map(type, ikev2_n_map));
 1045|       |
 1046|    200|	left -= sizeof(n);
 1047|    200|	if ((buf = ibuf_seek(msg->msg_data, offset + sizeof(n), left)) == NULL)
 1048|      0|		return (-1);
 1049|       |
 1050|    200|	print_hex(buf, 0, left);
 1051|       |
 1052|    200|	if (!ikev2_msg_frompeer(msg))
 1053|    200|		return (0);
 1054|       |
 1055|      0|	switch (type) {
 1056|      0|	case IKEV2_N_NAT_DETECTION_SOURCE_IP:
 1057|      0|	case IKEV2_N_NAT_DETECTION_DESTINATION_IP:
 1058|      0|		if (left != sizeof(md)) {
 1059|      0|			log_debug("%s: malformed payload: hash size mismatch"
 1060|      0|			    " (%zu != %zu)", __func__, left, sizeof(md));
 1061|      0|			return (-1);
 1062|      0|		}
 1063|      0|		if (ikev2_nat_detection(env, msg, md, sizeof(md), type,
 1064|      0|		    ikev2_msg_frompeer(msg)) == -1)
 1065|      0|			return (-1);
 1066|      0|		if (memcmp(buf, md, left) != 0) {
 1067|      0|			log_debug("%s: %s detected NAT", __func__,
 1068|      0|			    print_map(type, ikev2_n_map));
 1069|      0|			if (type == IKEV2_N_NAT_DETECTION_SOURCE_IP)
 1070|      0|				msg->msg_parent->msg_nat_detected
 1071|      0|				    |= IKED_MSG_NAT_SRC_IP;
 1072|      0|			else
 1073|      0|				msg->msg_parent->msg_nat_detected
 1074|      0|				    |= IKED_MSG_NAT_DST_IP;
 1075|      0|		}
 1076|      0|		print_hex(md, 0, sizeof(md));
 1077|       |		/* remember for MOBIKE */
 1078|      0|		msg->msg_parent->msg_natt_rcvd = 1;
 1079|      0|		break;
 1080|      0|	case IKEV2_N_AUTHENTICATION_FAILED:
 1081|      0|		if (!msg->msg_e) {
 1082|      0|			log_debug("%s: AUTHENTICATION_FAILED not encrypted",
 1083|      0|			    __func__);
 1084|      0|			return (-1);
 1085|      0|		}
 1086|       |		/*
 1087|       |		 * If we are the responder, then we only accept
 1088|       |		 * AUTHENTICATION_FAILED from authenticated peers.
 1089|       |		 * If we are the initiator, the peer cannot be authenticated.
 1090|       |		 */
 1091|      0|		if (!sa->sa_hdr.sh_initiator) {
 1092|      0|			if (!sa_stateok(sa, IKEV2_STATE_VALID)) {
 1093|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1094|      0|				    " from unauthenticated initiator",
 1095|      0|				    __func__);
 1096|      0|				return (-1);
 1097|      0|			}
 1098|      0|		} else {
 1099|      0|			if (sa_stateok(sa, IKEV2_STATE_VALID)) {
 1100|      0|				log_debug("%s: ignoring AUTHENTICATION_FAILED"
 1101|      0|				    " from authenticated responder",
 1102|      0|				    __func__);
 1103|      0|				return (-1);
 1104|      0|			}
 1105|      0|		}
 1106|      0|		msg->msg_parent->msg_flags
 1107|      0|		    |= IKED_MSG_FLAGS_AUTHENTICATION_FAILED;
 1108|      0|		break;
 1109|      0|	case IKEV2_N_INVALID_KE_PAYLOAD:
 1110|      0|		if (sa_stateok(sa, IKEV2_STATE_VALID) &&
 1111|      0|		    !msg->msg_e) {
 1112|      0|			log_debug("%s: INVALID_KE_PAYLOAD not encrypted",
 1113|      0|			    __func__);
 1114|      0|			return (-1);
 1115|      0|		}
 1116|      0|		if (left != sizeof(msg->msg_parent->msg_group)) {
 1117|      0|			log_debug("%s: malformed payload: group size mismatch"
 1118|      0|			    " (%zu != %zu)", __func__, left,
 1119|      0|			    sizeof(msg->msg_parent->msg_group));
 1120|      0|			return (-1);
 1121|      0|		}
 1122|      0|		memcpy(&msg->msg_parent->msg_group, buf, left);
 1123|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_INVALID_KE;
 1124|      0|		break;
 1125|      0|	case IKEV2_N_NO_ADDITIONAL_SAS:
 1126|      0|		if (!msg->msg_e) {
 1127|      0|			log_debug("%s: NO_ADDITIONAL_SAS not encrypted",
 1128|      0|			    __func__);
 1129|      0|			return (-1);
 1130|      0|		}
 1131|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_ADDITIONAL_SAS;
 1132|      0|		break;
 1133|      0|	case IKEV2_N_REKEY_SA:
 1134|      0|		if (!msg->msg_e) {
 1135|      0|			log_debug("%s: N_REKEY_SA not encrypted", __func__);
 1136|      0|			return (-1);
 1137|      0|		}
 1138|      0|		if (left != n.n_spisize) {
 1139|      0|			log_debug("%s: malformed notification", __func__);
 1140|      0|			return (-1);
 1141|      0|		}
 1142|      0|		rekey = &msg->msg_parent->msg_rekey;
 1143|      0|		if (rekey->spi != 0) {
 1144|      0|			log_debug("%s: rekeying of multiple SAs not supported",
 1145|      0|			    __func__);
 1146|      0|			return (-1);
 1147|      0|		}
 1148|      0|		switch (n.n_spisize) {
 1149|      0|		case 4:
 1150|      0|			memcpy(&spi32, buf, left);
 1151|      0|			rekey->spi = betoh32(spi32);
 1152|      0|			break;
 1153|      0|		case 8:
 1154|      0|			memcpy(&spi64, buf, left);
 1155|      0|			rekey->spi = betoh64(spi64);
 1156|      0|			break;
 1157|      0|		default:
 1158|      0|			log_debug("%s: invalid spi size %d", __func__,
 1159|      0|			    n.n_spisize);
 1160|      0|			return (-1);
 1161|      0|		}
 1162|      0|		rekey->spi_size = n.n_spisize;
 1163|      0|		rekey->spi_protoid = n.n_protoid;
 1164|       |
 1165|      0|		log_debug("%s: rekey %s spi %s", __func__,
 1166|      0|		    print_map(n.n_protoid, ikev2_saproto_map),
 1167|      0|		    print_spi(rekey->spi, n.n_spisize));
 1168|      0|		break;
 1169|      0|	case IKEV2_N_TEMPORARY_FAILURE:
 1170|      0|		if (!msg->msg_e) {
 1171|      0|			log_debug("%s: IKEV2_N_TEMPORARY_FAILURE not encrypted",
 1172|      0|			    __func__);
 1173|      0|			return (-1);
 1174|      0|		}
 1175|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_TEMPORARY_FAILURE;
 1176|      0|		break;
 1177|      0|	case IKEV2_N_IPCOMP_SUPPORTED:
 1178|      0|		if (!msg->msg_e) {
 1179|      0|			log_debug("%s: N_IPCOMP_SUPPORTED not encrypted",
 1180|      0|			    __func__);
 1181|      0|			return (-1);
 1182|      0|		}
 1183|      0|		if (left < sizeof(msg->msg_parent->msg_cpi) +
 1184|      0|		    sizeof(msg->msg_parent->msg_transform)) {
 1185|      0|			log_debug("%s: ignoring malformed ipcomp notification",
 1186|      0|			    __func__);
 1187|      0|			return (0);
 1188|      0|		}
 1189|      0|		memcpy(&msg->msg_parent->msg_cpi, buf,
 1190|      0|		    sizeof(msg->msg_parent->msg_cpi));
 1191|      0|		memcpy(&msg->msg_parent->msg_transform,
 1192|      0|		    buf + sizeof(msg->msg_parent->msg_cpi),
 1193|      0|		    sizeof(msg->msg_parent->msg_transform));
 1194|       |
 1195|      0|		log_debug("%s: %s cpi 0x%x, transform %s, length %zu", __func__,
 1196|      0|		    msg->msg_parent->msg_response ? "res" : "req",
 1197|      0|		    betoh16(msg->msg_parent->msg_cpi),
 1198|      0|		    print_map(msg->msg_parent->msg_transform,
 1199|      0|		    ikev2_ipcomp_map), left);
 1200|       |
 1201|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_IPCOMP_SUPPORTED;
 1202|      0|		break;
 1203|      0|	case IKEV2_N_CHILD_SA_NOT_FOUND:
 1204|      0|		if (!msg->msg_e) {
 1205|      0|			log_debug("%s: N_CHILD_SA_NOT_FOUND not encrypted",
 1206|      0|			    __func__);
 1207|      0|			return (-1);
 1208|      0|		}
 1209|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_CHILD_SA_NOT_FOUND;
 1210|      0|		break;
 1211|      0|	case IKEV2_N_NO_PROPOSAL_CHOSEN:
 1212|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_NO_PROPOSAL_CHOSEN;
 1213|      0|		break;
 1214|      0|	case IKEV2_N_MOBIKE_SUPPORTED:
 1215|      0|		if (!msg->msg_e) {
 1216|      0|			log_debug("%s: N_MOBIKE_SUPPORTED not encrypted",
 1217|      0|			    __func__);
 1218|      0|			return (-1);
 1219|      0|		}
 1220|      0|		if (left != 0) {
 1221|      0|			log_debug("%s: ignoring malformed mobike"
 1222|      0|			    " notification: %zu", __func__, left);
 1223|      0|			return (0);
 1224|      0|		}
 1225|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_MOBIKE;
 1226|      0|		break;
 1227|      0|	case IKEV2_N_USE_TRANSPORT_MODE:
 1228|      0|		if (!msg->msg_e) {
 1229|      0|			log_debug("%s: N_USE_TRANSPORT_MODE not encrypted",
 1230|      0|			    __func__);
 1231|      0|			return (-1);
 1232|      0|		}
 1233|      0|		if (left != 0) {
 1234|      0|			log_debug("%s: ignoring malformed transport mode"
 1235|      0|			    " notification: %zu", __func__, left);
 1236|      0|			return (0);
 1237|      0|		}
 1238|      0|		if (msg->msg_parent->msg_response) {
 1239|      0|			if (!(msg->msg_policy->pol_flags & IKED_POLICY_TRANSPORT)) {
 1240|      0|				log_debug("%s: ignoring transport mode"
 1241|      0|				    " notification (policy)", __func__);
 1242|      0|				return (0);
 1243|      0|			}
 1244|      0|		}
 1245|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_USE_TRANSPORT;
 1246|      0|		break;
 1247|      0|	case IKEV2_N_UPDATE_SA_ADDRESSES:
 1248|      0|		if (!msg->msg_e) {
 1249|      0|			log_debug("%s: N_UPDATE_SA_ADDRESSES not encrypted",
 1250|      0|			    __func__);
 1251|      0|			return (-1);
 1252|      0|		}
 1253|      0|		if (!sa->sa_mobike) {
 1254|      0|			log_debug("%s: ignoring update sa addresses"
 1255|      0|			    " notification w/o mobike: %zu", __func__, left);
 1256|      0|			return (0);
 1257|      0|		}
 1258|      0|		if (left != 0) {
 1259|      0|			log_debug("%s: ignoring malformed update sa addresses"
 1260|      0|			    " notification: %zu", __func__, left);
 1261|      0|			return (0);
 1262|      0|		}
 1263|      0|		msg->msg_parent->msg_update_sa_addresses = 1;
 1264|      0|		break;
 1265|      0|	case IKEV2_N_COOKIE2:
 1266|      0|		if (!msg->msg_e) {
 1267|      0|			log_debug("%s: N_COOKIE2 not encrypted",
 1268|      0|			    __func__);
 1269|      0|			return (-1);
 1270|      0|		}
 1271|      0|		if (!sa->sa_mobike) {
 1272|      0|			log_debug("%s: ignoring cookie2 notification"
 1273|      0|			    " w/o mobike: %zu", __func__, left);
 1274|      0|			return (0);
 1275|      0|		}
 1276|      0|		if (left < IKED_COOKIE2_MIN || left > IKED_COOKIE2_MAX) {
 1277|      0|			log_debug("%s: ignoring malformed cookie2"
 1278|      0|			    " notification: %zu", __func__, left);
 1279|      0|			return (0);
 1280|      0|		}
 1281|      0|		ibuf_release(msg->msg_cookie2);	/* should not happen */
 1282|      0|		if ((msg->msg_cookie2 = ibuf_new(buf, left)) == NULL) {
 1283|      0|			log_debug("%s: failed to get peer cookie2", __func__);
 1284|      0|			return (-1);
 1285|      0|		}
 1286|      0|		msg->msg_parent->msg_cookie2 = msg->msg_cookie2;
 1287|      0|		break;
 1288|      0|	case IKEV2_N_COOKIE:
 1289|      0|		if (msg->msg_e) {
 1290|      0|			log_debug("%s: N_COOKIE encrypted",
 1291|      0|			    __func__);
 1292|      0|			return (-1);
 1293|      0|		}
 1294|      0|		if (left < IKED_COOKIE_MIN || left > IKED_COOKIE_MAX) {
 1295|      0|			log_debug("%s: ignoring malformed cookie"
 1296|      0|			    " notification: %zu", __func__, left);
 1297|      0|			return (0);
 1298|      0|		}
 1299|      0|		log_debug("%s: received cookie, len %zu", __func__, left);
 1300|      0|		print_hex(buf, 0, left);
 1301|       |
 1302|      0|		ibuf_release(msg->msg_cookie);
 1303|      0|		if ((msg->msg_cookie = ibuf_new(buf, left)) == NULL) {
 1304|      0|			log_debug("%s: failed to get peer cookie", __func__);
 1305|      0|			return (-1);
 1306|      0|		}
 1307|      0|		msg->msg_parent->msg_cookie = msg->msg_cookie;
 1308|      0|		break;
 1309|      0|	case IKEV2_N_FRAGMENTATION_SUPPORTED:
 1310|      0|		if (msg->msg_e) {
 1311|      0|			log_debug("%s: N_FRAGMENTATION_SUPPORTED encrypted",
 1312|      0|			    __func__);
 1313|      0|			return (-1);
 1314|      0|		}
 1315|      0|		if (left != 0) {
 1316|      0|			log_debug("%s: ignoring malformed fragmentation"
 1317|      0|			    " notification: %zu", __func__, left);
 1318|      0|			return (0);
 1319|      0|		}
 1320|      0|		msg->msg_parent->msg_flags |= IKED_MSG_FLAGS_FRAGMENTATION;
 1321|      0|		break;
 1322|      0|	case IKEV2_N_SIGNATURE_HASH_ALGORITHMS:
 1323|      0|		if (msg->msg_e) {
 1324|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: encrypted",
 1325|      0|			    __func__);
 1326|      0|			return (-1);
 1327|      0|		}
 1328|      0|		if (sa == NULL) {
 1329|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: no SA",
 1330|      0|			    __func__);
 1331|      0|			return (-1);
 1332|      0|		}
 1333|      0|		if (sa->sa_sigsha2) {
 1334|      0|			log_debug("%s: SIGNATURE_HASH_ALGORITHMS: "
 1335|      0|			    "duplicate notify", __func__);
 1336|      0|			return (0);
 1337|      0|		}
 1338|      0|		if (left < sizeof(signature_hash) ||
 1339|      0|		    left % sizeof(signature_hash)) {
 1340|      0|			log_debug("%s: malformed signature hash notification"
 1341|      0|			    "(%zu bytes)", __func__, left);
 1342|      0|			return (0);
 1343|      0|		}
 1344|      0|		while (left >= sizeof(signature_hash)) {
 1345|      0|			memcpy(&signature_hash, buf, sizeof(signature_hash));
 1346|      0|			signature_hash = betoh16(signature_hash);
 1347|      0|			log_debug("%s: signature hash %s (%x)", __func__,
 1348|      0|			    print_map(signature_hash, ikev2_sighash_map),
 1349|      0|			    signature_hash);
 1350|      0|			left -= sizeof(signature_hash);
 1351|      0|			buf += sizeof(signature_hash);
 1352|      0|			if (signature_hash == IKEV2_SIGHASH_SHA2_256)
 1353|      0|				msg->msg_parent->msg_flags
 1354|      0|				    |= IKED_MSG_FLAGS_SIGSHA2;
 1355|      0|		}
 1356|      0|		break;
 1357|      0|	}
 1358|       |
 1359|      0|	return (0);
 1360|      0|}
ikev2_validate_delete:
 1365|    891|{
 1366|    891|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1367|       |
 1368|    891|	if (left < sizeof(*del)) {
 1369|    108|		log_debug("%s: malformed payload: too short for header "
 1370|    108|		    "(%zu < %zu)", __func__, left, sizeof(*del));
 1371|    108|		return (-1);
 1372|    108|	}
 1373|    783|	memcpy(del, msgbuf + offset, sizeof(*del));
 1374|       |
 1375|    783|	if (del->del_protoid == 0) {
 1376|     30|		log_info("%s: malformed payload: invalid protoid", __func__);
 1377|     30|		return (-1);
 1378|     30|	}
 1379|       |
 1380|    753|	return (0);
 1381|    783|}
ikev2_pld_delete:
 1386|    891|{
 1387|    891|	struct ikev2_delete	 del;
 1388|    891|	uint8_t			*buf, *msgbuf = ibuf_data(msg->msg_data);
 1389|    891|	size_t			 cnt, sz, len;
 1390|       |
 1391|    891|	if (ikev2_validate_delete(msg, offset, left, &del))
 1392|    138|		return (-1);
 1393|       |
 1394|       |	/* Skip if it's a response, then we don't have to deal with it */
 1395|    753|	if (ikev2_msg_frompeer(msg) &&
 1396|    753|	    msg->msg_parent->msg_response)
 1397|      0|		return (0);
 1398|       |
 1399|    753|	cnt = betoh16(del.del_nspi);
 1400|    753|	sz = del.del_spisize;
 1401|       |
 1402|    753|	log_debug("%s: proto %s spisize %zu nspi %zu",
 1403|    753|	    __func__, print_map(del.del_protoid, ikev2_saproto_map),
 1404|    753|	    sz, cnt);
 1405|       |
 1406|    753|	if (msg->msg_parent->msg_del_protoid) {
 1407|    721|		log_debug("%s: duplicate delete payload", __func__);
 1408|    721|		return (0);
 1409|    721|	}
 1410|       |
 1411|     32|	msg->msg_parent->msg_del_protoid = del.del_protoid;
 1412|     32|	msg->msg_parent->msg_del_cnt = cnt;
 1413|     32|	msg->msg_parent->msg_del_spisize = sz;
 1414|       |
 1415|     32|	buf = msgbuf + offset + sizeof(del);
 1416|     32|	len = left - sizeof(del);
 1417|     32|	if (len == 0 || sz == 0 || cnt == 0)
 1418|     26|		return (0);
 1419|       |
 1420|      6|	if ((len / sz) != cnt) {
 1421|      5|		log_debug("%s: invalid payload length %zu/%zu != %zu",
 1422|      5|		    __func__, len, sz, cnt);
 1423|      5|		return (-1);
 1424|      5|	}
 1425|       |
 1426|      1|	print_hex(buf, 0, len);
 1427|       |
 1428|      1|	msg->msg_parent->msg_del_buf = ibuf_new(buf, len);
 1429|       |
 1430|      1|	return (0);
 1431|      6|}
ikev2_validate_tss:
 1436|    342|{
 1437|    342|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1438|       |
 1439|    342|	if (left < sizeof(*tsp)) {
 1440|     64|		log_debug("%s: malformed payload: too short for header "
 1441|     64|		    "(%zu < %zu)", __func__, left, sizeof(*tsp));
 1442|     64|		return (-1);
 1443|     64|	}
 1444|    278|	memcpy(tsp, msgbuf + offset, sizeof(*tsp));
 1445|       |
 1446|    278|	return (0);
 1447|    342|}
ikev2_pld_tss:
 1452|    342|{
 1453|    342|	struct ikev2_tsp		 tsp;
 1454|    342|	struct ikev2_ts			 ts;
 1455|    342|	size_t				 ts_len, i;
 1456|       |
 1457|    342|	if (ikev2_validate_tss(msg, offset, left, &tsp))
 1458|     64|		return (-1);
 1459|       |
 1460|    278|	offset += sizeof(tsp);
 1461|    278|	left -= sizeof(tsp);
 1462|       |
 1463|    278|	log_debug("%s: count %d length %zu", __func__,
 1464|    278|	    tsp.tsp_count, left);
 1465|       |
 1466|    513|	for (i = 0; i < tsp.tsp_count; i++) {
 1467|    490|		if (ikev2_validate_ts(msg, offset, left, &ts))
 1468|    206|			return (-1);
 1469|       |
 1470|    284|		log_debug("%s: type %s protoid %u length %d "
 1471|    284|		    "startport %u endport %u", __func__,
 1472|    284|		    print_map(ts.ts_type, ikev2_ts_map),
 1473|    284|		    ts.ts_protoid, betoh16(ts.ts_length),
 1474|    284|		    betoh16(ts.ts_startport),
 1475|    284|		    betoh16(ts.ts_endport));
 1476|       |
 1477|    284|		offset += sizeof(ts);
 1478|    284|		left -= sizeof(ts);
 1479|       |
 1480|    284|		ts_len = betoh16(ts.ts_length) - sizeof(ts);
 1481|    284|		if (ikev2_pld_ts(env, pld, msg, offset, ts_len, ts.ts_type))
 1482|     49|			return (-1);
 1483|       |
 1484|    235|		offset += ts_len;
 1485|    235|		left -= ts_len;
 1486|    235|	}
 1487|       |
 1488|     23|	return (0);
 1489|    278|}
ikev2_validate_ts:
 1494|    490|{
 1495|    490|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1496|    490|	size_t		 ts_length;
 1497|       |
 1498|    490|	if (left < sizeof(*ts)) {
 1499|    179|		log_debug("%s: malformed payload: too short for header "
 1500|    179|		    "(%zu < %zu)", __func__, left, sizeof(*ts));
 1501|    179|		return (-1);
 1502|    179|	}
 1503|    311|	memcpy(ts, msgbuf + offset, sizeof(*ts));
 1504|       |
 1505|    311|	ts_length = betoh16(ts->ts_length);
 1506|    311|	if (ts_length < sizeof(*ts)) {
 1507|     14|		log_debug("%s: malformed payload: shorter than minimum header "
 1508|     14|		    "size (%zu < %zu)", __func__, ts_length, sizeof(*ts));
 1509|     14|		return (-1);
 1510|     14|	}
 1511|    297|	if (left < ts_length) {
 1512|     13|		log_debug("%s: malformed payload: too long for payload size "
 1513|     13|		    "(%zu < %zu)", __func__, left, ts_length);
 1514|     13|		return (-1);
 1515|     13|	}
 1516|       |
 1517|    284|	return (0);
 1518|    297|}
ikev2_pld_ts:
 1523|    284|{
 1524|    284|	struct sockaddr_in		 s4;
 1525|    284|	struct sockaddr_in6		 s6;
 1526|    284|	uint8_t				 buf[2][128];
 1527|    284|	uint8_t				*ptr;
 1528|       |
 1529|    284|	ptr = ibuf_data(msg->msg_data) + offset;
 1530|       |
 1531|    284|	switch (type) {
 1532|     38|	case IKEV2_TS_IPV4_ADDR_RANGE:
 1533|     38|		if (left < 2 * 4) {
 1534|     10|			log_debug("%s: malformed payload: too short "
 1535|     10|			    "for ipv4 addr range (%zu < %u)",
 1536|     10|			    __func__, left, 2 * 4);
 1537|     10|			return (-1);
 1538|     10|		}
 1539|       |
 1540|     28|		bzero(&s4, sizeof(s4));
 1541|     28|		s4.sin_family = AF_INET;
 1542|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1543|       |		s4.sin_len = sizeof(s4);
 1544|       |#endif
 1545|     28|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1546|     28|		ptr += 4;
 1547|     28|		left -= 4;
 1548|     28|		print_host((struct sockaddr *)&s4,
 1549|     28|		    (char *)buf[0], sizeof(buf[0]));
 1550|       |
 1551|     28|		memcpy(&s4.sin_addr.s_addr, ptr, 4);
 1552|     28|		left -= 4;
 1553|     28|		print_host((struct sockaddr *)&s4,
 1554|     28|		    (char *)buf[1], sizeof(buf[1]));
 1555|       |
 1556|     28|		log_debug("%s: start %s end %s", __func__,
 1557|     28|		    buf[0], buf[1]);
 1558|     28|		break;
 1559|     29|	case IKEV2_TS_IPV6_ADDR_RANGE:
 1560|     29|		if (left < 2 * 16) {
 1561|     10|			log_debug("%s: malformed payload: too short "
 1562|     10|			    "for ipv6 addr range (%zu < %u)",
 1563|     10|			    __func__, left, 2 * 16);
 1564|     10|			return (-1);
 1565|     10|		}
 1566|     19|		bzero(&s6, sizeof(s6));
 1567|     19|		s6.sin6_family = AF_INET6;
 1568|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1569|       |		s6.sin6_len = sizeof(s6);
 1570|       |#endif
 1571|     19|		memcpy(&s6.sin6_addr, ptr, 16);
 1572|     19|		ptr += 16;
 1573|     19|		left -= 16;
 1574|     19|		print_host((struct sockaddr *)&s6,
 1575|     19|		    (char *)buf[0], sizeof(buf[0]));
 1576|       |
 1577|     19|		memcpy(&s6.sin6_addr, ptr, 16);
 1578|     19|		left -= 16;
 1579|     19|		print_host((struct sockaddr *)&s6,
 1580|     19|		    (char *)buf[1], sizeof(buf[1]));
 1581|     19|		log_debug("%s: start %s end %s", __func__,
 1582|     19|		    buf[0], buf[1]);
 1583|     19|		break;
 1584|    217|	default:
 1585|    217|		log_debug("%s: ignoring unknown TS type %u", __func__, type);
 1586|    217|		return (0);
 1587|    284|	}
 1588|       |
 1589|     47|	if (left > 0) {
 1590|     29|		log_debug("%s: malformed payload: left (%zu) > 0",
 1591|     29|		    __func__, left);
 1592|     29|		return (-1);
 1593|     29|	}
 1594|       |
 1595|     18|	return (0);
 1596|     47|}
ikev2_validate_cp:
 1831|    883|{
 1832|    883|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 1833|       |
 1834|    883|	if (left < sizeof(*cp)) {
 1835|    162|		log_debug("%s: malformed payload: too short for header "
 1836|    162|		    "(%zu < %zu)", __func__, left, sizeof(*cp));
 1837|    162|		return (-1);
 1838|    162|	}
 1839|    721|	memcpy(cp, msgbuf + offset, sizeof(*cp));
 1840|       |
 1841|    721|	return (0);
 1842|    883|}
ikev2_pld_cp:
 1847|    883|{
 1848|    883|	struct ikev2_cp		 cp;
 1849|    883|	struct ikev2_cfg	*cfg;
 1850|    883|	struct iked_addr	*addr;
 1851|    883|	struct sockaddr_in	*in4;
 1852|    883|	struct sockaddr_in6	*in6;
 1853|    883|	uint8_t			*ptr;
 1854|    883|	size_t			 len;
 1855|    883|	uint8_t			 buf[128];
 1856|    883|	int			 cfg_type;
 1857|       |
 1858|    883|	if (ikev2_validate_cp(msg, offset, left, &cp))
 1859|    162|		return (-1);
 1860|       |
 1861|    721|	ptr = ibuf_data(msg->msg_data) + offset + sizeof(cp);
 1862|    721|	len = left - sizeof(cp);
 1863|       |
 1864|    721|	log_debug("%s: type %s length %zu",
 1865|    721|	    __func__, print_map(cp.cp_type, ikev2_cp_map), len);
 1866|    721|	print_hex(ptr, 0, len);
 1867|       |
 1868|  1.09k|	while (len > 0) {
 1869|    484|		if (len < sizeof(*cfg)) {
 1870|     45|			log_debug("%s: malformed payload: too short for cfg "
 1871|     45|			    "(%zu < %zu)", __func__, len, sizeof(*cfg));
 1872|     45|			return (-1);
 1873|     45|		}
 1874|    439|		cfg = (struct ikev2_cfg *)ptr;
 1875|       |
 1876|    439|		log_debug("%s: %s 0x%04x length %d", __func__,
 1877|    439|		    print_map(betoh16(cfg->cfg_type), ikev2_cfg_map),
 1878|    439|		    betoh16(cfg->cfg_type),
 1879|    439|		    betoh16(cfg->cfg_length));
 1880|       |
 1881|    439|		ptr += sizeof(*cfg);
 1882|    439|		len -= sizeof(*cfg);
 1883|       |
 1884|    439|		if (len < betoh16(cfg->cfg_length)) {
 1885|     62|			log_debug("%s: malformed payload: too short for "
 1886|     62|			    "cfg_length (%zu < %u)", __func__, len,
 1887|     62|			    betoh16(cfg->cfg_length));
 1888|     62|			return (-1);
 1889|     62|		}
 1890|       |
 1891|    377|		print_hex(ptr, sizeof(*cfg), betoh16(cfg->cfg_length));
 1892|       |
 1893|    377|		cfg_type = betoh16(cfg->cfg_type);
 1894|    377|		switch (cfg_type) {
 1895|     21|		case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
 1896|     64|		case IKEV2_CFG_INTERNAL_IP4_DNS:
 1897|     64|			if (!ikev2_msg_frompeer(msg))
 1898|     64|				break;
 1899|      0|			if (betoh16(cfg->cfg_length) == 0)
 1900|      0|				break;
 1901|       |			/* XXX multiple-valued */
 1902|      0|			if (betoh16(cfg->cfg_length) < 4) {
 1903|      0|				log_debug("%s: malformed payload: too short "
 1904|      0|				    "for ipv4 addr (%u < %u)",
 1905|      0|				    __func__, betoh16(cfg->cfg_length), 4);
 1906|      0|				return (-1);
 1907|      0|			}
 1908|      0|			switch(cfg_type) {
 1909|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
 1910|      0|				if (msg->msg_parent->msg_cp_addr != NULL) {
 1911|      0|					log_debug("%s: address already set", __func__);
 1912|      0|					goto skip;
 1913|      0|				}
 1914|      0|				break;
 1915|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
 1916|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
 1917|      0|					log_debug("%s: dns already set", __func__);
 1918|      0|					goto skip;
 1919|      0|				}
 1920|      0|				break;
 1921|      0|			default:
 1922|      0|				break;
 1923|      0|			}
 1924|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
 1925|      0|				log_debug("%s: malloc failed", __func__);
 1926|      0|				break;
 1927|      0|			}
 1928|      0|			addr->addr_af = AF_INET;
 1929|      0|			in4 = (struct sockaddr_in *)&addr->addr;
 1930|      0|			in4->sin_family = AF_INET;
 1931|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1932|       |			in4->sin_len = sizeof(*in4);
 1933|       |#endif
 1934|      0|			memcpy(&in4->sin_addr.s_addr, ptr, 4);
 1935|      0|			print_host((struct sockaddr *)in4, (char *)buf,
 1936|      0|			    sizeof(buf));
 1937|      0|			log_debug("%s: cfg %s", __func__, buf);
 1938|      0|			switch(cfg_type) {
 1939|      0|			case IKEV2_CFG_INTERNAL_IP4_ADDRESS:
 1940|      0|				msg->msg_parent->msg_cp_addr = addr;
 1941|      0|				log_debug("%s: IP4_ADDRESS %s", __func__, buf);
 1942|      0|				break;
 1943|      0|			case IKEV2_CFG_INTERNAL_IP4_DNS:
 1944|      0|				msg->msg_parent->msg_cp_dns = addr;
 1945|      0|				log_debug("%s: IP4_DNS %s", __func__, buf);
 1946|      0|				break;
 1947|      0|			}
 1948|      0|			break;
 1949|     34|		case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
 1950|    100|		case IKEV2_CFG_INTERNAL_IP6_DNS:
 1951|    100|			if (!ikev2_msg_frompeer(msg))
 1952|    100|				break;
 1953|      0|			if (betoh16(cfg->cfg_length) == 0)
 1954|      0|				break;
 1955|       |			/* XXX multiple-valued */
 1956|      0|			if (betoh16(cfg->cfg_length) < 16) {
 1957|      0|				log_debug("%s: malformed payload: too short "
 1958|      0|				    "for ipv6 addr w/prefixlen (%u < %u)",
 1959|      0|				    __func__, betoh16(cfg->cfg_length), 16);
 1960|      0|				return (-1);
 1961|      0|			}
 1962|      0|			switch(cfg_type) {
 1963|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
 1964|      0|				if (msg->msg_parent->msg_cp_addr6 != NULL) {
 1965|      0|					log_debug("%s: address6 already set", __func__);
 1966|      0|					goto skip;
 1967|      0|				}
 1968|      0|				break;
 1969|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
 1970|      0|				if (msg->msg_parent->msg_cp_dns != NULL) {
 1971|      0|					log_debug("%s: dns already set", __func__);
 1972|      0|					goto skip;
 1973|      0|				}
 1974|      0|				break;
 1975|      0|			}
 1976|      0|			if ((addr = calloc(1, sizeof(*addr))) == NULL) {
 1977|      0|				log_debug("%s: malloc failed", __func__);
 1978|      0|				break;
 1979|      0|			}
 1980|      0|			addr->addr_af = AF_INET6;
 1981|      0|			in6 = (struct sockaddr_in6 *)&addr->addr;
 1982|      0|			in6->sin6_family = AF_INET6;
 1983|       |#ifdef HAVE_SOCKADDR_SA_LEN
 1984|       |			in6->sin6_len = sizeof(*in6);
 1985|       |#endif
 1986|      0|			memcpy(&in6->sin6_addr, ptr, 16);
 1987|      0|			print_host((struct sockaddr *)in6, (char *)buf,
 1988|      0|			    sizeof(buf));
 1989|      0|			log_debug("%s: cfg %s/%d", __func__, buf, ptr[16]);
 1990|      0|			switch(cfg_type) {
 1991|      0|			case IKEV2_CFG_INTERNAL_IP6_ADDRESS:
 1992|      0|				msg->msg_parent->msg_cp_addr6 = addr;
 1993|      0|				log_debug("%s: IP6_ADDRESS %s", __func__, buf);
 1994|      0|				break;
 1995|      0|			case IKEV2_CFG_INTERNAL_IP6_DNS:
 1996|      0|				msg->msg_parent->msg_cp_dns = addr;
 1997|      0|				log_debug("%s: IP6_DNS %s", __func__, buf);
 1998|      0|				break;
 1999|      0|			}
 2000|      0|			break;
 2001|    377|		}
 2002|       |
 2003|    377| skip:
 2004|    377|		ptr += betoh16(cfg->cfg_length);
 2005|    377|		len -= betoh16(cfg->cfg_length);
 2006|    377|	}
 2007|       |
 2008|    614|	if (!ikev2_msg_frompeer(msg))
 2009|    614|		return (0);
 2010|       |
 2011|      0|	msg->msg_parent->msg_cp = cp.cp_type;
 2012|       |
 2013|      0|	return (0);
 2014|    614|}
ikev2_validate_eap:
 2019|  3.48k|{
 2020|  3.48k|	uint8_t		*msgbuf = ibuf_data(msg->msg_data);
 2021|       |
 2022|  3.48k|	if (left < sizeof(*hdr)) {
 2023|  1.37k|		log_debug("%s: malformed payload: too short for header "
 2024|  1.37k|		    "(%zu < %zu)", __func__, left, sizeof(*hdr));
 2025|  1.37k|		return (-1);
 2026|  1.37k|	}
 2027|  2.11k|	memcpy(hdr, msgbuf + offset, sizeof(*hdr));
 2028|       |
 2029|  2.11k|	return (0);
 2030|  3.48k|}
ikev2_pld_eap:
 2035|  3.48k|{
 2036|  3.48k|	struct eap_header		 hdr;
 2037|  3.48k|	struct eap_message		*eap = NULL;
 2038|  3.48k|	const struct iked_sa		*sa = msg->msg_sa;
 2039|  3.48k|	size_t				 len;
 2040|       |
 2041|  3.48k|	if (ikev2_validate_eap(msg, offset, left, &hdr))
 2042|  1.37k|		return (-1);
 2043|  2.11k|	len = betoh16(hdr.eap_length);
 2044|       |
 2045|  2.11k|	if (len < sizeof(*eap)) {
 2046|    865|		log_info("%s: %s id %d length %d", SPI_SA(sa, __func__),
 2047|    865|		    print_map(hdr.eap_code, eap_code_map),
 2048|    865|		    hdr.eap_id, betoh16(hdr.eap_length));
 2049|  1.25k|	} else {
 2050|       |		/* Now try to get the indicated length */
 2051|  1.25k|		if ((eap = ibuf_seek(msg->msg_data, offset, len)) == NULL) {
 2052|    484|			log_debug("%s: invalid EAP length", __func__);
 2053|    484|			return (-1);
 2054|    484|		}
 2055|       |
 2056|    768|		log_info("%s: %s id %d length %d EAP-%s", SPI_SA(sa, __func__),
 2057|    768|		    print_map(eap->eap_code, eap_code_map),
 2058|    768|		    eap->eap_id, betoh16(eap->eap_length),
 2059|    768|		    print_map(eap->eap_type, eap_type_map));
 2060|       |
 2061|    768|		if (eap_parse(env, sa, msg, eap, msg->msg_response) == -1)
 2062|      0|			return (-1);
 2063|    768|		msg->msg_parent->msg_eap.eam_found = 1;
 2064|    768|	}
 2065|       |
 2066|  1.63k|	return (0);
 2067|  2.11k|}

ibuf_zero:
   47|  1.72k|{
   48|  1.72k|	explicit_bzero(buf->buf, buf->wpos);
   49|  1.72k|}
ibuf_new:
   53|    864|{
   54|    864|	struct ibuf	*buf;
   55|       |
   56|    864|	if ((buf = ibuf_dynamic(len,
   57|    864|	    IKED_MSGBUF_MAX)) == NULL)
   58|      0|		return (NULL);
   59|       |
   60|    864|	ibuf_zero(buf);
   61|       |
   62|    864|	if (len == 0)
   63|      0|		return (buf);
   64|       |
   65|    864|	if (data == NULL) {
   66|      0|		if (ibuf_advance(buf, len) == NULL) {
   67|      0|			ibuf_free(buf);
   68|      0|			return (NULL);
   69|      0|		}
   70|    864|	} else {
   71|    864|		if (ibuf_add(buf, data, len) != 0) {
   72|      0|			ibuf_free(buf);
   73|      0|			return (NULL);
   74|      0|		}
   75|    864|	}
   76|       |
   77|    864|	return (buf);
   78|    864|}
ibuf_release:
  106|  5.61k|{
  107|  5.61k|	if (buf == NULL)
  108|  4.75k|		return;
  109|    863|	if (buf->buf != NULL) {
  110|    863|		ibuf_zero(buf);
  111|    863|		free(buf->buf);
  112|    863|	}
  113|    863|	free(buf);
  114|    863|}
ibuf_data:
  126|  48.4k|{
  127|  48.4k|	return (ibuf_seek(buf, 0, 0));
  128|  48.4k|}

log_getverbose:
   82|  5.66k|{
   83|  5.66k|	return (verbose);
   84|  5.66k|}
vlog:
   98|  1.79k|{
   99|  1.79k|	char	*nfmt;
  100|  1.79k|	int	 saved_errno = errno;
  101|       |
  102|  1.79k|	if (debug) {
  103|       |		/* best effort in out of mem situations */
  104|      0|		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
  105|      0|			vfprintf(stderr, fmt, ap);
  106|      0|			fprintf(stderr, "\n");
  107|      0|		} else {
  108|      0|			vfprintf(stderr, nfmt, ap);
  109|      0|			free(nfmt);
  110|      0|		}
  111|      0|		fflush(stderr);
  112|      0|	} else
  113|  1.79k|		vsyslog(pri, fmt, ap);
  114|       |
  115|  1.79k|	errno = saved_errno;
  116|  1.79k|}
log_info:
  158|  1.79k|{
  159|  1.79k|	va_list	 ap;
  160|       |
  161|  1.79k|	va_start(ap, emsg);
  162|  1.79k|	vlog(LOG_INFO, emsg, ap);
  163|  1.79k|	va_end(ap);
  164|  1.79k|}
log_debug:
  168|  35.3k|{
  169|  35.3k|	va_list	 ap;
  170|       |
  171|  35.3k|	if (verbose > 1) {
  172|      0|		va_start(ap, emsg);
  173|      0|		vlog(LOG_DEBUG, emsg, ap);
  174|      0|		va_end(ap);
  175|      0|	}
  176|  35.3k|}

socket_getport:
   71|     94|{
   72|     94|	switch (sa->sa_family) {
   73|     56|	case AF_INET:
   74|     56|		return (ntohs(((struct sockaddr_in *)sa)->sin_port));
   75|     38|	case AF_INET6:
   76|     38|		return (ntohs(((struct sockaddr_in6 *)sa)->sin6_port));
   77|      0|	default:
   78|      0|		return (0);
   79|     94|	}
   80|       |
   81|       |	/* NOTREACHED */
   82|      0|	return (0);
   83|     94|}
print_spi:
  499|  2.72k|{
  500|  2.72k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  501|  2.72k|	static int		 i = 0;
  502|  2.72k|	char			*ptr;
  503|       |
  504|  2.72k|	ptr = buf[i];
  505|       |
  506|  2.72k|	switch (size) {
  507|      0|	case 2:
  508|      0|		snprintf(ptr, 32, "0x%04x", (uint16_t)spi);
  509|      0|		break;
  510|     75|	case 4:
  511|     75|		snprintf(ptr, 32, "0x%08x", (uint32_t)spi);
  512|     75|		break;
  513|  1.09k|	case 8:
  514|  1.09k|		snprintf(ptr, 32, "0x%016llx", (long long unsigned)spi);
  515|  1.09k|		break;
  516|  1.55k|	default:
  517|  1.55k|		snprintf(ptr, 32, "%llu", (long long unsigned)spi);
  518|  1.55k|		break;
  519|  2.72k|	}
  520|       |
  521|  2.72k|	if (++i >= IKED_CYCLE_BUFFERS)
  522|    340|		i = 0;
  523|       |
  524|  2.72k|	return (ptr);
  525|  2.72k|}
print_map:
  529|  44.9k|{
  530|  44.9k|	unsigned int		 i;
  531|  44.9k|	static char		 buf[IKED_CYCLE_BUFFERS][32];
  532|  44.9k|	static int		 idx = 0;
  533|  44.9k|	const char		*name = NULL;
  534|       |
  535|  44.9k|	if (idx >= IKED_CYCLE_BUFFERS)
  536|  5.62k|		idx = 0;
  537|  44.9k|	bzero(buf[idx], sizeof(buf[idx]));
  538|       |
  539|   830k|	for (i = 0; map[i].cm_name != NULL; i++) {
  540|   785k|		if (map[i].cm_type == type)
  541|  35.6k|			name = map[i].cm_name;
  542|   785k|	}
  543|       |
  544|  44.9k|	if (name == NULL)
  545|  9.32k|		snprintf(buf[idx], sizeof(buf[idx]), "<UNKNOWN:%u>", type);
  546|  35.6k|	else
  547|  35.6k|		strlcpy(buf[idx], name, sizeof(buf[idx]));
  548|       |
  549|  44.9k|	return (buf[idx++]);
  550|  44.9k|}
print_hex:
  561|  5.66k|{
  562|  5.66k|	unsigned int	 i;
  563|       |
  564|  5.66k|	if (log_getverbose() < 3 || !length)
  565|  5.66k|		return;
  566|       |
  567|      0|	for (i = 0; i < length; i++) {
  568|      0|		if (i && (i % 4) == 0) {
  569|      0|			if ((i % 32) == 0)
  570|      0|				print_debug("\n");
  571|      0|			else
  572|      0|				print_debug(" ");
  573|      0|		}
  574|      0|		print_debug("%02x", buf[offset + i]);
  575|      0|	}
  576|      0|	print_debug("\n");
  577|      0|}
print_host:
  731|     94|{
  732|     94|	static char	sbuf[IKED_CYCLE_BUFFERS][NI_MAXHOST + 7];
  733|     94|	static int	idx = 0;
  734|     94|	char		pbuf[7];
  735|     94|	in_port_t	port;
  736|       |
  737|     94|	if (buf == NULL) {
  738|      0|		buf = sbuf[idx];
  739|      0|		len = sizeof(sbuf[idx]);
  740|      0|		if (++idx >= IKED_CYCLE_BUFFERS)
  741|      0|			idx = 0;
  742|      0|	}
  743|       |
  744|     94|	if (sa->sa_family == AF_UNSPEC) {
  745|      0|		strlcpy(buf, "any", len);
  746|      0|		return (buf);
  747|      0|	}
  748|       |
  749|     94|	if (getnameinfo(sa, SA_LEN(sa),
  750|     94|	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
  751|      0|		strlcpy(buf, "unknown", len);
  752|      0|		return (buf);
  753|      0|	}
  754|       |
  755|     94|	if ((port = socket_getport(sa)) != 0) {
  756|      0|		snprintf(pbuf, sizeof(pbuf), ":%d", port);
  757|      0|		(void)strlcat(buf, pbuf, len);
  758|      0|	}
  759|       |
  760|     94|	return (buf);
  761|     94|}

eap_parse:
   58|    768|{
   59|    768|	return (0);
   60|    768|}
ikev2_msg_frompeer:
   64|  14.8k|{
   65|  14.8k|	return (0);
   66|  14.8k|}
ikev2_ikesa_info:
   82|  1.63k|{
   83|  1.63k|	return "";
   84|  1.63k|}
ikev2_print_id:
  159|    334|{
  160|    334|	return (0);
  161|    334|}
ikev2_msg_cleanup:
  217|    528|{
  218|    528|	struct iked_certreq *cr;
  219|    528|	struct iked_proposal *prop, *proptmp;
  220|       |
  221|    528|	if (msg == msg->msg_parent) {
  222|    528|		ibuf_release(msg->msg_nonce);
  223|    528|		ibuf_release(msg->msg_ke);
  224|    528|		ibuf_release(msg->msg_auth.id_buf);
  225|    528|		ibuf_release(msg->msg_peerid.id_buf);
  226|    528|		ibuf_release(msg->msg_localid.id_buf);
  227|    528|		ibuf_release(msg->msg_cert.id_buf);
  228|    528|		ibuf_release(msg->msg_cookie);
  229|    528|		ibuf_release(msg->msg_cookie2);
  230|    528|		ibuf_release(msg->msg_del_buf);
  231|    528|		free(msg->msg_eap.eam_user);
  232|    528|		free(msg->msg_cp_addr);
  233|    528|		free(msg->msg_cp_addr6);
  234|       |
  235|    528|		TAILQ_FOREACH_SAFE(prop, &msg->msg_proposals, prop_entry,
  236|    528|		    proptmp) {
  237|      0|			TAILQ_REMOVE(&msg->msg_proposals, prop, prop_entry);
  238|      0|			if (prop->prop_nxforms)
  239|      0|				free(prop->prop_xforms);
  240|      0|			free(prop);
  241|      0|		}
  242|       |
  243|    528|		while ((cr = SIMPLEQ_FIRST(&msg->msg_certreqs))) {
  244|      0|			ibuf_release(cr->cr_data);
  245|      0|			SIMPLEQ_REMOVE_HEAD(&msg->msg_certreqs, cr_entry);
  246|      0|			free(cr);
  247|      0|		}
  248|    528|	}
  249|       |
  250|    528|	if (msg->msg_data != NULL) {
  251|    528|		ibuf_release(msg->msg_data);
  252|    528|		msg->msg_data = NULL;
  253|    528|	}
  254|    528|}

LLVMFuzzerTestOneInput:
  104|    529|{
  105|    529|	struct ibuf		*fuzzed;
  106|    529|	struct ike_header	 hdr;
  107|    529|	struct iked_message	 msg;
  108|       |
  109|    529|	bzero(&hdr, sizeof(hdr));
  110|    529|	bzero(&msg, sizeof(msg));
  111|       |
  112|    529|	fuzzed = ibuf_new(data, size);
  113|    529|	if (fuzzed == NULL){
  114|      0|		fprintf(stderr, "%s\n", "ERROR: fuzzed == NULL! "
  115|      0|		    "(hint: fuzz-input too long?)");
  116|      0|		return -1;
  117|      0|	}	
  118|       |	
  119|       |	/* size too small? */
  120|    529|	if (size < sizeof(cookies) + sizeof(genhdr)){
  121|      1|		ibuf_free(fuzzed);
  122|      1|		return 0;
  123|      1|	}	       
  124|       |
  125|    528|	prepare_header(&hdr, fuzzed);
  126|    528|	prepare_message(&msg, fuzzed);
  127|       |
  128|    528|	ikev2_pld_parse(NULL, &hdr, &msg, 0);
  129|       |
  130|    528|	ikev2_msg_cleanup(NULL, &msg);
  131|       |
  132|    528|	return 0;
  133|    529|}
test_parser_fuzz.c:prepare_header:
   75|    528|{
   76|    528|	bzero(hdr, sizeof(*hdr));
   77|    528|	bcopy(get_icookie(ibuf_data(data)), &hdr->ike_ispi,
   78|    528|	    sizeof(hdr->ike_ispi));
   79|    528|	bcopy(get_rcookie(ibuf_data(data)), &hdr->ike_rspi,
   80|    528|	    sizeof(hdr->ike_rspi));
   81|    528|	hdr->ike_nextpayload = get_nextpayload(ibuf_data(data));
   82|    528|	hdr->ike_version = get_version(ibuf_data(data));
   83|    528|	hdr->ike_exchange = get_exchange(ibuf_data(data));
   84|    528|	hdr->ike_length = get_length(ibuf_data(data));
   85|    528|}
test_parser_fuzz.c:get_icookie:
   39|    528|{
   40|    528|	return &data[OFFSET_ICOOKIE];
   41|    528|}
test_parser_fuzz.c:get_rcookie:
   45|    528|{
   46|    528|	return &data[OFFSET_RCOOKIE];
   47|    528|}
test_parser_fuzz.c:get_nextpayload:
   51|    528|{
   52|    528|	return data[OFFSET_NEXTPAYLOAD];
   53|    528|}
test_parser_fuzz.c:get_version:
   57|    528|{
   58|    528|	return data[OFFSET_VERSION];
   59|    528|}
test_parser_fuzz.c:get_exchange:
   63|    528|{
   64|    528|	return data[OFFSET_EXCHANGE];
   65|    528|}
test_parser_fuzz.c:get_length:
   69|    528|{
   70|    528|	return *(u_int32_t *)&data[OFFSET_LENGTH];
   71|    528|}
test_parser_fuzz.c:prepare_message:
   89|    528|{
   90|    528|	static struct iked_sa	sa;
   91|       |
   92|    528|	bzero(&sa, sizeof(sa));
   93|    528|	bzero(msg, sizeof(*msg));
   94|       |
   95|    528|	msg->msg_sa = &sa;
   96|    528|	msg->msg_data = data;
   97|    528|	msg->msg_e = 1;
   98|    528|	msg->msg_parent = msg;
   99|    528|}

